
STM32F1_BareMetal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bfc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08001d2c  08001d2c  00011d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d98  08001d98  000200d4  2**0
                  CONTENTS
  4 .ARM          00000000  08001d98  08001d98  000200d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d98  08001d98  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d98  08001d98  00011d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d9c  08001d9c  00011d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  08001da0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000804  200000d4  08001e74  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008d8  08001e74  000208d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000358f  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c3a  00000000  00000000  0002368c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f8  00000000  00000000  000242c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000180  00000000  00000000  000244c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000116e1  00000000  00000000  00024640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000031df  00000000  00000000  00035d21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00059691  00000000  00000000  00038f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00092591  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a24  00000000  00000000  000925e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200000d4 	.word	0x200000d4
 800014c:	00000000 	.word	0x00000000
 8000150:	08001d14 	.word	0x08001d14

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000d8 	.word	0x200000d8
 800016c:	08001d14 	.word	0x08001d14

08000170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800017a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017e:	2b00      	cmp	r3, #0
 8000180:	db0b      	blt.n	800019a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	f003 021f 	and.w	r2, r3, #31
 8000188:	4906      	ldr	r1, [pc, #24]	; (80001a4 <__NVIC_EnableIRQ+0x34>)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	095b      	lsrs	r3, r3, #5
 8000190:	2001      	movs	r0, #1
 8000192:	fa00 f202 	lsl.w	r2, r0, r2
 8000196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	e000e100 	.word	0xe000e100

080001a8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	4603      	mov	r3, r0
 80001b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	db12      	blt.n	80001e0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001ba:	79fb      	ldrb	r3, [r7, #7]
 80001bc:	f003 021f 	and.w	r2, r3, #31
 80001c0:	490a      	ldr	r1, [pc, #40]	; (80001ec <__NVIC_DisableIRQ+0x44>)
 80001c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001c6:	095b      	lsrs	r3, r3, #5
 80001c8:	2001      	movs	r0, #1
 80001ca:	fa00 f202 	lsl.w	r2, r0, r2
 80001ce:	3320      	adds	r3, #32
 80001d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80001d4:	f3bf 8f4f 	dsb	sy
}
 80001d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80001da:	f3bf 8f6f 	isb	sy
}
 80001de:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80001e0:	bf00      	nop
 80001e2:	370c      	adds	r7, #12
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bc80      	pop	{r7}
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	e000e100 	.word	0xe000e100

080001f0 <F1_ADC_Initialize>:

/*
 * Initialize the ADC
 */
F1_adc_status_t F1_ADC_Initialize(F1_adc_t adc)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b084      	sub	sp, #16
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	4603      	mov	r3, r0
 80001f8:	71fb      	strb	r3, [r7, #7]
    /*
     * Settings:
     * 		The data is right aligned by default
     */
    uint32_t apb2Clock = F1_RCC_get_APB2_clock();
 80001fa:	f000 ff33 	bl	8001064 <F1_RCC_get_APB2_clock>
 80001fe:	60f8      	str	r0, [r7, #12]
    /*
    * Set the ADC pre-scaler to six or four:
    * If clock is 72MHz, ADC clock is 12MHz (6) (must be less than 14MHz)
    * if clock is 64MHz, ADC clock is 8MHz (8)
    */
    if(apb2Clock == 72000000)
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	4a2a      	ldr	r2, [pc, #168]	; (80002ac <F1_ADC_Initialize+0xbc>)
 8000204:	4293      	cmp	r3, r2
 8000206:	d106      	bne.n	8000216 <F1_ADC_Initialize+0x26>
    {
	RCC->CFGR |= RCC_CFGR_ADCPRE_DIV6;
 8000208:	4b29      	ldr	r3, [pc, #164]	; (80002b0 <F1_ADC_Initialize+0xc0>)
 800020a:	685b      	ldr	r3, [r3, #4]
 800020c:	4a28      	ldr	r2, [pc, #160]	; (80002b0 <F1_ADC_Initialize+0xc0>)
 800020e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000212:	6053      	str	r3, [r2, #4]
 8000214:	e009      	b.n	800022a <F1_ADC_Initialize+0x3a>
    }
    else if (apb2Clock == 64000000)
 8000216:	68fb      	ldr	r3, [r7, #12]
 8000218:	4a26      	ldr	r2, [pc, #152]	; (80002b4 <F1_ADC_Initialize+0xc4>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d105      	bne.n	800022a <F1_ADC_Initialize+0x3a>
    {
	RCC->CFGR |= RCC_CFGR_ADCPRE_DIV8;
 800021e:	4b24      	ldr	r3, [pc, #144]	; (80002b0 <F1_ADC_Initialize+0xc0>)
 8000220:	685b      	ldr	r3, [r3, #4]
 8000222:	4a23      	ldr	r2, [pc, #140]	; (80002b0 <F1_ADC_Initialize+0xc0>)
 8000224:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000228:	6053      	str	r3, [r2, #4]
    }


    if(adc == ADC_1)
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d119      	bne.n	8000264 <F1_ADC_Initialize+0x74>
    {
	/* Enable the clock */
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000230:	4b1f      	ldr	r3, [pc, #124]	; (80002b0 <F1_ADC_Initialize+0xc0>)
 8000232:	699b      	ldr	r3, [r3, #24]
 8000234:	4a1e      	ldr	r2, [pc, #120]	; (80002b0 <F1_ADC_Initialize+0xc0>)
 8000236:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800023a:	6193      	str	r3, [r2, #24]

	/* Enable the ADC */
	ADC1->CR2 |= ADC_CR2_ADON;
 800023c:	4b1e      	ldr	r3, [pc, #120]	; (80002b8 <F1_ADC_Initialize+0xc8>)
 800023e:	689b      	ldr	r3, [r3, #8]
 8000240:	4a1d      	ldr	r2, [pc, #116]	; (80002b8 <F1_ADC_Initialize+0xc8>)
 8000242:	f043 0301 	orr.w	r3, r3, #1
 8000246:	6093      	str	r3, [r2, #8]

	/* Calibrate the ADC */
	ADC1->CR2 |= ADC_CR2_CAL;
 8000248:	4b1b      	ldr	r3, [pc, #108]	; (80002b8 <F1_ADC_Initialize+0xc8>)
 800024a:	689b      	ldr	r3, [r3, #8]
 800024c:	4a1a      	ldr	r2, [pc, #104]	; (80002b8 <F1_ADC_Initialize+0xc8>)
 800024e:	f043 0304 	orr.w	r3, r3, #4
 8000252:	6093      	str	r3, [r2, #8]
	while(ADC1->CR2 & ADC_CR2_CAL);
 8000254:	bf00      	nop
 8000256:	4b18      	ldr	r3, [pc, #96]	; (80002b8 <F1_ADC_Initialize+0xc8>)
 8000258:	689b      	ldr	r3, [r3, #8]
 800025a:	f003 0304 	and.w	r3, r3, #4
 800025e:	2b00      	cmp	r3, #0
 8000260:	d1f9      	bne.n	8000256 <F1_ADC_Initialize+0x66>
 8000262:	e01e      	b.n	80002a2 <F1_ADC_Initialize+0xb2>
    }
    else if (adc == ADC_2)
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	2b01      	cmp	r3, #1
 8000268:	d119      	bne.n	800029e <F1_ADC_Initialize+0xae>
    {
	/* Enable the clock */
	RCC->APB2ENR |= RCC_APB2ENR_ADC2EN;
 800026a:	4b11      	ldr	r3, [pc, #68]	; (80002b0 <F1_ADC_Initialize+0xc0>)
 800026c:	699b      	ldr	r3, [r3, #24]
 800026e:	4a10      	ldr	r2, [pc, #64]	; (80002b0 <F1_ADC_Initialize+0xc0>)
 8000270:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000274:	6193      	str	r3, [r2, #24]
	/* Enable the ADC */
	ADC2->CR2 |= ADC_CR2_ADON;
 8000276:	4b11      	ldr	r3, [pc, #68]	; (80002bc <F1_ADC_Initialize+0xcc>)
 8000278:	689b      	ldr	r3, [r3, #8]
 800027a:	4a10      	ldr	r2, [pc, #64]	; (80002bc <F1_ADC_Initialize+0xcc>)
 800027c:	f043 0301 	orr.w	r3, r3, #1
 8000280:	6093      	str	r3, [r2, #8]
	/* Calibrate the ADC */
	ADC2->CR2 |= ADC_CR2_CAL;
 8000282:	4b0e      	ldr	r3, [pc, #56]	; (80002bc <F1_ADC_Initialize+0xcc>)
 8000284:	689b      	ldr	r3, [r3, #8]
 8000286:	4a0d      	ldr	r2, [pc, #52]	; (80002bc <F1_ADC_Initialize+0xcc>)
 8000288:	f043 0304 	orr.w	r3, r3, #4
 800028c:	6093      	str	r3, [r2, #8]
	while(ADC2->CR2 & ADC_CR2_CAL);
 800028e:	bf00      	nop
 8000290:	4b0a      	ldr	r3, [pc, #40]	; (80002bc <F1_ADC_Initialize+0xcc>)
 8000292:	689b      	ldr	r3, [r3, #8]
 8000294:	f003 0304 	and.w	r3, r3, #4
 8000298:	2b00      	cmp	r3, #0
 800029a:	d1f9      	bne.n	8000290 <F1_ADC_Initialize+0xa0>
 800029c:	e001      	b.n	80002a2 <F1_ADC_Initialize+0xb2>
    }
    else
    {
	return ADC_FAIL;
 800029e:	2301      	movs	r3, #1
 80002a0:	e000      	b.n	80002a4 <F1_ADC_Initialize+0xb4>
    }
    return ADC_OK;
 80002a2:	2300      	movs	r3, #0
}
 80002a4:	4618      	mov	r0, r3
 80002a6:	3710      	adds	r7, #16
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	044aa200 	.word	0x044aa200
 80002b0:	40021000 	.word	0x40021000
 80002b4:	03d09000 	.word	0x03d09000
 80002b8:	40012400 	.word	0x40012400
 80002bc:	40012800 	.word	0x40012800

080002c0 <F1_ADC_Start_Conversion_IT>:

/*
 * Start the ADC conversion for Interrupt
 */
F1_adc_status_t F1_ADC_Start_Conversion_IT(F1_adc_t adc, F1_adc_channel_t ch)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	4603      	mov	r3, r0
 80002c8:	460a      	mov	r2, r1
 80002ca:	71fb      	strb	r3, [r7, #7]
 80002cc:	4613      	mov	r3, r2
 80002ce:	71bb      	strb	r3, [r7, #6]
    /* Configure the pin as analog */
    _F1_ADC_configurePin(ch);
 80002d0:	79bb      	ldrb	r3, [r7, #6]
 80002d2:	4618      	mov	r0, r3
 80002d4:	f000 f922 	bl	800051c <_F1_ADC_configurePin>

    /* Select independent mode (clear it to be sure since other channels could have set it) */
    _adc_selection[adc]->CR1 &= ~(ADC_CR1_DUALMOD);
 80002d8:	79fb      	ldrb	r3, [r7, #7]
 80002da:	4a3d      	ldr	r2, [pc, #244]	; (80003d0 <F1_ADC_Start_Conversion_IT+0x110>)
 80002dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002e0:	685a      	ldr	r2, [r3, #4]
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	493a      	ldr	r1, [pc, #232]	; (80003d0 <F1_ADC_Start_Conversion_IT+0x110>)
 80002e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002ea:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80002ee:	605a      	str	r2, [r3, #4]

    /* Clear the CONT bit to select single conversion (also clear if it was used in continuous mode before) */
    _adc_selection[adc]->CR2 &= ~(ADC_CR2_CONT);
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	4a37      	ldr	r2, [pc, #220]	; (80003d0 <F1_ADC_Start_Conversion_IT+0x110>)
 80002f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002f8:	689a      	ldr	r2, [r3, #8]
 80002fa:	79fb      	ldrb	r3, [r7, #7]
 80002fc:	4934      	ldr	r1, [pc, #208]	; (80003d0 <F1_ADC_Start_Conversion_IT+0x110>)
 80002fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000302:	f022 0202 	bic.w	r2, r2, #2
 8000306:	609a      	str	r2, [r3, #8]

    /* Clear this register to allow for a single conversion */
    _adc_selection[adc]->SQR1 &= ~(ADC_SQR1_L);
 8000308:	79fb      	ldrb	r3, [r7, #7]
 800030a:	4a31      	ldr	r2, [pc, #196]	; (80003d0 <F1_ADC_Start_Conversion_IT+0x110>)
 800030c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	492e      	ldr	r1, [pc, #184]	; (80003d0 <F1_ADC_Start_Conversion_IT+0x110>)
 8000316:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800031a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800031e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(ch > 9)
 8000320:	79bb      	ldrb	r3, [r7, #6]
 8000322:	2b09      	cmp	r3, #9
 8000324:	d914      	bls.n	8000350 <F1_ADC_Start_Conversion_IT+0x90>
    {
	/* Set the sampling time to the longest possible */
	_adc_selection[adc]->SMPR1 |= (0x7 << (ch*3));
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	4a29      	ldr	r2, [pc, #164]	; (80003d0 <F1_ADC_Start_Conversion_IT+0x110>)
 800032a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800032e:	68d9      	ldr	r1, [r3, #12]
 8000330:	79ba      	ldrb	r2, [r7, #6]
 8000332:	4613      	mov	r3, r2
 8000334:	005b      	lsls	r3, r3, #1
 8000336:	4413      	add	r3, r2
 8000338:	2207      	movs	r2, #7
 800033a:	fa02 f303 	lsl.w	r3, r2, r3
 800033e:	4618      	mov	r0, r3
 8000340:	79fb      	ldrb	r3, [r7, #7]
 8000342:	4a23      	ldr	r2, [pc, #140]	; (80003d0 <F1_ADC_Start_Conversion_IT+0x110>)
 8000344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000348:	ea41 0200 	orr.w	r2, r1, r0
 800034c:	60da      	str	r2, [r3, #12]
 800034e:	e013      	b.n	8000378 <F1_ADC_Start_Conversion_IT+0xb8>
    }
    else
    {
	/* Set the sampling time to the longest possible */
	_adc_selection[adc]->SMPR2 |= (0x7 << (ch*3));
 8000350:	79fb      	ldrb	r3, [r7, #7]
 8000352:	4a1f      	ldr	r2, [pc, #124]	; (80003d0 <F1_ADC_Start_Conversion_IT+0x110>)
 8000354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000358:	6919      	ldr	r1, [r3, #16]
 800035a:	79ba      	ldrb	r2, [r7, #6]
 800035c:	4613      	mov	r3, r2
 800035e:	005b      	lsls	r3, r3, #1
 8000360:	4413      	add	r3, r2
 8000362:	2207      	movs	r2, #7
 8000364:	fa02 f303 	lsl.w	r3, r2, r3
 8000368:	4618      	mov	r0, r3
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	4a18      	ldr	r2, [pc, #96]	; (80003d0 <F1_ADC_Start_Conversion_IT+0x110>)
 800036e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000372:	ea41 0200 	orr.w	r2, r1, r0
 8000376:	611a      	str	r2, [r3, #16]
    }

    /* Since the amount of conversions is 1, set the SQ1 part of the register with the pin number */
    _adc_selection[adc]->SQR3 |= (ch << 0);
 8000378:	79fb      	ldrb	r3, [r7, #7]
 800037a:	4a15      	ldr	r2, [pc, #84]	; (80003d0 <F1_ADC_Start_Conversion_IT+0x110>)
 800037c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000380:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000382:	79ba      	ldrb	r2, [r7, #6]
 8000384:	79fb      	ldrb	r3, [r7, #7]
 8000386:	4812      	ldr	r0, [pc, #72]	; (80003d0 <F1_ADC_Start_Conversion_IT+0x110>)
 8000388:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800038c:	430a      	orrs	r2, r1
 800038e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the interrupts */
    _adc_selection[adc]->CR1 |= ADC_CR1_EOCIE;
 8000390:	79fb      	ldrb	r3, [r7, #7]
 8000392:	4a0f      	ldr	r2, [pc, #60]	; (80003d0 <F1_ADC_Start_Conversion_IT+0x110>)
 8000394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000398:	685a      	ldr	r2, [r3, #4]
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	490c      	ldr	r1, [pc, #48]	; (80003d0 <F1_ADC_Start_Conversion_IT+0x110>)
 800039e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003a2:	f042 0220 	orr.w	r2, r2, #32
 80003a6:	605a      	str	r2, [r3, #4]
    NVIC_EnableIRQ(ADC1_2_IRQn);
 80003a8:	2012      	movs	r0, #18
 80003aa:	f7ff fee1 	bl	8000170 <__NVIC_EnableIRQ>

    /* Start the conversion */
    _adc_selection[adc]->CR2 |= ADC_CR2_ADON;
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	4a07      	ldr	r2, [pc, #28]	; (80003d0 <F1_ADC_Start_Conversion_IT+0x110>)
 80003b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003b6:	689a      	ldr	r2, [r3, #8]
 80003b8:	79fb      	ldrb	r3, [r7, #7]
 80003ba:	4905      	ldr	r1, [pc, #20]	; (80003d0 <F1_ADC_Start_Conversion_IT+0x110>)
 80003bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003c0:	f042 0201 	orr.w	r2, r2, #1
 80003c4:	609a      	str	r2, [r3, #8]

    return ADC_OK;
 80003c6:	2300      	movs	r3, #0
}
 80003c8:	4618      	mov	r0, r3
 80003ca:	3708      	adds	r7, #8
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	20000028 	.word	0x20000028

080003d4 <F1_ADC_Start_DMA_ADC1>:

/*
 * Start the DMA on this ADC pin
 */
F1_adc_status_t F1_ADC_Start_DMA_ADC1(F1_adc_channel_t ch, uint16_t *adcDMAdata, uint16_t len)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	6039      	str	r1, [r7, #0]
 80003de:	71fb      	strb	r3, [r7, #7]
 80003e0:	4613      	mov	r3, r2
 80003e2:	80bb      	strh	r3, [r7, #4]
     *
     * ONLY ADC1 IS USED WITH DMA!!
     */

    /* Configure the pin as analog */
    _F1_ADC_configurePin(ch);
 80003e4:	79fb      	ldrb	r3, [r7, #7]
 80003e6:	4618      	mov	r0, r3
 80003e8:	f000 f898 	bl	800051c <_F1_ADC_configurePin>

    /* Enable the DMA clock */
    RCC->AHBENR |= RCC_AHBENR_DMA1EN;
 80003ec:	4b47      	ldr	r3, [pc, #284]	; (800050c <F1_ADC_Start_DMA_ADC1+0x138>)
 80003ee:	695b      	ldr	r3, [r3, #20]
 80003f0:	4a46      	ldr	r2, [pc, #280]	; (800050c <F1_ADC_Start_DMA_ADC1+0x138>)
 80003f2:	f043 0301 	orr.w	r3, r3, #1
 80003f6:	6153      	str	r3, [r2, #20]

    /* Select independent mode (clear it to be sure since other channels could have set it) */
    ADC1->CR1 &= ~(ADC_CR1_DUALMOD);
 80003f8:	4b45      	ldr	r3, [pc, #276]	; (8000510 <F1_ADC_Start_DMA_ADC1+0x13c>)
 80003fa:	685b      	ldr	r3, [r3, #4]
 80003fc:	4a44      	ldr	r2, [pc, #272]	; (8000510 <F1_ADC_Start_DMA_ADC1+0x13c>)
 80003fe:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000402:	6053      	str	r3, [r2, #4]

    /* Set the CONT bit to select continuous conversion for the DMA */
    ADC1->CR2 |= ADC_CR2_CONT;
 8000404:	4b42      	ldr	r3, [pc, #264]	; (8000510 <F1_ADC_Start_DMA_ADC1+0x13c>)
 8000406:	689b      	ldr	r3, [r3, #8]
 8000408:	4a41      	ldr	r2, [pc, #260]	; (8000510 <F1_ADC_Start_DMA_ADC1+0x13c>)
 800040a:	f043 0302 	orr.w	r3, r3, #2
 800040e:	6093      	str	r3, [r2, #8]

    /* Clear this register to allow for a single conversion */
    ADC1->SQR1 &= ~(ADC_SQR1_L);
 8000410:	4b3f      	ldr	r3, [pc, #252]	; (8000510 <F1_ADC_Start_DMA_ADC1+0x13c>)
 8000412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000414:	4a3e      	ldr	r2, [pc, #248]	; (8000510 <F1_ADC_Start_DMA_ADC1+0x13c>)
 8000416:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800041a:	62d3      	str	r3, [r2, #44]	; 0x2c

    if(ch > 9)
 800041c:	79fb      	ldrb	r3, [r7, #7]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d90c      	bls.n	800043c <F1_ADC_Start_DMA_ADC1+0x68>
    {
	/* Set the sampling time to the longest possible */
	ADC1->SMPR1 |= (0x7 << (ch*3));
 8000422:	4b3b      	ldr	r3, [pc, #236]	; (8000510 <F1_ADC_Start_DMA_ADC1+0x13c>)
 8000424:	68d9      	ldr	r1, [r3, #12]
 8000426:	79fa      	ldrb	r2, [r7, #7]
 8000428:	4613      	mov	r3, r2
 800042a:	005b      	lsls	r3, r3, #1
 800042c:	4413      	add	r3, r2
 800042e:	2207      	movs	r2, #7
 8000430:	fa02 f303 	lsl.w	r3, r2, r3
 8000434:	4a36      	ldr	r2, [pc, #216]	; (8000510 <F1_ADC_Start_DMA_ADC1+0x13c>)
 8000436:	430b      	orrs	r3, r1
 8000438:	60d3      	str	r3, [r2, #12]
 800043a:	e00b      	b.n	8000454 <F1_ADC_Start_DMA_ADC1+0x80>
    }
    else
    {
	/* Set the sampling time to the longest possible */
	ADC1->SMPR2 |= (0x7 << (ch*3));
 800043c:	4b34      	ldr	r3, [pc, #208]	; (8000510 <F1_ADC_Start_DMA_ADC1+0x13c>)
 800043e:	6919      	ldr	r1, [r3, #16]
 8000440:	79fa      	ldrb	r2, [r7, #7]
 8000442:	4613      	mov	r3, r2
 8000444:	005b      	lsls	r3, r3, #1
 8000446:	4413      	add	r3, r2
 8000448:	2207      	movs	r2, #7
 800044a:	fa02 f303 	lsl.w	r3, r2, r3
 800044e:	4a30      	ldr	r2, [pc, #192]	; (8000510 <F1_ADC_Start_DMA_ADC1+0x13c>)
 8000450:	430b      	orrs	r3, r1
 8000452:	6113      	str	r3, [r2, #16]
    }

    /* Since the amount of conversions is 1, set the SQ1 part of the register with the pin number */
    ADC1->SQR3 |= (ch << 0);
 8000454:	4b2e      	ldr	r3, [pc, #184]	; (8000510 <F1_ADC_Start_DMA_ADC1+0x13c>)
 8000456:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000458:	79fb      	ldrb	r3, [r7, #7]
 800045a:	492d      	ldr	r1, [pc, #180]	; (8000510 <F1_ADC_Start_DMA_ADC1+0x13c>)
 800045c:	4313      	orrs	r3, r2
 800045e:	634b      	str	r3, [r1, #52]	; 0x34

    /* Disable the interrupts */
    ADC1->CR1 &= ~(ADC_CR1_EOCIE);
 8000460:	4b2b      	ldr	r3, [pc, #172]	; (8000510 <F1_ADC_Start_DMA_ADC1+0x13c>)
 8000462:	685b      	ldr	r3, [r3, #4]
 8000464:	4a2a      	ldr	r2, [pc, #168]	; (8000510 <F1_ADC_Start_DMA_ADC1+0x13c>)
 8000466:	f023 0320 	bic.w	r3, r3, #32
 800046a:	6053      	str	r3, [r2, #4]
    ADC1->SR &= ~(ADC_SR_EOC);
 800046c:	4b28      	ldr	r3, [pc, #160]	; (8000510 <F1_ADC_Start_DMA_ADC1+0x13c>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a27      	ldr	r2, [pc, #156]	; (8000510 <F1_ADC_Start_DMA_ADC1+0x13c>)
 8000472:	f023 0302 	bic.w	r3, r3, #2
 8000476:	6013      	str	r3, [r2, #0]
    NVIC_DisableIRQ(ADC1_2_IRQn);
 8000478:	2012      	movs	r0, #18
 800047a:	f7ff fe95 	bl	80001a8 <__NVIC_DisableIRQ>

    /* Enable DMA on the ADC */
    ADC1->CR2 |= ADC_CR2_DMA;
 800047e:	4b24      	ldr	r3, [pc, #144]	; (8000510 <F1_ADC_Start_DMA_ADC1+0x13c>)
 8000480:	689b      	ldr	r3, [r3, #8]
 8000482:	4a23      	ldr	r2, [pc, #140]	; (8000510 <F1_ADC_Start_DMA_ADC1+0x13c>)
 8000484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000488:	6093      	str	r3, [r2, #8]

    /* Set the register of the peripheral */
    DMA1_Channel1->CPAR = (uint32_t)(&(ADC1->DR));
 800048a:	4b22      	ldr	r3, [pc, #136]	; (8000514 <F1_ADC_Start_DMA_ADC1+0x140>)
 800048c:	4a22      	ldr	r2, [pc, #136]	; (8000518 <F1_ADC_Start_DMA_ADC1+0x144>)
 800048e:	609a      	str	r2, [r3, #8]

    /* Set the address of the memory */
    DMA1_Channel1->CMAR = (uint32_t)(adcDMAdata);
 8000490:	4a20      	ldr	r2, [pc, #128]	; (8000514 <F1_ADC_Start_DMA_ADC1+0x140>)
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	60d3      	str	r3, [r2, #12]

    /* Set the number of data to transfer */
    DMA1_Channel1->CNDTR = len;
 8000496:	4a1f      	ldr	r2, [pc, #124]	; (8000514 <F1_ADC_Start_DMA_ADC1+0x140>)
 8000498:	88bb      	ldrh	r3, [r7, #4]
 800049a:	6053      	str	r3, [r2, #4]

    /* Set the priority to medium */
    DMA1_Channel1->CCR |= DMA_CCR_PL_0;
 800049c:	4b1d      	ldr	r3, [pc, #116]	; (8000514 <F1_ADC_Start_DMA_ADC1+0x140>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a1c      	ldr	r2, [pc, #112]	; (8000514 <F1_ADC_Start_DMA_ADC1+0x140>)
 80004a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004a6:	6013      	str	r3, [r2, #0]

    /* Set memory and peripheral size to 16 bits */
    DMA1_Channel1->CCR |= DMA_CCR_MSIZE_0;
 80004a8:	4b1a      	ldr	r3, [pc, #104]	; (8000514 <F1_ADC_Start_DMA_ADC1+0x140>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a19      	ldr	r2, [pc, #100]	; (8000514 <F1_ADC_Start_DMA_ADC1+0x140>)
 80004ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004b2:	6013      	str	r3, [r2, #0]
    DMA1_Channel1->CCR |= DMA_CCR_PSIZE_0;
 80004b4:	4b17      	ldr	r3, [pc, #92]	; (8000514 <F1_ADC_Start_DMA_ADC1+0x140>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a16      	ldr	r2, [pc, #88]	; (8000514 <F1_ADC_Start_DMA_ADC1+0x140>)
 80004ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004be:	6013      	str	r3, [r2, #0]

    /* Set ONLY the increment of the memory, since we want to populate the buffer. */
    DMA1_Channel1->CCR |= DMA_CCR_MINC;
 80004c0:	4b14      	ldr	r3, [pc, #80]	; (8000514 <F1_ADC_Start_DMA_ADC1+0x140>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a13      	ldr	r2, [pc, #76]	; (8000514 <F1_ADC_Start_DMA_ADC1+0x140>)
 80004c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004ca:	6013      	str	r3, [r2, #0]

    /* Set the direction to read from the peripheral */
    DMA1_Channel1->CCR &= ~(DMA_CCR_DIR);
 80004cc:	4b11      	ldr	r3, [pc, #68]	; (8000514 <F1_ADC_Start_DMA_ADC1+0x140>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a10      	ldr	r2, [pc, #64]	; (8000514 <F1_ADC_Start_DMA_ADC1+0x140>)
 80004d2:	f023 0310 	bic.w	r3, r3, #16
 80004d6:	6013      	str	r3, [r2, #0]

    /* Enable the transfer complete AND transfer error interrupt */
    DMA1_Channel1->CCR |= DMA_CCR_TCIE | DMA_CCR_TEIE;
 80004d8:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <F1_ADC_Start_DMA_ADC1+0x140>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0d      	ldr	r2, [pc, #52]	; (8000514 <F1_ADC_Start_DMA_ADC1+0x140>)
 80004de:	f043 030a 	orr.w	r3, r3, #10
 80004e2:	6013      	str	r3, [r2, #0]

    /* Enable the channel */
    DMA1_Channel1->CCR |= DMA_CCR_EN;
 80004e4:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <F1_ADC_Start_DMA_ADC1+0x140>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a0a      	ldr	r2, [pc, #40]	; (8000514 <F1_ADC_Start_DMA_ADC1+0x140>)
 80004ea:	f043 0301 	orr.w	r3, r3, #1
 80004ee:	6013      	str	r3, [r2, #0]
    NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004f0:	200b      	movs	r0, #11
 80004f2:	f7ff fe3d 	bl	8000170 <__NVIC_EnableIRQ>

    /* Start the conversion */
    ADC1->CR2 |= ADC_CR2_ADON;
 80004f6:	4b06      	ldr	r3, [pc, #24]	; (8000510 <F1_ADC_Start_DMA_ADC1+0x13c>)
 80004f8:	689b      	ldr	r3, [r3, #8]
 80004fa:	4a05      	ldr	r2, [pc, #20]	; (8000510 <F1_ADC_Start_DMA_ADC1+0x13c>)
 80004fc:	f043 0301 	orr.w	r3, r3, #1
 8000500:	6093      	str	r3, [r2, #8]

    return ADC_OK;
 8000502:	2300      	movs	r3, #0
}
 8000504:	4618      	mov	r0, r3
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40021000 	.word	0x40021000
 8000510:	40012400 	.word	0x40012400
 8000514:	40020008 	.word	0x40020008
 8000518:	4001244c 	.word	0x4001244c

0800051c <_F1_ADC_configurePin>:

/*
 * Configure the ADC pin
 */
static F1_adc_status_t _F1_ADC_configurePin(F1_adc_channel_t ch)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	71fb      	strb	r3, [r7, #7]
    if(ch > 15)
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	2b0f      	cmp	r3, #15
 800052a:	d901      	bls.n	8000530 <_F1_ADC_configurePin+0x14>
    {
	return ADC_FAIL;
 800052c:	2301      	movs	r3, #1
 800052e:	e00a      	b.n	8000546 <_F1_ADC_configurePin+0x2a>
    }
    /* Set the pin as an input */
    F1_GPIO_Pin_Setup_INPUT(_adc_channel_port[ch], _adc_channel_pin[ch], GPIO_INPUT_ANALOG);
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	4a07      	ldr	r2, [pc, #28]	; (8000550 <_F1_ADC_configurePin+0x34>)
 8000534:	5cd0      	ldrb	r0, [r2, r3]
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	4a06      	ldr	r2, [pc, #24]	; (8000554 <_F1_ADC_configurePin+0x38>)
 800053a:	5cd3      	ldrb	r3, [r2, r3]
 800053c:	2200      	movs	r2, #0
 800053e:	4619      	mov	r1, r3
 8000540:	f000 f91e 	bl	8000780 <F1_GPIO_Pin_Setup_INPUT>
    return ADC_OK;
 8000544:	2300      	movs	r3, #0
}
 8000546:	4618      	mov	r0, r3
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	20000000 	.word	0x20000000
 8000554:	20000014 	.word	0x20000014

08000558 <F1_ADC_Get_ADC_Data>:

/*
 * Returns the value of the data register
 */
uint16_t F1_ADC_Get_ADC_Data(F1_adc_t adc)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	71fb      	strb	r3, [r7, #7]
    return _adc_selection[adc]->DR;
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	4a04      	ldr	r2, [pc, #16]	; (8000578 <F1_ADC_Get_ADC_Data+0x20>)
 8000566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800056a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056c:	b29b      	uxth	r3, r3
}
 800056e:	4618      	mov	r0, r3
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr
 8000578:	20000028 	.word	0x20000028

0800057c <__NVIC_EnableIRQ>:
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800058a:	2b00      	cmp	r3, #0
 800058c:	db0b      	blt.n	80005a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	f003 021f 	and.w	r2, r3, #31
 8000594:	4906      	ldr	r1, [pc, #24]	; (80005b0 <__NVIC_EnableIRQ+0x34>)
 8000596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059a:	095b      	lsrs	r3, r3, #5
 800059c:	2001      	movs	r0, #1
 800059e:	fa00 f202 	lsl.w	r2, r0, r2
 80005a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr
 80005b0:	e000e100 	.word	0xe000e100

080005b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	6039      	str	r1, [r7, #0]
 80005be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	db0a      	blt.n	80005de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	b2da      	uxtb	r2, r3
 80005cc:	490c      	ldr	r1, [pc, #48]	; (8000600 <__NVIC_SetPriority+0x4c>)
 80005ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d2:	0112      	lsls	r2, r2, #4
 80005d4:	b2d2      	uxtb	r2, r2
 80005d6:	440b      	add	r3, r1
 80005d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005dc:	e00a      	b.n	80005f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	b2da      	uxtb	r2, r3
 80005e2:	4908      	ldr	r1, [pc, #32]	; (8000604 <__NVIC_SetPriority+0x50>)
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	f003 030f 	and.w	r3, r3, #15
 80005ea:	3b04      	subs	r3, #4
 80005ec:	0112      	lsls	r2, r2, #4
 80005ee:	b2d2      	uxtb	r2, r2
 80005f0:	440b      	add	r3, r1
 80005f2:	761a      	strb	r2, [r3, #24]
}
 80005f4:	bf00      	nop
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bc80      	pop	{r7}
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	e000e100 	.word	0xe000e100
 8000604:	e000ed00 	.word	0xe000ed00

08000608 <F1_GPIO_Pin_Setup_OUT>:

/*
 * Configure the pin with the selected mode
 */
F1_gpio_status_t F1_GPIO_Pin_Setup_OUT(F1_gpio_port_t port, F1_gpio_pin_t pin, F1_gpio_output_mode_t mode, F1_gpio_output_config_t conf)
{
 8000608:	b590      	push	{r4, r7, lr}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	4604      	mov	r4, r0
 8000610:	4608      	mov	r0, r1
 8000612:	4611      	mov	r1, r2
 8000614:	461a      	mov	r2, r3
 8000616:	4623      	mov	r3, r4
 8000618:	71fb      	strb	r3, [r7, #7]
 800061a:	4603      	mov	r3, r0
 800061c:	71bb      	strb	r3, [r7, #6]
 800061e:	460b      	mov	r3, r1
 8000620:	717b      	strb	r3, [r7, #5]
 8000622:	4613      	mov	r3, r2
 8000624:	713b      	strb	r3, [r7, #4]
    /* Enable the GPIO port clock */
    if(F1_GPIO_Clock_Enable(port) != GPIO_OK)
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	4618      	mov	r0, r3
 800062a:	f000 f9fd 	bl	8000a28 <F1_GPIO_Clock_Enable>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <F1_GPIO_Pin_Setup_OUT+0x30>
    {
	return GPIO_FAIL;
 8000634:	2301      	movs	r3, #1
 8000636:	e09c      	b.n	8000772 <F1_GPIO_Pin_Setup_OUT+0x16a>
    }
    if(pin < 8)
 8000638:	79bb      	ldrb	r3, [r7, #6]
 800063a:	2b07      	cmp	r3, #7
 800063c:	d84a      	bhi.n	80006d4 <F1_GPIO_Pin_Setup_OUT+0xcc>
    {
	uint8_t location_mode = (pin*4);
 800063e:	79bb      	ldrb	r3, [r7, #6]
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	737b      	strb	r3, [r7, #13]
	uint8_t location_cnf = (pin*4)+2;
 8000644:	79bb      	ldrb	r3, [r7, #6]
 8000646:	009b      	lsls	r3, r3, #2
 8000648:	b2db      	uxtb	r3, r3
 800064a:	3302      	adds	r3, #2
 800064c:	733b      	strb	r3, [r7, #12]
	_F1_GPIO_Port_Lists[port]->CRL &= ~(0x03 << location_mode);
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	4a4a      	ldr	r2, [pc, #296]	; (800077c <F1_GPIO_Pin_Setup_OUT+0x174>)
 8000652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	7b7b      	ldrb	r3, [r7, #13]
 800065a:	2103      	movs	r1, #3
 800065c:	fa01 f303 	lsl.w	r3, r1, r3
 8000660:	43db      	mvns	r3, r3
 8000662:	4618      	mov	r0, r3
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	4945      	ldr	r1, [pc, #276]	; (800077c <F1_GPIO_Pin_Setup_OUT+0x174>)
 8000668:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800066c:	4002      	ands	r2, r0
 800066e:	601a      	str	r2, [r3, #0]
	_F1_GPIO_Port_Lists[port]->CRL |= (mode << location_mode);
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	4a42      	ldr	r2, [pc, #264]	; (800077c <F1_GPIO_Pin_Setup_OUT+0x174>)
 8000674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	7979      	ldrb	r1, [r7, #5]
 800067c:	7b7b      	ldrb	r3, [r7, #13]
 800067e:	fa01 f303 	lsl.w	r3, r1, r3
 8000682:	4618      	mov	r0, r3
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	493d      	ldr	r1, [pc, #244]	; (800077c <F1_GPIO_Pin_Setup_OUT+0x174>)
 8000688:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800068c:	4302      	orrs	r2, r0
 800068e:	601a      	str	r2, [r3, #0]

	_F1_GPIO_Port_Lists[port]->CRL &= ~(0x03 << location_cnf);
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	4a3a      	ldr	r2, [pc, #232]	; (800077c <F1_GPIO_Pin_Setup_OUT+0x174>)
 8000694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	7b3b      	ldrb	r3, [r7, #12]
 800069c:	2103      	movs	r1, #3
 800069e:	fa01 f303 	lsl.w	r3, r1, r3
 80006a2:	43db      	mvns	r3, r3
 80006a4:	4618      	mov	r0, r3
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	4934      	ldr	r1, [pc, #208]	; (800077c <F1_GPIO_Pin_Setup_OUT+0x174>)
 80006aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006ae:	4002      	ands	r2, r0
 80006b0:	601a      	str	r2, [r3, #0]
	_F1_GPIO_Port_Lists[port]->CRL |= (conf << location_cnf);
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	4a31      	ldr	r2, [pc, #196]	; (800077c <F1_GPIO_Pin_Setup_OUT+0x174>)
 80006b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	7939      	ldrb	r1, [r7, #4]
 80006be:	7b3b      	ldrb	r3, [r7, #12]
 80006c0:	fa01 f303 	lsl.w	r3, r1, r3
 80006c4:	4618      	mov	r0, r3
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	492c      	ldr	r1, [pc, #176]	; (800077c <F1_GPIO_Pin_Setup_OUT+0x174>)
 80006ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006ce:	4302      	orrs	r2, r0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	e04d      	b.n	8000770 <F1_GPIO_Pin_Setup_OUT+0x168>
    }
    else
    {
	uint8_t location_mode = ((pin-8)*4);
 80006d4:	79bb      	ldrb	r3, [r7, #6]
 80006d6:	3b08      	subs	r3, #8
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	73fb      	strb	r3, [r7, #15]
	uint8_t location_cnf = ((pin-8)*4)+2;
 80006de:	79bb      	ldrb	r3, [r7, #6]
 80006e0:	3b08      	subs	r3, #8
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	009b      	lsls	r3, r3, #2
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	3302      	adds	r3, #2
 80006ea:	73bb      	strb	r3, [r7, #14]
	_F1_GPIO_Port_Lists[port]->CRH &= ~(0x3 << location_mode);
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	4a23      	ldr	r2, [pc, #140]	; (800077c <F1_GPIO_Pin_Setup_OUT+0x174>)
 80006f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006f4:	685a      	ldr	r2, [r3, #4]
 80006f6:	7bfb      	ldrb	r3, [r7, #15]
 80006f8:	2103      	movs	r1, #3
 80006fa:	fa01 f303 	lsl.w	r3, r1, r3
 80006fe:	43db      	mvns	r3, r3
 8000700:	4618      	mov	r0, r3
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	491d      	ldr	r1, [pc, #116]	; (800077c <F1_GPIO_Pin_Setup_OUT+0x174>)
 8000706:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800070a:	4002      	ands	r2, r0
 800070c:	605a      	str	r2, [r3, #4]
	_F1_GPIO_Port_Lists[port]->CRH |= (mode << location_mode);
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	4a1a      	ldr	r2, [pc, #104]	; (800077c <F1_GPIO_Pin_Setup_OUT+0x174>)
 8000712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000716:	685a      	ldr	r2, [r3, #4]
 8000718:	7979      	ldrb	r1, [r7, #5]
 800071a:	7bfb      	ldrb	r3, [r7, #15]
 800071c:	fa01 f303 	lsl.w	r3, r1, r3
 8000720:	4618      	mov	r0, r3
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	4915      	ldr	r1, [pc, #84]	; (800077c <F1_GPIO_Pin_Setup_OUT+0x174>)
 8000726:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800072a:	4302      	orrs	r2, r0
 800072c:	605a      	str	r2, [r3, #4]

	_F1_GPIO_Port_Lists[port]->CRH &= ~(0x3 << location_cnf);
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	4a12      	ldr	r2, [pc, #72]	; (800077c <F1_GPIO_Pin_Setup_OUT+0x174>)
 8000732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000736:	685a      	ldr	r2, [r3, #4]
 8000738:	7bbb      	ldrb	r3, [r7, #14]
 800073a:	2103      	movs	r1, #3
 800073c:	fa01 f303 	lsl.w	r3, r1, r3
 8000740:	43db      	mvns	r3, r3
 8000742:	4618      	mov	r0, r3
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	490d      	ldr	r1, [pc, #52]	; (800077c <F1_GPIO_Pin_Setup_OUT+0x174>)
 8000748:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800074c:	4002      	ands	r2, r0
 800074e:	605a      	str	r2, [r3, #4]
	_F1_GPIO_Port_Lists[port]->CRH |= (conf << location_cnf);
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	4a0a      	ldr	r2, [pc, #40]	; (800077c <F1_GPIO_Pin_Setup_OUT+0x174>)
 8000754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000758:	685a      	ldr	r2, [r3, #4]
 800075a:	7939      	ldrb	r1, [r7, #4]
 800075c:	7bbb      	ldrb	r3, [r7, #14]
 800075e:	fa01 f303 	lsl.w	r3, r1, r3
 8000762:	4618      	mov	r0, r3
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	4905      	ldr	r1, [pc, #20]	; (800077c <F1_GPIO_Pin_Setup_OUT+0x174>)
 8000768:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800076c:	4302      	orrs	r2, r0
 800076e:	605a      	str	r2, [r3, #4]
    }
    return GPIO_OK;
 8000770:	2300      	movs	r3, #0
}
 8000772:	4618      	mov	r0, r3
 8000774:	3714      	adds	r7, #20
 8000776:	46bd      	mov	sp, r7
 8000778:	bd90      	pop	{r4, r7, pc}
 800077a:	bf00      	nop
 800077c:	20000030 	.word	0x20000030

08000780 <F1_GPIO_Pin_Setup_INPUT>:

/*
 * Configure the pin as input with the selected configuration
 */
F1_gpio_status_t F1_GPIO_Pin_Setup_INPUT(F1_gpio_port_t port, F1_gpio_pin_t pin, F1_gpio_input_config_t conf)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
 800078a:	460b      	mov	r3, r1
 800078c:	71bb      	strb	r3, [r7, #6]
 800078e:	4613      	mov	r3, r2
 8000790:	717b      	strb	r3, [r7, #5]
    /* Enable the GPIO port clock */
    if(F1_GPIO_Clock_Enable(port) != GPIO_OK)
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	4618      	mov	r0, r3
 8000796:	f000 f947 	bl	8000a28 <F1_GPIO_Clock_Enable>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <F1_GPIO_Pin_Setup_INPUT+0x24>
    {
	return GPIO_FAIL;
 80007a0:	2301      	movs	r3, #1
 80007a2:	e0cc      	b.n	800093e <F1_GPIO_Pin_Setup_INPUT+0x1be>
    }
    if(pin < 8)
 80007a4:	79bb      	ldrb	r3, [r7, #6]
 80007a6:	2b07      	cmp	r3, #7
 80007a8:	d862      	bhi.n	8000870 <F1_GPIO_Pin_Setup_INPUT+0xf0>
    {
	uint8_t location_mode = (pin*4);
 80007aa:	79bb      	ldrb	r3, [r7, #6]
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	737b      	strb	r3, [r7, #13]
	uint8_t location_cnf = (pin*4)+2;
 80007b0:	79bb      	ldrb	r3, [r7, #6]
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	3302      	adds	r3, #2
 80007b8:	733b      	strb	r3, [r7, #12]
	_F1_GPIO_Port_Lists[port]->CRL &= ~(0x3 << location_mode);	// Clear the mode for Input
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	4a62      	ldr	r2, [pc, #392]	; (8000948 <F1_GPIO_Pin_Setup_INPUT+0x1c8>)
 80007be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	7b7b      	ldrb	r3, [r7, #13]
 80007c6:	2103      	movs	r1, #3
 80007c8:	fa01 f303 	lsl.w	r3, r1, r3
 80007cc:	43db      	mvns	r3, r3
 80007ce:	4618      	mov	r0, r3
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	495d      	ldr	r1, [pc, #372]	; (8000948 <F1_GPIO_Pin_Setup_INPUT+0x1c8>)
 80007d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007d8:	4002      	ands	r2, r0
 80007da:	601a      	str	r2, [r3, #0]

	_F1_GPIO_Port_Lists[port]->CRL &= ~(0x3 << location_cnf);	// Clear the CNF register for a clean start
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	4a5a      	ldr	r2, [pc, #360]	; (8000948 <F1_GPIO_Pin_Setup_INPUT+0x1c8>)
 80007e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	7b3b      	ldrb	r3, [r7, #12]
 80007e8:	2103      	movs	r1, #3
 80007ea:	fa01 f303 	lsl.w	r3, r1, r3
 80007ee:	43db      	mvns	r3, r3
 80007f0:	4618      	mov	r0, r3
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	4954      	ldr	r1, [pc, #336]	; (8000948 <F1_GPIO_Pin_Setup_INPUT+0x1c8>)
 80007f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007fa:	4002      	ands	r2, r0
 80007fc:	601a      	str	r2, [r3, #0]
	_F1_GPIO_Port_Lists[port]->CRL |= (conf << location_cnf);	// Set the pin as the desired mode
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	4a51      	ldr	r2, [pc, #324]	; (8000948 <F1_GPIO_Pin_Setup_INPUT+0x1c8>)
 8000802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	7979      	ldrb	r1, [r7, #5]
 800080a:	7b3b      	ldrb	r3, [r7, #12]
 800080c:	fa01 f303 	lsl.w	r3, r1, r3
 8000810:	4618      	mov	r0, r3
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	494c      	ldr	r1, [pc, #304]	; (8000948 <F1_GPIO_Pin_Setup_INPUT+0x1c8>)
 8000816:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800081a:	4302      	orrs	r2, r0
 800081c:	601a      	str	r2, [r3, #0]
	if(conf == GPIO_INPUT_PU)
 800081e:	797b      	ldrb	r3, [r7, #5]
 8000820:	2b02      	cmp	r3, #2
 8000822:	d110      	bne.n	8000846 <F1_GPIO_Pin_Setup_INPUT+0xc6>
	{
	    _F1_GPIO_Port_Lists[port]->ODR |= (1 << pin);		// Set the pin in ODR to enable pull-up
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	4a48      	ldr	r2, [pc, #288]	; (8000948 <F1_GPIO_Pin_Setup_INPUT+0x1c8>)
 8000828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800082c:	68da      	ldr	r2, [r3, #12]
 800082e:	79bb      	ldrb	r3, [r7, #6]
 8000830:	2101      	movs	r1, #1
 8000832:	fa01 f303 	lsl.w	r3, r1, r3
 8000836:	4618      	mov	r0, r3
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	4943      	ldr	r1, [pc, #268]	; (8000948 <F1_GPIO_Pin_Setup_INPUT+0x1c8>)
 800083c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000840:	4302      	orrs	r2, r0
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	e07a      	b.n	800093c <F1_GPIO_Pin_Setup_INPUT+0x1bc>
	}
	else if(conf == GPIO_INPUT_PD)
 8000846:	797b      	ldrb	r3, [r7, #5]
 8000848:	2b03      	cmp	r3, #3
 800084a:	d177      	bne.n	800093c <F1_GPIO_Pin_Setup_INPUT+0x1bc>
	{
	    _F1_GPIO_Port_Lists[port]->ODR &= ~(1 << pin);		// Set the pin in ODR to enable pull-up
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	4a3e      	ldr	r2, [pc, #248]	; (8000948 <F1_GPIO_Pin_Setup_INPUT+0x1c8>)
 8000850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000854:	68da      	ldr	r2, [r3, #12]
 8000856:	79bb      	ldrb	r3, [r7, #6]
 8000858:	2101      	movs	r1, #1
 800085a:	fa01 f303 	lsl.w	r3, r1, r3
 800085e:	43db      	mvns	r3, r3
 8000860:	4618      	mov	r0, r3
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	4938      	ldr	r1, [pc, #224]	; (8000948 <F1_GPIO_Pin_Setup_INPUT+0x1c8>)
 8000866:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800086a:	4002      	ands	r2, r0
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	e065      	b.n	800093c <F1_GPIO_Pin_Setup_INPUT+0x1bc>
	}
    }
    else
    {
	uint8_t location_mode = ((pin-8)*4);
 8000870:	79bb      	ldrb	r3, [r7, #6]
 8000872:	3b08      	subs	r3, #8
 8000874:	b2db      	uxtb	r3, r3
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	73fb      	strb	r3, [r7, #15]
	uint8_t location_cnf = ((pin-8)*4)+2;
 800087a:	79bb      	ldrb	r3, [r7, #6]
 800087c:	3b08      	subs	r3, #8
 800087e:	b2db      	uxtb	r3, r3
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	b2db      	uxtb	r3, r3
 8000884:	3302      	adds	r3, #2
 8000886:	73bb      	strb	r3, [r7, #14]
	_F1_GPIO_Port_Lists[port]->CRH &= ~(0x3 << location_mode);	// Clear the mode for Input
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	4a2f      	ldr	r2, [pc, #188]	; (8000948 <F1_GPIO_Pin_Setup_INPUT+0x1c8>)
 800088c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000890:	685a      	ldr	r2, [r3, #4]
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	2103      	movs	r1, #3
 8000896:	fa01 f303 	lsl.w	r3, r1, r3
 800089a:	43db      	mvns	r3, r3
 800089c:	4618      	mov	r0, r3
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	4929      	ldr	r1, [pc, #164]	; (8000948 <F1_GPIO_Pin_Setup_INPUT+0x1c8>)
 80008a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008a6:	4002      	ands	r2, r0
 80008a8:	605a      	str	r2, [r3, #4]

	_F1_GPIO_Port_Lists[port]->CRH &= ~(0x3 << location_cnf);
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	4a26      	ldr	r2, [pc, #152]	; (8000948 <F1_GPIO_Pin_Setup_INPUT+0x1c8>)
 80008ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008b2:	685a      	ldr	r2, [r3, #4]
 80008b4:	7bbb      	ldrb	r3, [r7, #14]
 80008b6:	2103      	movs	r1, #3
 80008b8:	fa01 f303 	lsl.w	r3, r1, r3
 80008bc:	43db      	mvns	r3, r3
 80008be:	4618      	mov	r0, r3
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	4921      	ldr	r1, [pc, #132]	; (8000948 <F1_GPIO_Pin_Setup_INPUT+0x1c8>)
 80008c4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008c8:	4002      	ands	r2, r0
 80008ca:	605a      	str	r2, [r3, #4]
	_F1_GPIO_Port_Lists[port]->CRH |= (conf << location_cnf);
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	4a1e      	ldr	r2, [pc, #120]	; (8000948 <F1_GPIO_Pin_Setup_INPUT+0x1c8>)
 80008d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008d4:	685a      	ldr	r2, [r3, #4]
 80008d6:	7979      	ldrb	r1, [r7, #5]
 80008d8:	7bbb      	ldrb	r3, [r7, #14]
 80008da:	fa01 f303 	lsl.w	r3, r1, r3
 80008de:	4618      	mov	r0, r3
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	4919      	ldr	r1, [pc, #100]	; (8000948 <F1_GPIO_Pin_Setup_INPUT+0x1c8>)
 80008e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008e8:	4302      	orrs	r2, r0
 80008ea:	605a      	str	r2, [r3, #4]
	if(conf == GPIO_INPUT_PU)
 80008ec:	797b      	ldrb	r3, [r7, #5]
 80008ee:	2b02      	cmp	r3, #2
 80008f0:	d110      	bne.n	8000914 <F1_GPIO_Pin_Setup_INPUT+0x194>
	{
	    _F1_GPIO_Port_Lists[port]->ODR |= (1 << pin);		// Set the pin in ODR to enable pull-up
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	4a14      	ldr	r2, [pc, #80]	; (8000948 <F1_GPIO_Pin_Setup_INPUT+0x1c8>)
 80008f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008fa:	68da      	ldr	r2, [r3, #12]
 80008fc:	79bb      	ldrb	r3, [r7, #6]
 80008fe:	2101      	movs	r1, #1
 8000900:	fa01 f303 	lsl.w	r3, r1, r3
 8000904:	4618      	mov	r0, r3
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	490f      	ldr	r1, [pc, #60]	; (8000948 <F1_GPIO_Pin_Setup_INPUT+0x1c8>)
 800090a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800090e:	4302      	orrs	r2, r0
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	e013      	b.n	800093c <F1_GPIO_Pin_Setup_INPUT+0x1bc>
	}
	else if(conf == GPIO_INPUT_PD)
 8000914:	797b      	ldrb	r3, [r7, #5]
 8000916:	2b03      	cmp	r3, #3
 8000918:	d110      	bne.n	800093c <F1_GPIO_Pin_Setup_INPUT+0x1bc>
	{
	    _F1_GPIO_Port_Lists[port]->ODR &= ~(1 << pin);		// Set the pin in ODR to enable pull-up
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	4a0a      	ldr	r2, [pc, #40]	; (8000948 <F1_GPIO_Pin_Setup_INPUT+0x1c8>)
 800091e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000922:	68da      	ldr	r2, [r3, #12]
 8000924:	79bb      	ldrb	r3, [r7, #6]
 8000926:	2101      	movs	r1, #1
 8000928:	fa01 f303 	lsl.w	r3, r1, r3
 800092c:	43db      	mvns	r3, r3
 800092e:	4618      	mov	r0, r3
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	4905      	ldr	r1, [pc, #20]	; (8000948 <F1_GPIO_Pin_Setup_INPUT+0x1c8>)
 8000934:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000938:	4002      	ands	r2, r0
 800093a:	60da      	str	r2, [r3, #12]
	}
    }
    return GPIO_OK;
 800093c:	2300      	movs	r3, #0
}
 800093e:	4618      	mov	r0, r3
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000030 	.word	0x20000030

0800094c <F1_GPIO_Pin_Conf_EXTI>:

/*
 * Enable of disable the EXTI
 */
F1_gpio_status_t F1_GPIO_Pin_Conf_EXTI(F1_gpio_port_t port, F1_gpio_pin_t pin, F1_gpio_input_exti_t exti, F1_gpio_input_exti_trig_t edge)
{
 800094c:	b590      	push	{r4, r7, lr}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4604      	mov	r4, r0
 8000954:	4608      	mov	r0, r1
 8000956:	4611      	mov	r1, r2
 8000958:	461a      	mov	r2, r3
 800095a:	4623      	mov	r3, r4
 800095c:	71fb      	strb	r3, [r7, #7]
 800095e:	4603      	mov	r3, r0
 8000960:	71bb      	strb	r3, [r7, #6]
 8000962:	460b      	mov	r3, r1
 8000964:	717b      	strb	r3, [r7, #5]
 8000966:	4613      	mov	r3, r2
 8000968:	713b      	strb	r3, [r7, #4]
    RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;		// Enable the AF clock
 800096a:	4b2b      	ldr	r3, [pc, #172]	; (8000a18 <F1_GPIO_Pin_Conf_EXTI+0xcc>)
 800096c:	699b      	ldr	r3, [r3, #24]
 800096e:	4a2a      	ldr	r2, [pc, #168]	; (8000a18 <F1_GPIO_Pin_Conf_EXTI+0xcc>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6193      	str	r3, [r2, #24]
    AFIO->EXTICR[pin >> 2] |= (port << (pin*4));	// Enable the pin on EXTI0
 8000976:	4a29      	ldr	r2, [pc, #164]	; (8000a1c <F1_GPIO_Pin_Conf_EXTI+0xd0>)
 8000978:	79bb      	ldrb	r3, [r7, #6]
 800097a:	089b      	lsrs	r3, r3, #2
 800097c:	b2db      	uxtb	r3, r3
 800097e:	3302      	adds	r3, #2
 8000980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000984:	79f9      	ldrb	r1, [r7, #7]
 8000986:	79ba      	ldrb	r2, [r7, #6]
 8000988:	0092      	lsls	r2, r2, #2
 800098a:	fa01 f202 	lsl.w	r2, r1, r2
 800098e:	4614      	mov	r4, r2
 8000990:	4922      	ldr	r1, [pc, #136]	; (8000a1c <F1_GPIO_Pin_Conf_EXTI+0xd0>)
 8000992:	79ba      	ldrb	r2, [r7, #6]
 8000994:	0892      	lsrs	r2, r2, #2
 8000996:	b2d2      	uxtb	r2, r2
 8000998:	4610      	mov	r0, r2
 800099a:	ea43 0204 	orr.w	r2, r3, r4
 800099e:	1c83      	adds	r3, r0, #2
 80009a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if(exti == GPIO_INPUT_EXTI_EN)
 80009a4:	797b      	ldrb	r3, [r7, #5]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d124      	bne.n	80009f4 <F1_GPIO_Pin_Conf_EXTI+0xa8>
    {
	EXTI->IMR |= (1 << pin);	// Enable the interrupt on this pin
 80009aa:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <F1_GPIO_Pin_Conf_EXTI+0xd4>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	79ba      	ldrb	r2, [r7, #6]
 80009b0:	2101      	movs	r1, #1
 80009b2:	fa01 f202 	lsl.w	r2, r1, r2
 80009b6:	4611      	mov	r1, r2
 80009b8:	4a19      	ldr	r2, [pc, #100]	; (8000a20 <F1_GPIO_Pin_Conf_EXTI+0xd4>)
 80009ba:	430b      	orrs	r3, r1
 80009bc:	6013      	str	r3, [r2, #0]
	if(edge == GPIO_INPUT_EXTI_TRIG_RISNG)
 80009be:	793b      	ldrb	r3, [r7, #4]
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d10a      	bne.n	80009da <F1_GPIO_Pin_Conf_EXTI+0x8e>
	{
	    EXTI->RTSR |= (1 << pin);
 80009c4:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <F1_GPIO_Pin_Conf_EXTI+0xd4>)
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	79ba      	ldrb	r2, [r7, #6]
 80009ca:	2101      	movs	r1, #1
 80009cc:	fa01 f202 	lsl.w	r2, r1, r2
 80009d0:	4611      	mov	r1, r2
 80009d2:	4a13      	ldr	r2, [pc, #76]	; (8000a20 <F1_GPIO_Pin_Conf_EXTI+0xd4>)
 80009d4:	430b      	orrs	r3, r1
 80009d6:	6093      	str	r3, [r2, #8]
 80009d8:	e00c      	b.n	80009f4 <F1_GPIO_Pin_Conf_EXTI+0xa8>
	}
	else if(edge == GPIO_INPUT_EXTI_TRIG_FALL)
 80009da:	793b      	ldrb	r3, [r7, #4]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d109      	bne.n	80009f4 <F1_GPIO_Pin_Conf_EXTI+0xa8>
	{
	    EXTI->FTSR |= (1 << pin);
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <F1_GPIO_Pin_Conf_EXTI+0xd4>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	79ba      	ldrb	r2, [r7, #6]
 80009e6:	2101      	movs	r1, #1
 80009e8:	fa01 f202 	lsl.w	r2, r1, r2
 80009ec:	4611      	mov	r1, r2
 80009ee:	4a0c      	ldr	r2, [pc, #48]	; (8000a20 <F1_GPIO_Pin_Conf_EXTI+0xd4>)
 80009f0:	430b      	orrs	r3, r1
 80009f2:	60d3      	str	r3, [r2, #12]
	}
    }

    NVIC_EnableIRQ(_F1_Exti_lines[pin]);
 80009f4:	79bb      	ldrb	r3, [r7, #6]
 80009f6:	4a0b      	ldr	r2, [pc, #44]	; (8000a24 <F1_GPIO_Pin_Conf_EXTI+0xd8>)
 80009f8:	56d3      	ldrsb	r3, [r2, r3]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff fdbe 	bl	800057c <__NVIC_EnableIRQ>
    NVIC_SetPriority(_F1_Exti_lines[pin], 2);
 8000a00:	79bb      	ldrb	r3, [r7, #6]
 8000a02:	4a08      	ldr	r2, [pc, #32]	; (8000a24 <F1_GPIO_Pin_Conf_EXTI+0xd8>)
 8000a04:	56d3      	ldrsb	r3, [r2, r3]
 8000a06:	2102      	movs	r1, #2
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff fdd3 	bl	80005b4 <__NVIC_SetPriority>
    return GPIO_OK;
 8000a0e:	2300      	movs	r3, #0
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd90      	pop	{r4, r7, pc}
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	40010000 	.word	0x40010000
 8000a20:	40010400 	.word	0x40010400
 8000a24:	20000044 	.word	0x20000044

08000a28 <F1_GPIO_Clock_Enable>:

/*
 * Enable the clock of the GPIO peripheral
 */
F1_gpio_status_t F1_GPIO_Clock_Enable(F1_gpio_port_t port)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
    switch(port)
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	2b04      	cmp	r3, #4
 8000a36:	d830      	bhi.n	8000a9a <F1_GPIO_Clock_Enable+0x72>
 8000a38:	a201      	add	r2, pc, #4	; (adr r2, 8000a40 <F1_GPIO_Clock_Enable+0x18>)
 8000a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a3e:	bf00      	nop
 8000a40:	08000a55 	.word	0x08000a55
 8000a44:	08000a63 	.word	0x08000a63
 8000a48:	08000a71 	.word	0x08000a71
 8000a4c:	08000a7f 	.word	0x08000a7f
 8000a50:	08000a8d 	.word	0x08000a8d
    {
	case GPIO_PORT_A:
	    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;		// Enable the peripheral clock
 8000a54:	4b15      	ldr	r3, [pc, #84]	; (8000aac <F1_GPIO_Clock_Enable+0x84>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	4a14      	ldr	r2, [pc, #80]	; (8000aac <F1_GPIO_Clock_Enable+0x84>)
 8000a5a:	f043 0304 	orr.w	r3, r3, #4
 8000a5e:	6193      	str	r3, [r2, #24]
	    break;
 8000a60:	e01d      	b.n	8000a9e <F1_GPIO_Clock_Enable+0x76>
	case GPIO_PORT_B:
	    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;		// Enable the peripheral clock
 8000a62:	4b12      	ldr	r3, [pc, #72]	; (8000aac <F1_GPIO_Clock_Enable+0x84>)
 8000a64:	699b      	ldr	r3, [r3, #24]
 8000a66:	4a11      	ldr	r2, [pc, #68]	; (8000aac <F1_GPIO_Clock_Enable+0x84>)
 8000a68:	f043 0308 	orr.w	r3, r3, #8
 8000a6c:	6193      	str	r3, [r2, #24]
	    break;
 8000a6e:	e016      	b.n	8000a9e <F1_GPIO_Clock_Enable+0x76>
	case GPIO_PORT_C:
	    RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;		// Enable the peripheral clock
 8000a70:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <F1_GPIO_Clock_Enable+0x84>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	4a0d      	ldr	r2, [pc, #52]	; (8000aac <F1_GPIO_Clock_Enable+0x84>)
 8000a76:	f043 0310 	orr.w	r3, r3, #16
 8000a7a:	6193      	str	r3, [r2, #24]
	    break;
 8000a7c:	e00f      	b.n	8000a9e <F1_GPIO_Clock_Enable+0x76>
	case GPIO_PORT_D:
	    RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;		// Enable the peripheral clock
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <F1_GPIO_Clock_Enable+0x84>)
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <F1_GPIO_Clock_Enable+0x84>)
 8000a84:	f043 0320 	orr.w	r3, r3, #32
 8000a88:	6193      	str	r3, [r2, #24]
	    break;
 8000a8a:	e008      	b.n	8000a9e <F1_GPIO_Clock_Enable+0x76>
	case GPIO_PORT_E:
	    RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;		// Enable the peripheral clock
 8000a8c:	4b07      	ldr	r3, [pc, #28]	; (8000aac <F1_GPIO_Clock_Enable+0x84>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	4a06      	ldr	r2, [pc, #24]	; (8000aac <F1_GPIO_Clock_Enable+0x84>)
 8000a92:	f043 0320 	orr.w	r3, r3, #32
 8000a96:	6193      	str	r3, [r2, #24]
	    break;
 8000a98:	e001      	b.n	8000a9e <F1_GPIO_Clock_Enable+0x76>
	default:
	    return GPIO_FAIL;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e000      	b.n	8000aa0 <F1_GPIO_Clock_Enable+0x78>
	    break;
    }
    return GPIO_OK;
 8000a9e:	2300      	movs	r3, #0
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	40021000 	.word	0x40021000

08000ab0 <F1_GPIO_Pin_Toggle>:

/*
 * Toggle the GPIO pin
 */
void F1_GPIO_Pin_Toggle(F1_gpio_port_t port, F1_gpio_pin_t pin)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	460a      	mov	r2, r1
 8000aba:	71fb      	strb	r3, [r7, #7]
 8000abc:	4613      	mov	r3, r2
 8000abe:	71bb      	strb	r3, [r7, #6]
    /* Check the status of the pin (high or low) */
    if(_F1_GPIO_Port_Lists[port]->ODR & (1 << pin))
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	4a0e      	ldr	r2, [pc, #56]	; (8000afc <F1_GPIO_Pin_Toggle+0x4c>)
 8000ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac8:	68db      	ldr	r3, [r3, #12]
 8000aca:	79ba      	ldrb	r2, [r7, #6]
 8000acc:	2101      	movs	r1, #1
 8000ace:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d006      	beq.n	8000ae6 <F1_GPIO_Pin_Toggle+0x36>
    {
	/* Pin is high, reset it */
	F1_GPIO_Pin_Reset(port, pin);
 8000ad8:	79ba      	ldrb	r2, [r7, #6]
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	4611      	mov	r1, r2
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 f82e 	bl	8000b40 <F1_GPIO_Pin_Reset>
    else
    {
	/* Pin is low, set it */
	F1_GPIO_Pin_Set(port, pin);
    }
}
 8000ae4:	e005      	b.n	8000af2 <F1_GPIO_Pin_Toggle+0x42>
	F1_GPIO_Pin_Set(port, pin);
 8000ae6:	79ba      	ldrb	r2, [r7, #6]
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	4611      	mov	r1, r2
 8000aec:	4618      	mov	r0, r3
 8000aee:	f000 f807 	bl	8000b00 <F1_GPIO_Pin_Set>
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000030 	.word	0x20000030

08000b00 <F1_GPIO_Pin_Set>:

/*
 * Sets the pin
 */
void F1_GPIO_Pin_Set(F1_gpio_port_t port, F1_gpio_pin_t pin)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	460a      	mov	r2, r1
 8000b0a:	71fb      	strb	r3, [r7, #7]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	71bb      	strb	r3, [r7, #6]
    /* Set the pin to high */
    _F1_GPIO_Port_Lists[port]->BSRR |= (1 << pin);
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <F1_GPIO_Pin_Set+0x3c>)
 8000b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b18:	691a      	ldr	r2, [r3, #16]
 8000b1a:	79bb      	ldrb	r3, [r7, #6]
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b22:	4618      	mov	r0, r3
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	4905      	ldr	r1, [pc, #20]	; (8000b3c <F1_GPIO_Pin_Set+0x3c>)
 8000b28:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b2c:	4302      	orrs	r2, r0
 8000b2e:	611a      	str	r2, [r3, #16]
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20000030 	.word	0x20000030

08000b40 <F1_GPIO_Pin_Reset>:

/*
 * Resets the pin
 */
void F1_GPIO_Pin_Reset(F1_gpio_port_t port, F1_gpio_pin_t pin)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	460a      	mov	r2, r1
 8000b4a:	71fb      	strb	r3, [r7, #7]
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	71bb      	strb	r3, [r7, #6]
    /* Reset the pin to low */
    _F1_GPIO_Port_Lists[port]->BSRR |= (1 << (16+pin));
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <F1_GPIO_Pin_Reset+0x3c>)
 8000b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b58:	691a      	ldr	r2, [r3, #16]
 8000b5a:	79bb      	ldrb	r3, [r7, #6]
 8000b5c:	3310      	adds	r3, #16
 8000b5e:	2101      	movs	r1, #1
 8000b60:	fa01 f303 	lsl.w	r3, r1, r3
 8000b64:	4618      	mov	r0, r3
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	4904      	ldr	r1, [pc, #16]	; (8000b7c <F1_GPIO_Pin_Reset+0x3c>)
 8000b6a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b6e:	4302      	orrs	r2, r0
 8000b70:	611a      	str	r2, [r3, #16]
}
 8000b72:	bf00      	nop
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr
 8000b7c:	20000030 	.word	0x20000030

08000b80 <EXTI0_IRQHandler>:
#include "stm32f1xx.h"
#include "uart.h"
#include "adc.h"

void EXTI0_IRQHandler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
    EXTI->PR |= (1 << myButtonPin);
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <EXTI0_IRQHandler+0x1c>)
 8000b86:	695b      	ldr	r3, [r3, #20]
 8000b88:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <EXTI0_IRQHandler+0x1c>)
 8000b8a:	f043 0301 	orr.w	r3, r3, #1
 8000b8e:	6153      	str	r3, [r2, #20]
    F1_GPIO_Pin_Toggle(GPIO_PORT_C, GPIO_PIN_13);
 8000b90:	210d      	movs	r1, #13
 8000b92:	2002      	movs	r0, #2
 8000b94:	f7ff ff8c 	bl	8000ab0 <F1_GPIO_Pin_Toggle>
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40010400 	.word	0x40010400

08000ba0 <USART3_IRQHandler>:


void USART3_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
    if(USART3->SR &= USART_SR_RXNE)
 8000ba6:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <USART3_IRQHandler+0x30>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a09      	ldr	r2, [pc, #36]	; (8000bd0 <USART3_IRQHandler+0x30>)
 8000bac:	f003 0320 	and.w	r3, r3, #32
 8000bb0:	6013      	str	r3, [r2, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d007      	beq.n	8000bc6 <USART3_IRQHandler+0x26>
    {
	char rec_data = USART3->DR;
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <USART3_IRQHandler+0x30>)
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	71fb      	strb	r3, [r7, #7]
	F1_UART_send_char(UART_3, rec_data);
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	2002      	movs	r0, #2
 8000bc2:	f000 fb9f 	bl	8001304 <F1_UART_send_char>
    }
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40004800 	.word	0x40004800

08000bd4 <ADC1_2_IRQHandler>:

void ADC1_2_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08c      	sub	sp, #48	; 0x30
 8000bd8:	af00      	add	r7, sp, #0
    if((ADC1->CR1 & ADC_CR1_EOCIE) && (ADC1->SR & ADC_SR_EOC))
 8000bda:	4b28      	ldr	r3, [pc, #160]	; (8000c7c <ADC1_2_IRQHandler+0xa8>)
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f003 0320 	and.w	r3, r3, #32
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d020      	beq.n	8000c28 <ADC1_2_IRQHandler+0x54>
 8000be6:	4b25      	ldr	r3, [pc, #148]	; (8000c7c <ADC1_2_IRQHandler+0xa8>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d01a      	beq.n	8000c28 <ADC1_2_IRQHandler+0x54>
    {
	uint16_t adcData = F1_ADC_Get_ADC_Data(ADC_1);
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f7ff fcb0 	bl	8000558 <F1_ADC_Get_ADC_Data>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	85fb      	strh	r3, [r7, #46]	; 0x2e
	char b[20] = {'\0'};
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61bb      	str	r3, [r7, #24]
 8000c00:	f107 031c 	add.w	r3, r7, #28
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
	sprintf(b, "ADC1 Int ==== %d\n\r", adcData);
 8000c0e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000c10:	f107 0318 	add.w	r3, r7, #24
 8000c14:	491a      	ldr	r1, [pc, #104]	; (8000c80 <ADC1_2_IRQHandler+0xac>)
 8000c16:	4618      	mov	r0, r3
 8000c18:	f000 fc02 	bl	8001420 <siprintf>
	F1_UART_send_string(UART_3, b);
 8000c1c:	f107 0318 	add.w	r3, r7, #24
 8000c20:	4619      	mov	r1, r3
 8000c22:	2002      	movs	r0, #2
 8000c24:	f000 fb8e 	bl	8001344 <F1_UART_send_string>
    }

    if((ADC2->CR1 & ADC_CR1_EOCIE) && (ADC2->SR & ADC_SR_EOC))
 8000c28:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <ADC1_2_IRQHandler+0xb0>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f003 0320 	and.w	r3, r3, #32
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d01e      	beq.n	8000c72 <ADC1_2_IRQHandler+0x9e>
 8000c34:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <ADC1_2_IRQHandler+0xb0>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f003 0302 	and.w	r3, r3, #2
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d018      	beq.n	8000c72 <ADC1_2_IRQHandler+0x9e>
    {
	uint16_t adcData = F1_ADC_Get_ADC_Data(ADC_2);
 8000c40:	2001      	movs	r0, #1
 8000c42:	f7ff fc89 	bl	8000558 <F1_ADC_Get_ADC_Data>
 8000c46:	4603      	mov	r3, r0
 8000c48:	85bb      	strh	r3, [r7, #44]	; 0x2c
	char b[20] = {'\0'};
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	f107 0308 	add.w	r3, r7, #8
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
	sprintf(b, "ADC2 Int == %d\n\r", adcData);
 8000c5c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	4909      	ldr	r1, [pc, #36]	; (8000c88 <ADC1_2_IRQHandler+0xb4>)
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 fbdc 	bl	8001420 <siprintf>
	F1_UART_send_string(UART_3, b);
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	2002      	movs	r0, #2
 8000c6e:	f000 fb69 	bl	8001344 <F1_UART_send_string>
    }
}
 8000c72:	bf00      	nop
 8000c74:	3730      	adds	r7, #48	; 0x30
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40012400 	.word	0x40012400
 8000c80:	08001d2c 	.word	0x08001d2c
 8000c84:	40012800 	.word	0x40012800
 8000c88:	08001d40 	.word	0x08001d40

08000c8c <DMA1_Channel1_IRQHandler>:

void DMA1_Channel1_IRQHandler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08c      	sub	sp, #48	; 0x30
 8000c90:	af00      	add	r7, sp, #0
    if(DMA1->ISR & DMA_ISR_TCIF1)
 8000c92:	4b23      	ldr	r3, [pc, #140]	; (8000d20 <DMA1_Channel1_IRQHandler+0x94>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d03c      	beq.n	8000d18 <DMA1_Channel1_IRQHandler+0x8c>
    {
	DMA1_Channel1->CCR &= ~(DMA_CCR_EN);
 8000c9e:	4b21      	ldr	r3, [pc, #132]	; (8000d24 <DMA1_Channel1_IRQHandler+0x98>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a20      	ldr	r2, [pc, #128]	; (8000d24 <DMA1_Channel1_IRQHandler+0x98>)
 8000ca4:	f023 0301 	bic.w	r3, r3, #1
 8000ca8:	6013      	str	r3, [r2, #0]
	DMA1->IFCR |= DMA_IFCR_CGIF1;		// Clear the flag
 8000caa:	4b1d      	ldr	r3, [pc, #116]	; (8000d20 <DMA1_Channel1_IRQHandler+0x94>)
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	4a1c      	ldr	r2, [pc, #112]	; (8000d20 <DMA1_Channel1_IRQHandler+0x94>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6053      	str	r3, [r2, #4]

	uint32_t tot = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(uint16_t i=0; i<MAX_DMA_BUFFER; i++)
 8000cba:	2300      	movs	r3, #0
 8000cbc:	857b      	strh	r3, [r7, #42]	; 0x2a
 8000cbe:	e00a      	b.n	8000cd6 <DMA1_Channel1_IRQHandler+0x4a>
	{
	    tot += dmaBuf[i];
 8000cc0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000cc2:	4a19      	ldr	r2, [pc, #100]	; (8000d28 <DMA1_Channel1_IRQHandler+0x9c>)
 8000cc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ccc:	4413      	add	r3, r2
 8000cce:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(uint16_t i=0; i<MAX_DMA_BUFFER; i++)
 8000cd0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8000cd6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000cd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cdc:	d3f0      	bcc.n	8000cc0 <DMA1_Channel1_IRQHandler+0x34>
	}
	uint32_t avg = tot / MAX_DMA_BUFFER;
 8000cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ce0:	4a12      	ldr	r2, [pc, #72]	; (8000d2c <DMA1_Channel1_IRQHandler+0xa0>)
 8000ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce6:	099b      	lsrs	r3, r3, #6
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
	char buff[30] = {'\0'};
 8000cea:	2300      	movs	r3, #0
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	f107 0308 	add.w	r3, r7, #8
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
 8000cfc:	611a      	str	r2, [r3, #16]
 8000cfe:	615a      	str	r2, [r3, #20]
 8000d00:	831a      	strh	r2, [r3, #24]
	sprintf(buff, "DMA =  %lu \r\n", avg);
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d06:	490a      	ldr	r1, [pc, #40]	; (8000d30 <DMA1_Channel1_IRQHandler+0xa4>)
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f000 fb89 	bl	8001420 <siprintf>
	F1_UART_send_string(UART_3, buff);
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	4619      	mov	r1, r3
 8000d12:	2002      	movs	r0, #2
 8000d14:	f000 fb16 	bl	8001344 <F1_UART_send_string>
    }
}
 8000d18:	bf00      	nop
 8000d1a:	3730      	adds	r7, #48	; 0x30
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40020000 	.word	0x40020000
 8000d24:	40020008 	.word	0x40020008
 8000d28:	200000f0 	.word	0x200000f0
 8000d2c:	10624dd3 	.word	0x10624dd3
 8000d30:	08001d54 	.word	0x08001d54

08000d34 <main>:




int main(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
    F1_System_Init(HSE_72MHZ, SYSTICK_1KHZ);
 8000d38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	f000 f893 	bl	8000e68 <F1_System_Init>
    F1_GPIO_Pin_Setup_OUT(myLEDport, myLEDpin, GPIO_OUTPUT_10MHZ, GPIO_OUTPUT_PP);
 8000d42:	2300      	movs	r3, #0
 8000d44:	2201      	movs	r2, #1
 8000d46:	210d      	movs	r1, #13
 8000d48:	2002      	movs	r0, #2
 8000d4a:	f7ff fc5d 	bl	8000608 <F1_GPIO_Pin_Setup_OUT>
    F1_GPIO_Pin_Setup_INPUT(myButtonPort, myButtonPin, GPIO_INPUT_PU);
 8000d4e:	2202      	movs	r2, #2
 8000d50:	2100      	movs	r1, #0
 8000d52:	2001      	movs	r0, #1
 8000d54:	f7ff fd14 	bl	8000780 <F1_GPIO_Pin_Setup_INPUT>
    F1_GPIO_Pin_Conf_EXTI(myButtonPort, myButtonPin, GPIO_INPUT_EXTI_EN, GPIO_INPUT_EXTI_TRIG_FALL);
 8000d58:	2300      	movs	r3, #0
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	2001      	movs	r0, #1
 8000d60:	f7ff fdf4 	bl	800094c <F1_GPIO_Pin_Conf_EXTI>
    F1_UART_Init(UART_3, UART_BAUD_115200, UART3_TX_PB10_RX_PB11);
 8000d64:	2203      	movs	r2, #3
 8000d66:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000d6a:	2002      	movs	r0, #2
 8000d6c:	f000 f9e0 	bl	8001130 <F1_UART_Init>
    F1_ADC_Initialize(ADC_2);
 8000d70:	2001      	movs	r0, #1
 8000d72:	f7ff fa3d 	bl	80001f0 <F1_ADC_Initialize>
    F1_ADC_Initialize(ADC_1);
 8000d76:	2000      	movs	r0, #0
 8000d78:	f7ff fa3a 	bl	80001f0 <F1_ADC_Initialize>
//    char buff[30] = {'\0'};
//    uint16_t adcDat = 0;

    while(1)
    {
	F1_ADC_Start_DMA_ADC1(ADC_CH_1, dmaBuf, MAX_DMA_BUFFER);
 8000d7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d80:	4907      	ldr	r1, [pc, #28]	; (8000da0 <main+0x6c>)
 8000d82:	2001      	movs	r0, #1
 8000d84:	f7ff fb26 	bl	80003d4 <F1_ADC_Start_DMA_ADC1>
	F1_ADC_Start_Conversion_IT(ADC_2, ADC_CH_2);
 8000d88:	2102      	movs	r1, #2
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	f7ff fa98 	bl	80002c0 <F1_ADC_Start_Conversion_IT>
//	adcDat = F1_ADC_get_Data_Blocking(ADC_2, ADC_CH_1);
//	sprintf(buff, "ADC Pol = %d\n\r", adcDat);
//	F1_UART_send_string(UART_3, buff);
	F1_GPIO_Pin_Toggle(GPIO_PORT_C, GPIO_PIN_13);
 8000d90:	210d      	movs	r1, #13
 8000d92:	2002      	movs	r0, #2
 8000d94:	f7ff fe8c 	bl	8000ab0 <F1_GPIO_Pin_Toggle>
	F1_delay_ms(100);
 8000d98:	2064      	movs	r0, #100	; 0x64
 8000d9a:	f000 f93f 	bl	800101c <F1_delay_ms>
	F1_ADC_Start_DMA_ADC1(ADC_CH_1, dmaBuf, MAX_DMA_BUFFER);
 8000d9e:	e7ed      	b.n	8000d7c <main+0x48>
 8000da0:	200000f0 	.word	0x200000f0

08000da4 <__NVIC_SetPriority>:
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	6039      	str	r1, [r7, #0]
 8000dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	db0a      	blt.n	8000dce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	490c      	ldr	r1, [pc, #48]	; (8000df0 <__NVIC_SetPriority+0x4c>)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	0112      	lsls	r2, r2, #4
 8000dc4:	b2d2      	uxtb	r2, r2
 8000dc6:	440b      	add	r3, r1
 8000dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000dcc:	e00a      	b.n	8000de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4908      	ldr	r1, [pc, #32]	; (8000df4 <__NVIC_SetPriority+0x50>)
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	f003 030f 	and.w	r3, r3, #15
 8000dda:	3b04      	subs	r3, #4
 8000ddc:	0112      	lsls	r2, r2, #4
 8000dde:	b2d2      	uxtb	r2, r2
 8000de0:	440b      	add	r3, r1
 8000de2:	761a      	strb	r2, [r3, #24]
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000e100 	.word	0xe000e100
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e08:	d301      	bcc.n	8000e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e00f      	b.n	8000e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <SysTick_Config+0x40>)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e16:	210f      	movs	r1, #15
 8000e18:	f04f 30ff 	mov.w	r0, #4294967295
 8000e1c:	f7ff ffc2 	bl	8000da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e20:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <SysTick_Config+0x40>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e26:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <SysTick_Config+0x40>)
 8000e28:	2207      	movs	r2, #7
 8000e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	e000e010 	.word	0xe000e010

08000e3c <SysTick_Handler>:

/*
 * ISR for the Systick timer
 */
void SysTick_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
    if(Systic_delay_counter > 0xFFFFFFF0)
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <SysTick_Handler+0x28>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f113 0f10 	cmn.w	r3, #16
 8000e48:	d903      	bls.n	8000e52 <SysTick_Handler+0x16>
    {
	Systic_delay_counter = 0;
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <SysTick_Handler+0x28>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
    }
    else
    {
	Systic_delay_counter += 1;
    }
}
 8000e50:	e004      	b.n	8000e5c <SysTick_Handler+0x20>
	Systic_delay_counter += 1;
 8000e52:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <SysTick_Handler+0x28>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	3301      	adds	r3, #1
 8000e58:	4a02      	ldr	r2, [pc, #8]	; (8000e64 <SysTick_Handler+0x28>)
 8000e5a:	6013      	str	r3, [r2, #0]
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr
 8000e64:	200008c0 	.word	0x200008c0

08000e68 <F1_System_Init>:

/*
 * Initialize the MCU and the RCC
 */
F1_rcc_stat_t F1_System_Init(F1_clock_sel_t clock_freq, F1_systick_sel_t systick_freq)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	6039      	str	r1, [r7, #0]
 8000e72:	71fb      	strb	r3, [r7, #7]
    /* 8MHz internal HSI selected */
    if(clock_freq == HSI_64MHZ)
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d158      	bne.n	8000f2c <F1_System_Init+0xc4>
    {
	rccConfig.clock_freq = 64000000;
 8000e7a:	4b61      	ldr	r3, [pc, #388]	; (8001000 <F1_System_Init+0x198>)
 8000e7c:	4a61      	ldr	r2, [pc, #388]	; (8001004 <F1_System_Init+0x19c>)
 8000e7e:	601a      	str	r2, [r3, #0]
	/* Internal 8MHz clock selected */
	RCC->CR |= RCC_CR_HSION;			//Enable the HSI 8MHz clock
 8000e80:	4b61      	ldr	r3, [pc, #388]	; (8001008 <F1_System_Init+0x1a0>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a60      	ldr	r2, [pc, #384]	; (8001008 <F1_System_Init+0x1a0>)
 8000e86:	f043 0301 	orr.w	r3, r3, #1
 8000e8a:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSIRDY) == 0);		//Wait for the clock to become ready
 8000e8c:	bf00      	nop
 8000e8e:	4b5e      	ldr	r3, [pc, #376]	; (8001008 <F1_System_Init+0x1a0>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d0f9      	beq.n	8000e8e <F1_System_Init+0x26>

	/* Enable the power IF clock */
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000e9a:	4b5b      	ldr	r3, [pc, #364]	; (8001008 <F1_System_Init+0x1a0>)
 8000e9c:	69db      	ldr	r3, [r3, #28]
 8000e9e:	4a5a      	ldr	r2, [pc, #360]	; (8001008 <F1_System_Init+0x1a0>)
 8000ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea4:	61d3      	str	r3, [r2, #28]

	/* Configure the Flash Access Control */
	FLASH->ACR |= FLASH_ACR_PRFTBE;			// Enable the pre-fecth buffer
 8000ea6:	4b59      	ldr	r3, [pc, #356]	; (800100c <F1_System_Init+0x1a4>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a58      	ldr	r2, [pc, #352]	; (800100c <F1_System_Init+0x1a4>)
 8000eac:	f043 0310 	orr.w	r3, r3, #16
 8000eb0:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_1;		// Set the latency to two wait states (required at this frequency)
 8000eb2:	4b56      	ldr	r3, [pc, #344]	; (800100c <F1_System_Init+0x1a4>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a55      	ldr	r2, [pc, #340]	; (800100c <F1_System_Init+0x1a4>)
 8000eb8:	f043 0302 	orr.w	r3, r3, #2
 8000ebc:	6013      	str	r3, [r2, #0]

	/* Configure the PLL */
	RCC->CFGR &= ~(RCC_CFGR_PLLSRC);		// Set the PLL source as the HSI/2
 8000ebe:	4b52      	ldr	r3, [pc, #328]	; (8001008 <F1_System_Init+0x1a0>)
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	4a51      	ldr	r2, [pc, #324]	; (8001008 <F1_System_Init+0x1a0>)
 8000ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ec8:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PPRE1_2;			// Set the APB2 to /2 for a 64MHz/2 (32MHz) clock (36MHz is max)
 8000eca:	4b4f      	ldr	r3, [pc, #316]	; (8001008 <F1_System_Init+0x1a0>)
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	4a4e      	ldr	r2, [pc, #312]	; (8001008 <F1_System_Init+0x1a0>)
 8000ed0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ed4:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLMULL16;
 8000ed6:	4b4c      	ldr	r3, [pc, #304]	; (8001008 <F1_System_Init+0x1a0>)
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	4a4b      	ldr	r2, [pc, #300]	; (8001008 <F1_System_Init+0x1a0>)
 8000edc:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8000ee0:	6053      	str	r3, [r2, #4]
	RCC->CR |= RCC_CR_PLLON;			// Enable the PLL
 8000ee2:	4b49      	ldr	r3, [pc, #292]	; (8001008 <F1_System_Init+0x1a0>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a48      	ldr	r2, [pc, #288]	; (8001008 <F1_System_Init+0x1a0>)
 8000ee8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000eec:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);		// Wait for the PLL to become ready
 8000eee:	bf00      	nop
 8000ef0:	4b45      	ldr	r3, [pc, #276]	; (8001008 <F1_System_Init+0x1a0>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d0f9      	beq.n	8000ef0 <F1_System_Init+0x88>

	/* Set the PLL as the system clock */
	RCC->CFGR |= RCC_CFGR_SW_PLL;			// Set the PLL as the system clock
 8000efc:	4b42      	ldr	r3, [pc, #264]	; (8001008 <F1_System_Init+0x1a0>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	4a41      	ldr	r2, [pc, #260]	; (8001008 <F1_System_Init+0x1a0>)
 8000f02:	f043 0302 	orr.w	r3, r3, #2
 8000f06:	6053      	str	r3, [r2, #4]

	/* Enable the Systick Timer */
	uint32_t systick_clock = 64000000 / systick_freq;
 8000f08:	4a3e      	ldr	r2, [pc, #248]	; (8001004 <F1_System_Init+0x19c>)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f10:	60bb      	str	r3, [r7, #8]
	SysTick_Config(systick_clock);
 8000f12:	68b8      	ldr	r0, [r7, #8]
 8000f14:	f7ff ff70 	bl	8000df8 <SysTick_Config>

	rccConfig.systick_freq = systick_freq;
 8000f18:	4a39      	ldr	r2, [pc, #228]	; (8001000 <F1_System_Init+0x198>)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	6053      	str	r3, [r2, #4]
	rccConfig.APB1_freq = 32000000;
 8000f1e:	4b38      	ldr	r3, [pc, #224]	; (8001000 <F1_System_Init+0x198>)
 8000f20:	4a3b      	ldr	r2, [pc, #236]	; (8001010 <F1_System_Init+0x1a8>)
 8000f22:	609a      	str	r2, [r3, #8]
	rccConfig.APB2_freq = 64000000;
 8000f24:	4b36      	ldr	r3, [pc, #216]	; (8001000 <F1_System_Init+0x198>)
 8000f26:	4a37      	ldr	r2, [pc, #220]	; (8001004 <F1_System_Init+0x19c>)
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	e063      	b.n	8000ff4 <F1_System_Init+0x18c>
    }

    /* HSE selected */
    else if(clock_freq == HSE_72MHZ)
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d15e      	bne.n	8000ff0 <F1_System_Init+0x188>
    {
	/* External 8MHz clock selected */
	rccConfig.clock_freq = 72000000;
 8000f32:	4b33      	ldr	r3, [pc, #204]	; (8001000 <F1_System_Init+0x198>)
 8000f34:	4a37      	ldr	r2, [pc, #220]	; (8001014 <F1_System_Init+0x1ac>)
 8000f36:	601a      	str	r2, [r3, #0]
	/* Internal 8MHz clock selected */
	RCC->CR &= ~(RCC_CR_HSEBYP);			// Crystal mode (bypass is if only the CLKIN pin is used). See page 94 of FRM
 8000f38:	4b33      	ldr	r3, [pc, #204]	; (8001008 <F1_System_Init+0x1a0>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a32      	ldr	r2, [pc, #200]	; (8001008 <F1_System_Init+0x1a0>)
 8000f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f42:	6013      	str	r3, [r2, #0]
	RCC->CR |= RCC_CR_HSEON;			// Enable the HSE
 8000f44:	4b30      	ldr	r3, [pc, #192]	; (8001008 <F1_System_Init+0x1a0>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a2f      	ldr	r2, [pc, #188]	; (8001008 <F1_System_Init+0x1a0>)
 8000f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f4e:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSERDY) == 0);		//Wait for the clock to become ready
 8000f50:	bf00      	nop
 8000f52:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <F1_System_Init+0x1a0>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d0f9      	beq.n	8000f52 <F1_System_Init+0xea>

	/* Enable the power IF clock */
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000f5e:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <F1_System_Init+0x1a0>)
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	4a29      	ldr	r2, [pc, #164]	; (8001008 <F1_System_Init+0x1a0>)
 8000f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f68:	61d3      	str	r3, [r2, #28]

	/* Configure the Flash Access Control */
	FLASH->ACR |= FLASH_ACR_PRFTBE;			// Enable the pre-fecth buffer
 8000f6a:	4b28      	ldr	r3, [pc, #160]	; (800100c <F1_System_Init+0x1a4>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a27      	ldr	r2, [pc, #156]	; (800100c <F1_System_Init+0x1a4>)
 8000f70:	f043 0310 	orr.w	r3, r3, #16
 8000f74:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_1;		// Set the latency to two wait states (required at this frequency)
 8000f76:	4b25      	ldr	r3, [pc, #148]	; (800100c <F1_System_Init+0x1a4>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a24      	ldr	r2, [pc, #144]	; (800100c <F1_System_Init+0x1a4>)
 8000f7c:	f043 0302 	orr.w	r3, r3, #2
 8000f80:	6013      	str	r3, [r2, #0]

	/* Configure the PLL */
	RCC->CFGR |= RCC_CFGR_PLLSRC;			// Set the PLL source as the HSE
 8000f82:	4b21      	ldr	r3, [pc, #132]	; (8001008 <F1_System_Init+0x1a0>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	4a20      	ldr	r2, [pc, #128]	; (8001008 <F1_System_Init+0x1a0>)
 8000f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f8c:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PPRE1_2;			// Set the APB2 to /2 for a 72MHz/2 (36MHz) clock (36MHz is max)
 8000f8e:	4b1e      	ldr	r3, [pc, #120]	; (8001008 <F1_System_Init+0x1a0>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	4a1d      	ldr	r2, [pc, #116]	; (8001008 <F1_System_Init+0x1a0>)
 8000f94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f98:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLMULL9;
 8000f9a:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <F1_System_Init+0x1a0>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	4a1a      	ldr	r2, [pc, #104]	; (8001008 <F1_System_Init+0x1a0>)
 8000fa0:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8000fa4:	6053      	str	r3, [r2, #4]
	RCC->CR |= RCC_CR_PLLON;			// Enable the PLL
 8000fa6:	4b18      	ldr	r3, [pc, #96]	; (8001008 <F1_System_Init+0x1a0>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a17      	ldr	r2, [pc, #92]	; (8001008 <F1_System_Init+0x1a0>)
 8000fac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fb0:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);		// Wait for the PLL to become ready
 8000fb2:	bf00      	nop
 8000fb4:	4b14      	ldr	r3, [pc, #80]	; (8001008 <F1_System_Init+0x1a0>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d0f9      	beq.n	8000fb4 <F1_System_Init+0x14c>

	/* Set the PLL as the system clock */
	RCC->CFGR |= RCC_CFGR_SW_PLL;			// Set the PLL as the system clock
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <F1_System_Init+0x1a0>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	4a10      	ldr	r2, [pc, #64]	; (8001008 <F1_System_Init+0x1a0>)
 8000fc6:	f043 0302 	orr.w	r3, r3, #2
 8000fca:	6053      	str	r3, [r2, #4]

	/* Enable the Systick Timer */
	uint32_t systick_clock = 72000000 / systick_freq;
 8000fcc:	4a11      	ldr	r2, [pc, #68]	; (8001014 <F1_System_Init+0x1ac>)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd4:	60fb      	str	r3, [r7, #12]
	SysTick_Config(systick_clock);
 8000fd6:	68f8      	ldr	r0, [r7, #12]
 8000fd8:	f7ff ff0e 	bl	8000df8 <SysTick_Config>

	rccConfig.systick_freq = systick_freq;
 8000fdc:	4a08      	ldr	r2, [pc, #32]	; (8001000 <F1_System_Init+0x198>)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	6053      	str	r3, [r2, #4]
	rccConfig.APB1_freq = 36000000;
 8000fe2:	4b07      	ldr	r3, [pc, #28]	; (8001000 <F1_System_Init+0x198>)
 8000fe4:	4a0c      	ldr	r2, [pc, #48]	; (8001018 <F1_System_Init+0x1b0>)
 8000fe6:	609a      	str	r2, [r3, #8]
	rccConfig.APB2_freq = 72000000;
 8000fe8:	4b05      	ldr	r3, [pc, #20]	; (8001000 <F1_System_Init+0x198>)
 8000fea:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <F1_System_Init+0x1ac>)
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	e001      	b.n	8000ff4 <F1_System_Init+0x18c>
    }
    else
    {
	/* Not a valid clock frequency */
	return RCC_FAIL;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e000      	b.n	8000ff6 <F1_System_Init+0x18e>
    }
    return RCC_OK;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3710      	adds	r7, #16
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000054 	.word	0x20000054
 8001004:	03d09000 	.word	0x03d09000
 8001008:	40021000 	.word	0x40021000
 800100c:	40022000 	.word	0x40022000
 8001010:	01e84800 	.word	0x01e84800
 8001014:	044aa200 	.word	0x044aa200
 8001018:	02255100 	.word	0x02255100

0800101c <F1_delay_ms>:

/*
 * Delay in milliseconds
 */
void F1_delay_ms(uint16_t ms)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	80fb      	strh	r3, [r7, #6]
    uint32_t counts_needed = (ms * rccConfig.systick_freq)/1000;
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	4a0b      	ldr	r2, [pc, #44]	; (8001058 <F1_delay_ms+0x3c>)
 800102a:	6852      	ldr	r2, [r2, #4]
 800102c:	fb02 f303 	mul.w	r3, r2, r3
 8001030:	4a0a      	ldr	r2, [pc, #40]	; (800105c <F1_delay_ms+0x40>)
 8001032:	fba2 2303 	umull	r2, r3, r2, r3
 8001036:	099b      	lsrs	r3, r3, #6
 8001038:	60fb      	str	r3, [r7, #12]
    Systic_delay_counter = 0;
 800103a:	4b09      	ldr	r3, [pc, #36]	; (8001060 <F1_delay_ms+0x44>)
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
    while(Systic_delay_counter < counts_needed);
 8001040:	bf00      	nop
 8001042:	4b07      	ldr	r3, [pc, #28]	; (8001060 <F1_delay_ms+0x44>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	429a      	cmp	r2, r3
 800104a:	d8fa      	bhi.n	8001042 <F1_delay_ms+0x26>
}
 800104c:	bf00      	nop
 800104e:	bf00      	nop
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr
 8001058:	20000054 	.word	0x20000054
 800105c:	10624dd3 	.word	0x10624dd3
 8001060:	200008c0 	.word	0x200008c0

08001064 <F1_RCC_get_APB2_clock>:

/*
 * Return the clock of APB2
 */
uint32_t F1_RCC_get_APB2_clock(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
    return rccConfig.APB2_freq;
 8001068:	4b02      	ldr	r3, [pc, #8]	; (8001074 <F1_RCC_get_APB2_clock+0x10>)
 800106a:	68db      	ldr	r3, [r3, #12]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr
 8001074:	20000054 	.word	0x20000054

08001078 <F1_RCC_get_APB1_clock>:

/*
 * Return the clock of APB1
 */
uint32_t F1_RCC_get_APB1_clock(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
    return rccConfig.APB1_freq;
 800107c:	4b02      	ldr	r3, [pc, #8]	; (8001088 <F1_RCC_get_APB1_clock+0x10>)
 800107e:	689b      	ldr	r3, [r3, #8]
}
 8001080:	4618      	mov	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr
 8001088:	20000054 	.word	0x20000054

0800108c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001094:	4a14      	ldr	r2, [pc, #80]	; (80010e8 <_sbrk+0x5c>)
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <_sbrk+0x60>)
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a0:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <_sbrk+0x64>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d102      	bne.n	80010ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <_sbrk+0x64>)
 80010aa:	4a12      	ldr	r2, [pc, #72]	; (80010f4 <_sbrk+0x68>)
 80010ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ae:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <_sbrk+0x64>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4413      	add	r3, r2
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d207      	bcs.n	80010cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010bc:	f000 f986 	bl	80013cc <__errno>
 80010c0:	4603      	mov	r3, r0
 80010c2:	220c      	movs	r2, #12
 80010c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ca:	e009      	b.n	80010e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010cc:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <_sbrk+0x64>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010d2:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <_sbrk+0x64>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	4a05      	ldr	r2, [pc, #20]	; (80010f0 <_sbrk+0x64>)
 80010dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010de:	68fb      	ldr	r3, [r7, #12]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20005000 	.word	0x20005000
 80010ec:	00000400 	.word	0x00000400
 80010f0:	200008c4 	.word	0x200008c4
 80010f4:	200008d8 	.word	0x200008d8

080010f8 <__NVIC_EnableIRQ>:
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	2b00      	cmp	r3, #0
 8001108:	db0b      	blt.n	8001122 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	f003 021f 	and.w	r2, r3, #31
 8001110:	4906      	ldr	r1, [pc, #24]	; (800112c <__NVIC_EnableIRQ+0x34>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	095b      	lsrs	r3, r3, #5
 8001118:	2001      	movs	r0, #1
 800111a:	fa00 f202 	lsl.w	r2, r0, r2
 800111e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr
 800112c:	e000e100 	.word	0xe000e100

08001130 <F1_UART_Init>:

/*
 * Initializes the UART for the selected option
 */
F1_uart_stat_t F1_UART_Init(F1_uart_number_t uart, F1_uart_baud_t bd, F1_uart_pin_map_t pinmap)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	6039      	str	r1, [r7, #0]
 800113a:	71fb      	strb	r3, [r7, #7]
 800113c:	4613      	mov	r3, r2
 800113e:	71bb      	strb	r3, [r7, #6]
    /* Map the pins */
    switch(pinmap)
 8001140:	79bb      	ldrb	r3, [r7, #6]
 8001142:	2b03      	cmp	r3, #3
 8001144:	d840      	bhi.n	80011c8 <F1_UART_Init+0x98>
 8001146:	a201      	add	r2, pc, #4	; (adr r2, 800114c <F1_UART_Init+0x1c>)
 8001148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800114c:	0800115d 	.word	0x0800115d
 8001150:	08001175 	.word	0x08001175
 8001154:	08001199 	.word	0x08001199
 8001158:	080011b1 	.word	0x080011b1
    {
	case UART1_TX_PA9_RX_PA10:
	    F1_GPIO_Pin_Setup_OUT(GPIO_PORT_A, GPIO_PIN_9, GPIO_OUTPUT_2MHZ, GPIO_OUTPUT_AF_PP);	// Set the Tx pin as Push-Pull output
 800115c:	2302      	movs	r3, #2
 800115e:	2202      	movs	r2, #2
 8001160:	2109      	movs	r1, #9
 8001162:	2000      	movs	r0, #0
 8001164:	f7ff fa50 	bl	8000608 <F1_GPIO_Pin_Setup_OUT>
	    F1_GPIO_Pin_Setup_INPUT(GPIO_PORT_A, GPIO_PIN_10, GPIO_INPUT_FLOAT);	    		// Set the Rx pin sa Input floating
 8001168:	2201      	movs	r2, #1
 800116a:	210a      	movs	r1, #10
 800116c:	2000      	movs	r0, #0
 800116e:	f7ff fb07 	bl	8000780 <F1_GPIO_Pin_Setup_INPUT>
	    break;
 8001172:	e02b      	b.n	80011cc <F1_UART_Init+0x9c>

	case UART1_TX_PB6_RX_PB7:
	    F1_GPIO_Pin_Setup_OUT(GPIO_PORT_B, GPIO_PIN_6, GPIO_OUTPUT_2MHZ, GPIO_OUTPUT_AF_PP);	// Set the Tx pin as Push-Pull output
 8001174:	2302      	movs	r3, #2
 8001176:	2202      	movs	r2, #2
 8001178:	2106      	movs	r1, #6
 800117a:	2001      	movs	r0, #1
 800117c:	f7ff fa44 	bl	8000608 <F1_GPIO_Pin_Setup_OUT>
	    F1_GPIO_Pin_Setup_INPUT(GPIO_PORT_B, GPIO_PIN_7, GPIO_INPUT_FLOAT);	    			// Set the Rx pin sa Input floating
 8001180:	2201      	movs	r2, #1
 8001182:	2107      	movs	r1, #7
 8001184:	2001      	movs	r0, #1
 8001186:	f7ff fafb 	bl	8000780 <F1_GPIO_Pin_Setup_INPUT>
	    AFIO->MAPR |= AFIO_MAPR_USART1_REMAP;							// Re-map the UART pins
 800118a:	4b5b      	ldr	r3, [pc, #364]	; (80012f8 <F1_UART_Init+0x1c8>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	4a5a      	ldr	r2, [pc, #360]	; (80012f8 <F1_UART_Init+0x1c8>)
 8001190:	f043 0304 	orr.w	r3, r3, #4
 8001194:	6053      	str	r3, [r2, #4]
	    break;
 8001196:	e019      	b.n	80011cc <F1_UART_Init+0x9c>

	case UART2_TX_PA2_RX_PA3:
	    F1_GPIO_Pin_Setup_OUT(GPIO_PORT_A, GPIO_PIN_2, GPIO_OUTPUT_2MHZ, GPIO_OUTPUT_AF_PP);	// Set the Tx pin as Push-Pull output
 8001198:	2302      	movs	r3, #2
 800119a:	2202      	movs	r2, #2
 800119c:	2102      	movs	r1, #2
 800119e:	2000      	movs	r0, #0
 80011a0:	f7ff fa32 	bl	8000608 <F1_GPIO_Pin_Setup_OUT>
	    F1_GPIO_Pin_Setup_INPUT(GPIO_PORT_A, GPIO_PIN_3, GPIO_INPUT_FLOAT);	    			// Set the Rx pin sa Input floating
 80011a4:	2201      	movs	r2, #1
 80011a6:	2103      	movs	r1, #3
 80011a8:	2000      	movs	r0, #0
 80011aa:	f7ff fae9 	bl	8000780 <F1_GPIO_Pin_Setup_INPUT>
	    break;
 80011ae:	e00d      	b.n	80011cc <F1_UART_Init+0x9c>

	case UART3_TX_PB10_RX_PB11:
	    F1_GPIO_Pin_Setup_OUT(GPIO_PORT_B, GPIO_PIN_10, GPIO_OUTPUT_2MHZ, GPIO_OUTPUT_AF_PP);	// Set the Tx pin as Push-Pull output
 80011b0:	2302      	movs	r3, #2
 80011b2:	2202      	movs	r2, #2
 80011b4:	210a      	movs	r1, #10
 80011b6:	2001      	movs	r0, #1
 80011b8:	f7ff fa26 	bl	8000608 <F1_GPIO_Pin_Setup_OUT>
	    F1_GPIO_Pin_Setup_INPUT(GPIO_PORT_B, GPIO_PIN_11, GPIO_INPUT_FLOAT);	    			// Set the Rx pin sa Input floating
 80011bc:	2201      	movs	r2, #1
 80011be:	210b      	movs	r1, #11
 80011c0:	2001      	movs	r0, #1
 80011c2:	f7ff fadd 	bl	8000780 <F1_GPIO_Pin_Setup_INPUT>
	    break;
 80011c6:	e001      	b.n	80011cc <F1_UART_Init+0x9c>

	default:
	    return UART_FAIL;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e090      	b.n	80012ee <F1_UART_Init+0x1be>
	    break;
    }

    if(uart == UART_1)
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d106      	bne.n	80011e0 <F1_UART_Init+0xb0>
    {
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;		// Enable the UART1 clock
 80011d2:	4b4a      	ldr	r3, [pc, #296]	; (80012fc <F1_UART_Init+0x1cc>)
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	4a49      	ldr	r2, [pc, #292]	; (80012fc <F1_UART_Init+0x1cc>)
 80011d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011dc:	6193      	str	r3, [r2, #24]
 80011de:	e015      	b.n	800120c <F1_UART_Init+0xdc>
    }
    else if(uart == UART_2)
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d106      	bne.n	80011f4 <F1_UART_Init+0xc4>
    {
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;		// Enable the UART2 clock
 80011e6:	4b45      	ldr	r3, [pc, #276]	; (80012fc <F1_UART_Init+0x1cc>)
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	4a44      	ldr	r2, [pc, #272]	; (80012fc <F1_UART_Init+0x1cc>)
 80011ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f0:	61d3      	str	r3, [r2, #28]
 80011f2:	e00b      	b.n	800120c <F1_UART_Init+0xdc>
    }
    else if(uart == UART_3)
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d106      	bne.n	8001208 <F1_UART_Init+0xd8>
    {
	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;		// Enable the UART3 clock
 80011fa:	4b40      	ldr	r3, [pc, #256]	; (80012fc <F1_UART_Init+0x1cc>)
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	4a3f      	ldr	r2, [pc, #252]	; (80012fc <F1_UART_Init+0x1cc>)
 8001200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001204:	61d3      	str	r3, [r2, #28]
 8001206:	e001      	b.n	800120c <F1_UART_Init+0xdc>
    }
    else
    {
	return UART_FAIL;
 8001208:	2301      	movs	r3, #1
 800120a:	e070      	b.n	80012ee <F1_UART_Init+0x1be>
    }

    /* 1 Start bit, 8 Data bits, n Stop bit */
    _F1_uart_list[uart]->CR1 &= ~(USART_CR1_M);
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	4a3c      	ldr	r2, [pc, #240]	; (8001300 <F1_UART_Init+0x1d0>)
 8001210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001214:	68da      	ldr	r2, [r3, #12]
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	4939      	ldr	r1, [pc, #228]	; (8001300 <F1_UART_Init+0x1d0>)
 800121a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800121e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001222:	60da      	str	r2, [r3, #12]

    if(uart == UART_1)
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d10e      	bne.n	8001248 <F1_UART_Init+0x118>
    {
	/*
	 * Calculate the Baud Rate:
	 * UART1 gets it clock from APB2
	 */
	uint32_t sysClock = F1_RCC_get_APB2_clock();
 800122a:	f7ff ff1b 	bl	8001064 <F1_RCC_get_APB2_clock>
 800122e:	60f8      	str	r0, [r7, #12]
	uint16_t baudVal = (uint16_t)(sysClock/bd);
 8001230:	68fa      	ldr	r2, [r7, #12]
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	fbb2 f3f3 	udiv	r3, r2, r3
 8001238:	817b      	strh	r3, [r7, #10]
	_F1_uart_list[uart]->BRR = baudVal;
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	4a30      	ldr	r2, [pc, #192]	; (8001300 <F1_UART_Init+0x1d0>)
 800123e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001242:	897a      	ldrh	r2, [r7, #10]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	e00d      	b.n	8001264 <F1_UART_Init+0x134>
    {
	/*
	 * Calculate the baud rate:
	 * UART2 and 3 get their clock from APB1
	 */
	uint32_t sysClock = F1_RCC_get_APB1_clock();
 8001248:	f7ff ff16 	bl	8001078 <F1_RCC_get_APB1_clock>
 800124c:	6178      	str	r0, [r7, #20]
	uint16_t baudVal = (uint16_t)(sysClock/bd);
 800124e:	697a      	ldr	r2, [r7, #20]
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	fbb2 f3f3 	udiv	r3, r2, r3
 8001256:	827b      	strh	r3, [r7, #18]
	_F1_uart_list[uart]->BRR = baudVal;
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	4a29      	ldr	r2, [pc, #164]	; (8001300 <F1_UART_Init+0x1d0>)
 800125c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001260:	8a7a      	ldrh	r2, [r7, #18]
 8001262:	609a      	str	r2, [r3, #8]
    }

    /* Set the TE (Transmission Enable) bit */
    _F1_uart_list[uart]->CR1 |= USART_CR1_TE;
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	4a26      	ldr	r2, [pc, #152]	; (8001300 <F1_UART_Init+0x1d0>)
 8001268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800126c:	68da      	ldr	r2, [r3, #12]
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	4923      	ldr	r1, [pc, #140]	; (8001300 <F1_UART_Init+0x1d0>)
 8001272:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001276:	f042 0208 	orr.w	r2, r2, #8
 800127a:	60da      	str	r2, [r3, #12]

    /* Enable the receiver RE */
    _F1_uart_list[uart]->CR1 |= USART_CR1_RE;
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	4a20      	ldr	r2, [pc, #128]	; (8001300 <F1_UART_Init+0x1d0>)
 8001280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001284:	68da      	ldr	r2, [r3, #12]
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	491d      	ldr	r1, [pc, #116]	; (8001300 <F1_UART_Init+0x1d0>)
 800128a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800128e:	f042 0204 	orr.w	r2, r2, #4
 8001292:	60da      	str	r2, [r3, #12]

    /* Enable the UART */
    _F1_uart_list[uart]->CR1 |= USART_CR1_UE;
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	4a1a      	ldr	r2, [pc, #104]	; (8001300 <F1_UART_Init+0x1d0>)
 8001298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129c:	68da      	ldr	r2, [r3, #12]
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	4917      	ldr	r1, [pc, #92]	; (8001300 <F1_UART_Init+0x1d0>)
 80012a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80012aa:	60da      	str	r2, [r3, #12]

    /* Enable the receive interrupt */
    _F1_uart_list[uart]->CR1 |= USART_CR1_RXNEIE;
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	4a14      	ldr	r2, [pc, #80]	; (8001300 <F1_UART_Init+0x1d0>)
 80012b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b4:	68da      	ldr	r2, [r3, #12]
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	4911      	ldr	r1, [pc, #68]	; (8001300 <F1_UART_Init+0x1d0>)
 80012ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012be:	f042 0220 	orr.w	r2, r2, #32
 80012c2:	60da      	str	r2, [r3, #12]
    if(uart == UART_1){NVIC_EnableIRQ(USART1_IRQn);}
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d103      	bne.n	80012d2 <F1_UART_Init+0x1a2>
 80012ca:	2025      	movs	r0, #37	; 0x25
 80012cc:	f7ff ff14 	bl	80010f8 <__NVIC_EnableIRQ>
 80012d0:	e00c      	b.n	80012ec <F1_UART_Init+0x1bc>
    else if(uart == UART_2){NVIC_EnableIRQ(USART2_IRQn);}
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d103      	bne.n	80012e0 <F1_UART_Init+0x1b0>
 80012d8:	2026      	movs	r0, #38	; 0x26
 80012da:	f7ff ff0d 	bl	80010f8 <__NVIC_EnableIRQ>
 80012de:	e005      	b.n	80012ec <F1_UART_Init+0x1bc>
    else if(uart == UART_3){NVIC_EnableIRQ(USART3_IRQn);}
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d102      	bne.n	80012ec <F1_UART_Init+0x1bc>
 80012e6:	2027      	movs	r0, #39	; 0x27
 80012e8:	f7ff ff06 	bl	80010f8 <__NVIC_EnableIRQ>

    return UART_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40010000 	.word	0x40010000
 80012fc:	40021000 	.word	0x40021000
 8001300:	20000064 	.word	0x20000064

08001304 <F1_UART_send_char>:

/*
 * Send a single character
 */
void F1_UART_send_char(F1_uart_number_t uart, char c)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	460a      	mov	r2, r1
 800130e:	71fb      	strb	r3, [r7, #7]
 8001310:	4613      	mov	r3, r2
 8001312:	71bb      	strb	r3, [r7, #6]
    /* Load the data */
    _F1_uart_list[uart]->DR = c;
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <F1_UART_send_char+0x3c>)
 8001318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131c:	79ba      	ldrb	r2, [r7, #6]
 800131e:	605a      	str	r2, [r3, #4]

    /* Wait for the transmission to complete */
    while((_F1_uart_list[uart]->SR & USART_SR_TC) == 0);
 8001320:	bf00      	nop
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	4a06      	ldr	r2, [pc, #24]	; (8001340 <F1_UART_send_char+0x3c>)
 8001326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0f6      	beq.n	8001322 <F1_UART_send_char+0x1e>
}
 8001334:	bf00      	nop
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr
 8001340:	20000064 	.word	0x20000064

08001344 <F1_UART_send_string>:

/*
 * Send a string via UART
 */
void F1_UART_send_string(F1_uart_number_t uart, char* str)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	6039      	str	r1, [r7, #0]
 800134e:	71fb      	strb	r3, [r7, #7]
    while(*str != '\0')
 8001350:	e009      	b.n	8001366 <F1_UART_send_string+0x22>
    {
	F1_UART_send_char(uart, *str);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	781a      	ldrb	r2, [r3, #0]
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	4611      	mov	r1, r2
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff ffd2 	bl	8001304 <F1_UART_send_char>
	str++;
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	3301      	adds	r3, #1
 8001364:	603b      	str	r3, [r7, #0]
    while(*str != '\0')
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1f1      	bne.n	8001352 <F1_UART_send_string+0xe>
    }
}
 800136e:	bf00      	nop
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001378:	480d      	ldr	r0, [pc, #52]	; (80013b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800137a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800137c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001380:	480c      	ldr	r0, [pc, #48]	; (80013b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001382:	490d      	ldr	r1, [pc, #52]	; (80013b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001384:	4a0d      	ldr	r2, [pc, #52]	; (80013bc <LoopForever+0xe>)
  movs r3, #0
 8001386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001388:	e002      	b.n	8001390 <LoopCopyDataInit>

0800138a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800138a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800138c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138e:	3304      	adds	r3, #4

08001390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001394:	d3f9      	bcc.n	800138a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001396:	4a0a      	ldr	r2, [pc, #40]	; (80013c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001398:	4c0a      	ldr	r4, [pc, #40]	; (80013c4 <LoopForever+0x16>)
  movs r3, #0
 800139a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800139c:	e001      	b.n	80013a2 <LoopFillZerobss>

0800139e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a0:	3204      	adds	r2, #4

080013a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a4:	d3fb      	bcc.n	800139e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013a6:	f000 f817 	bl	80013d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013aa:	f7ff fcc3 	bl	8000d34 <main>

080013ae <LoopForever>:

LoopForever:
  b LoopForever
 80013ae:	e7fe      	b.n	80013ae <LoopForever>
  ldr   r0, =_estack
 80013b0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80013b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b8:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 80013bc:	08001da0 	.word	0x08001da0
  ldr r2, =_sbss
 80013c0:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 80013c4:	200008d8 	.word	0x200008d8

080013c8 <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013c8:	e7fe      	b.n	80013c8 <ADC3_IRQHandler>
	...

080013cc <__errno>:
 80013cc:	4b01      	ldr	r3, [pc, #4]	; (80013d4 <__errno+0x8>)
 80013ce:	6818      	ldr	r0, [r3, #0]
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	20000070 	.word	0x20000070

080013d8 <__libc_init_array>:
 80013d8:	b570      	push	{r4, r5, r6, lr}
 80013da:	2600      	movs	r6, #0
 80013dc:	4d0c      	ldr	r5, [pc, #48]	; (8001410 <__libc_init_array+0x38>)
 80013de:	4c0d      	ldr	r4, [pc, #52]	; (8001414 <__libc_init_array+0x3c>)
 80013e0:	1b64      	subs	r4, r4, r5
 80013e2:	10a4      	asrs	r4, r4, #2
 80013e4:	42a6      	cmp	r6, r4
 80013e6:	d109      	bne.n	80013fc <__libc_init_array+0x24>
 80013e8:	f000 fc94 	bl	8001d14 <_init>
 80013ec:	2600      	movs	r6, #0
 80013ee:	4d0a      	ldr	r5, [pc, #40]	; (8001418 <__libc_init_array+0x40>)
 80013f0:	4c0a      	ldr	r4, [pc, #40]	; (800141c <__libc_init_array+0x44>)
 80013f2:	1b64      	subs	r4, r4, r5
 80013f4:	10a4      	asrs	r4, r4, #2
 80013f6:	42a6      	cmp	r6, r4
 80013f8:	d105      	bne.n	8001406 <__libc_init_array+0x2e>
 80013fa:	bd70      	pop	{r4, r5, r6, pc}
 80013fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001400:	4798      	blx	r3
 8001402:	3601      	adds	r6, #1
 8001404:	e7ee      	b.n	80013e4 <__libc_init_array+0xc>
 8001406:	f855 3b04 	ldr.w	r3, [r5], #4
 800140a:	4798      	blx	r3
 800140c:	3601      	adds	r6, #1
 800140e:	e7f2      	b.n	80013f6 <__libc_init_array+0x1e>
 8001410:	08001d98 	.word	0x08001d98
 8001414:	08001d98 	.word	0x08001d98
 8001418:	08001d98 	.word	0x08001d98
 800141c:	08001d9c 	.word	0x08001d9c

08001420 <siprintf>:
 8001420:	b40e      	push	{r1, r2, r3}
 8001422:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001426:	b500      	push	{lr}
 8001428:	b09c      	sub	sp, #112	; 0x70
 800142a:	ab1d      	add	r3, sp, #116	; 0x74
 800142c:	9002      	str	r0, [sp, #8]
 800142e:	9006      	str	r0, [sp, #24]
 8001430:	9107      	str	r1, [sp, #28]
 8001432:	9104      	str	r1, [sp, #16]
 8001434:	4808      	ldr	r0, [pc, #32]	; (8001458 <siprintf+0x38>)
 8001436:	4909      	ldr	r1, [pc, #36]	; (800145c <siprintf+0x3c>)
 8001438:	f853 2b04 	ldr.w	r2, [r3], #4
 800143c:	9105      	str	r1, [sp, #20]
 800143e:	6800      	ldr	r0, [r0, #0]
 8001440:	a902      	add	r1, sp, #8
 8001442:	9301      	str	r3, [sp, #4]
 8001444:	f000 f868 	bl	8001518 <_svfiprintf_r>
 8001448:	2200      	movs	r2, #0
 800144a:	9b02      	ldr	r3, [sp, #8]
 800144c:	701a      	strb	r2, [r3, #0]
 800144e:	b01c      	add	sp, #112	; 0x70
 8001450:	f85d eb04 	ldr.w	lr, [sp], #4
 8001454:	b003      	add	sp, #12
 8001456:	4770      	bx	lr
 8001458:	20000070 	.word	0x20000070
 800145c:	ffff0208 	.word	0xffff0208

08001460 <__ssputs_r>:
 8001460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001464:	688e      	ldr	r6, [r1, #8]
 8001466:	4682      	mov	sl, r0
 8001468:	429e      	cmp	r6, r3
 800146a:	460c      	mov	r4, r1
 800146c:	4690      	mov	r8, r2
 800146e:	461f      	mov	r7, r3
 8001470:	d838      	bhi.n	80014e4 <__ssputs_r+0x84>
 8001472:	898a      	ldrh	r2, [r1, #12]
 8001474:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001478:	d032      	beq.n	80014e0 <__ssputs_r+0x80>
 800147a:	6825      	ldr	r5, [r4, #0]
 800147c:	6909      	ldr	r1, [r1, #16]
 800147e:	3301      	adds	r3, #1
 8001480:	eba5 0901 	sub.w	r9, r5, r1
 8001484:	6965      	ldr	r5, [r4, #20]
 8001486:	444b      	add	r3, r9
 8001488:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800148c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001490:	106d      	asrs	r5, r5, #1
 8001492:	429d      	cmp	r5, r3
 8001494:	bf38      	it	cc
 8001496:	461d      	movcc	r5, r3
 8001498:	0553      	lsls	r3, r2, #21
 800149a:	d531      	bpl.n	8001500 <__ssputs_r+0xa0>
 800149c:	4629      	mov	r1, r5
 800149e:	f000 fb6f 	bl	8001b80 <_malloc_r>
 80014a2:	4606      	mov	r6, r0
 80014a4:	b950      	cbnz	r0, 80014bc <__ssputs_r+0x5c>
 80014a6:	230c      	movs	r3, #12
 80014a8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ac:	f8ca 3000 	str.w	r3, [sl]
 80014b0:	89a3      	ldrh	r3, [r4, #12]
 80014b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014b6:	81a3      	strh	r3, [r4, #12]
 80014b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014bc:	464a      	mov	r2, r9
 80014be:	6921      	ldr	r1, [r4, #16]
 80014c0:	f000 face 	bl	8001a60 <memcpy>
 80014c4:	89a3      	ldrh	r3, [r4, #12]
 80014c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80014ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014ce:	81a3      	strh	r3, [r4, #12]
 80014d0:	6126      	str	r6, [r4, #16]
 80014d2:	444e      	add	r6, r9
 80014d4:	6026      	str	r6, [r4, #0]
 80014d6:	463e      	mov	r6, r7
 80014d8:	6165      	str	r5, [r4, #20]
 80014da:	eba5 0509 	sub.w	r5, r5, r9
 80014de:	60a5      	str	r5, [r4, #8]
 80014e0:	42be      	cmp	r6, r7
 80014e2:	d900      	bls.n	80014e6 <__ssputs_r+0x86>
 80014e4:	463e      	mov	r6, r7
 80014e6:	4632      	mov	r2, r6
 80014e8:	4641      	mov	r1, r8
 80014ea:	6820      	ldr	r0, [r4, #0]
 80014ec:	f000 fac6 	bl	8001a7c <memmove>
 80014f0:	68a3      	ldr	r3, [r4, #8]
 80014f2:	2000      	movs	r0, #0
 80014f4:	1b9b      	subs	r3, r3, r6
 80014f6:	60a3      	str	r3, [r4, #8]
 80014f8:	6823      	ldr	r3, [r4, #0]
 80014fa:	4433      	add	r3, r6
 80014fc:	6023      	str	r3, [r4, #0]
 80014fe:	e7db      	b.n	80014b8 <__ssputs_r+0x58>
 8001500:	462a      	mov	r2, r5
 8001502:	f000 fbb1 	bl	8001c68 <_realloc_r>
 8001506:	4606      	mov	r6, r0
 8001508:	2800      	cmp	r0, #0
 800150a:	d1e1      	bne.n	80014d0 <__ssputs_r+0x70>
 800150c:	4650      	mov	r0, sl
 800150e:	6921      	ldr	r1, [r4, #16]
 8001510:	f000 face 	bl	8001ab0 <_free_r>
 8001514:	e7c7      	b.n	80014a6 <__ssputs_r+0x46>
	...

08001518 <_svfiprintf_r>:
 8001518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800151c:	4698      	mov	r8, r3
 800151e:	898b      	ldrh	r3, [r1, #12]
 8001520:	4607      	mov	r7, r0
 8001522:	061b      	lsls	r3, r3, #24
 8001524:	460d      	mov	r5, r1
 8001526:	4614      	mov	r4, r2
 8001528:	b09d      	sub	sp, #116	; 0x74
 800152a:	d50e      	bpl.n	800154a <_svfiprintf_r+0x32>
 800152c:	690b      	ldr	r3, [r1, #16]
 800152e:	b963      	cbnz	r3, 800154a <_svfiprintf_r+0x32>
 8001530:	2140      	movs	r1, #64	; 0x40
 8001532:	f000 fb25 	bl	8001b80 <_malloc_r>
 8001536:	6028      	str	r0, [r5, #0]
 8001538:	6128      	str	r0, [r5, #16]
 800153a:	b920      	cbnz	r0, 8001546 <_svfiprintf_r+0x2e>
 800153c:	230c      	movs	r3, #12
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	f04f 30ff 	mov.w	r0, #4294967295
 8001544:	e0d1      	b.n	80016ea <_svfiprintf_r+0x1d2>
 8001546:	2340      	movs	r3, #64	; 0x40
 8001548:	616b      	str	r3, [r5, #20]
 800154a:	2300      	movs	r3, #0
 800154c:	9309      	str	r3, [sp, #36]	; 0x24
 800154e:	2320      	movs	r3, #32
 8001550:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001554:	2330      	movs	r3, #48	; 0x30
 8001556:	f04f 0901 	mov.w	r9, #1
 800155a:	f8cd 800c 	str.w	r8, [sp, #12]
 800155e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001704 <_svfiprintf_r+0x1ec>
 8001562:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001566:	4623      	mov	r3, r4
 8001568:	469a      	mov	sl, r3
 800156a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800156e:	b10a      	cbz	r2, 8001574 <_svfiprintf_r+0x5c>
 8001570:	2a25      	cmp	r2, #37	; 0x25
 8001572:	d1f9      	bne.n	8001568 <_svfiprintf_r+0x50>
 8001574:	ebba 0b04 	subs.w	fp, sl, r4
 8001578:	d00b      	beq.n	8001592 <_svfiprintf_r+0x7a>
 800157a:	465b      	mov	r3, fp
 800157c:	4622      	mov	r2, r4
 800157e:	4629      	mov	r1, r5
 8001580:	4638      	mov	r0, r7
 8001582:	f7ff ff6d 	bl	8001460 <__ssputs_r>
 8001586:	3001      	adds	r0, #1
 8001588:	f000 80aa 	beq.w	80016e0 <_svfiprintf_r+0x1c8>
 800158c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800158e:	445a      	add	r2, fp
 8001590:	9209      	str	r2, [sp, #36]	; 0x24
 8001592:	f89a 3000 	ldrb.w	r3, [sl]
 8001596:	2b00      	cmp	r3, #0
 8001598:	f000 80a2 	beq.w	80016e0 <_svfiprintf_r+0x1c8>
 800159c:	2300      	movs	r3, #0
 800159e:	f04f 32ff 	mov.w	r2, #4294967295
 80015a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80015a6:	f10a 0a01 	add.w	sl, sl, #1
 80015aa:	9304      	str	r3, [sp, #16]
 80015ac:	9307      	str	r3, [sp, #28]
 80015ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80015b2:	931a      	str	r3, [sp, #104]	; 0x68
 80015b4:	4654      	mov	r4, sl
 80015b6:	2205      	movs	r2, #5
 80015b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80015bc:	4851      	ldr	r0, [pc, #324]	; (8001704 <_svfiprintf_r+0x1ec>)
 80015be:	f000 fa41 	bl	8001a44 <memchr>
 80015c2:	9a04      	ldr	r2, [sp, #16]
 80015c4:	b9d8      	cbnz	r0, 80015fe <_svfiprintf_r+0xe6>
 80015c6:	06d0      	lsls	r0, r2, #27
 80015c8:	bf44      	itt	mi
 80015ca:	2320      	movmi	r3, #32
 80015cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80015d0:	0711      	lsls	r1, r2, #28
 80015d2:	bf44      	itt	mi
 80015d4:	232b      	movmi	r3, #43	; 0x2b
 80015d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80015da:	f89a 3000 	ldrb.w	r3, [sl]
 80015de:	2b2a      	cmp	r3, #42	; 0x2a
 80015e0:	d015      	beq.n	800160e <_svfiprintf_r+0xf6>
 80015e2:	4654      	mov	r4, sl
 80015e4:	2000      	movs	r0, #0
 80015e6:	f04f 0c0a 	mov.w	ip, #10
 80015ea:	9a07      	ldr	r2, [sp, #28]
 80015ec:	4621      	mov	r1, r4
 80015ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80015f2:	3b30      	subs	r3, #48	; 0x30
 80015f4:	2b09      	cmp	r3, #9
 80015f6:	d94e      	bls.n	8001696 <_svfiprintf_r+0x17e>
 80015f8:	b1b0      	cbz	r0, 8001628 <_svfiprintf_r+0x110>
 80015fa:	9207      	str	r2, [sp, #28]
 80015fc:	e014      	b.n	8001628 <_svfiprintf_r+0x110>
 80015fe:	eba0 0308 	sub.w	r3, r0, r8
 8001602:	fa09 f303 	lsl.w	r3, r9, r3
 8001606:	4313      	orrs	r3, r2
 8001608:	46a2      	mov	sl, r4
 800160a:	9304      	str	r3, [sp, #16]
 800160c:	e7d2      	b.n	80015b4 <_svfiprintf_r+0x9c>
 800160e:	9b03      	ldr	r3, [sp, #12]
 8001610:	1d19      	adds	r1, r3, #4
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	9103      	str	r1, [sp, #12]
 8001616:	2b00      	cmp	r3, #0
 8001618:	bfbb      	ittet	lt
 800161a:	425b      	neglt	r3, r3
 800161c:	f042 0202 	orrlt.w	r2, r2, #2
 8001620:	9307      	strge	r3, [sp, #28]
 8001622:	9307      	strlt	r3, [sp, #28]
 8001624:	bfb8      	it	lt
 8001626:	9204      	strlt	r2, [sp, #16]
 8001628:	7823      	ldrb	r3, [r4, #0]
 800162a:	2b2e      	cmp	r3, #46	; 0x2e
 800162c:	d10c      	bne.n	8001648 <_svfiprintf_r+0x130>
 800162e:	7863      	ldrb	r3, [r4, #1]
 8001630:	2b2a      	cmp	r3, #42	; 0x2a
 8001632:	d135      	bne.n	80016a0 <_svfiprintf_r+0x188>
 8001634:	9b03      	ldr	r3, [sp, #12]
 8001636:	3402      	adds	r4, #2
 8001638:	1d1a      	adds	r2, r3, #4
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	9203      	str	r2, [sp, #12]
 800163e:	2b00      	cmp	r3, #0
 8001640:	bfb8      	it	lt
 8001642:	f04f 33ff 	movlt.w	r3, #4294967295
 8001646:	9305      	str	r3, [sp, #20]
 8001648:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8001708 <_svfiprintf_r+0x1f0>
 800164c:	2203      	movs	r2, #3
 800164e:	4650      	mov	r0, sl
 8001650:	7821      	ldrb	r1, [r4, #0]
 8001652:	f000 f9f7 	bl	8001a44 <memchr>
 8001656:	b140      	cbz	r0, 800166a <_svfiprintf_r+0x152>
 8001658:	2340      	movs	r3, #64	; 0x40
 800165a:	eba0 000a 	sub.w	r0, r0, sl
 800165e:	fa03 f000 	lsl.w	r0, r3, r0
 8001662:	9b04      	ldr	r3, [sp, #16]
 8001664:	3401      	adds	r4, #1
 8001666:	4303      	orrs	r3, r0
 8001668:	9304      	str	r3, [sp, #16]
 800166a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800166e:	2206      	movs	r2, #6
 8001670:	4826      	ldr	r0, [pc, #152]	; (800170c <_svfiprintf_r+0x1f4>)
 8001672:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001676:	f000 f9e5 	bl	8001a44 <memchr>
 800167a:	2800      	cmp	r0, #0
 800167c:	d038      	beq.n	80016f0 <_svfiprintf_r+0x1d8>
 800167e:	4b24      	ldr	r3, [pc, #144]	; (8001710 <_svfiprintf_r+0x1f8>)
 8001680:	bb1b      	cbnz	r3, 80016ca <_svfiprintf_r+0x1b2>
 8001682:	9b03      	ldr	r3, [sp, #12]
 8001684:	3307      	adds	r3, #7
 8001686:	f023 0307 	bic.w	r3, r3, #7
 800168a:	3308      	adds	r3, #8
 800168c:	9303      	str	r3, [sp, #12]
 800168e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001690:	4433      	add	r3, r6
 8001692:	9309      	str	r3, [sp, #36]	; 0x24
 8001694:	e767      	b.n	8001566 <_svfiprintf_r+0x4e>
 8001696:	460c      	mov	r4, r1
 8001698:	2001      	movs	r0, #1
 800169a:	fb0c 3202 	mla	r2, ip, r2, r3
 800169e:	e7a5      	b.n	80015ec <_svfiprintf_r+0xd4>
 80016a0:	2300      	movs	r3, #0
 80016a2:	f04f 0c0a 	mov.w	ip, #10
 80016a6:	4619      	mov	r1, r3
 80016a8:	3401      	adds	r4, #1
 80016aa:	9305      	str	r3, [sp, #20]
 80016ac:	4620      	mov	r0, r4
 80016ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80016b2:	3a30      	subs	r2, #48	; 0x30
 80016b4:	2a09      	cmp	r2, #9
 80016b6:	d903      	bls.n	80016c0 <_svfiprintf_r+0x1a8>
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0c5      	beq.n	8001648 <_svfiprintf_r+0x130>
 80016bc:	9105      	str	r1, [sp, #20]
 80016be:	e7c3      	b.n	8001648 <_svfiprintf_r+0x130>
 80016c0:	4604      	mov	r4, r0
 80016c2:	2301      	movs	r3, #1
 80016c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80016c8:	e7f0      	b.n	80016ac <_svfiprintf_r+0x194>
 80016ca:	ab03      	add	r3, sp, #12
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	462a      	mov	r2, r5
 80016d0:	4638      	mov	r0, r7
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <_svfiprintf_r+0x1fc>)
 80016d4:	a904      	add	r1, sp, #16
 80016d6:	f3af 8000 	nop.w
 80016da:	1c42      	adds	r2, r0, #1
 80016dc:	4606      	mov	r6, r0
 80016de:	d1d6      	bne.n	800168e <_svfiprintf_r+0x176>
 80016e0:	89ab      	ldrh	r3, [r5, #12]
 80016e2:	065b      	lsls	r3, r3, #25
 80016e4:	f53f af2c 	bmi.w	8001540 <_svfiprintf_r+0x28>
 80016e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80016ea:	b01d      	add	sp, #116	; 0x74
 80016ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016f0:	ab03      	add	r3, sp, #12
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	462a      	mov	r2, r5
 80016f6:	4638      	mov	r0, r7
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <_svfiprintf_r+0x1fc>)
 80016fa:	a904      	add	r1, sp, #16
 80016fc:	f000 f87c 	bl	80017f8 <_printf_i>
 8001700:	e7eb      	b.n	80016da <_svfiprintf_r+0x1c2>
 8001702:	bf00      	nop
 8001704:	08001d62 	.word	0x08001d62
 8001708:	08001d68 	.word	0x08001d68
 800170c:	08001d6c 	.word	0x08001d6c
 8001710:	00000000 	.word	0x00000000
 8001714:	08001461 	.word	0x08001461

08001718 <_printf_common>:
 8001718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800171c:	4616      	mov	r6, r2
 800171e:	4699      	mov	r9, r3
 8001720:	688a      	ldr	r2, [r1, #8]
 8001722:	690b      	ldr	r3, [r1, #16]
 8001724:	4607      	mov	r7, r0
 8001726:	4293      	cmp	r3, r2
 8001728:	bfb8      	it	lt
 800172a:	4613      	movlt	r3, r2
 800172c:	6033      	str	r3, [r6, #0]
 800172e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001732:	460c      	mov	r4, r1
 8001734:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001738:	b10a      	cbz	r2, 800173e <_printf_common+0x26>
 800173a:	3301      	adds	r3, #1
 800173c:	6033      	str	r3, [r6, #0]
 800173e:	6823      	ldr	r3, [r4, #0]
 8001740:	0699      	lsls	r1, r3, #26
 8001742:	bf42      	ittt	mi
 8001744:	6833      	ldrmi	r3, [r6, #0]
 8001746:	3302      	addmi	r3, #2
 8001748:	6033      	strmi	r3, [r6, #0]
 800174a:	6825      	ldr	r5, [r4, #0]
 800174c:	f015 0506 	ands.w	r5, r5, #6
 8001750:	d106      	bne.n	8001760 <_printf_common+0x48>
 8001752:	f104 0a19 	add.w	sl, r4, #25
 8001756:	68e3      	ldr	r3, [r4, #12]
 8001758:	6832      	ldr	r2, [r6, #0]
 800175a:	1a9b      	subs	r3, r3, r2
 800175c:	42ab      	cmp	r3, r5
 800175e:	dc28      	bgt.n	80017b2 <_printf_common+0x9a>
 8001760:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001764:	1e13      	subs	r3, r2, #0
 8001766:	6822      	ldr	r2, [r4, #0]
 8001768:	bf18      	it	ne
 800176a:	2301      	movne	r3, #1
 800176c:	0692      	lsls	r2, r2, #26
 800176e:	d42d      	bmi.n	80017cc <_printf_common+0xb4>
 8001770:	4649      	mov	r1, r9
 8001772:	4638      	mov	r0, r7
 8001774:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001778:	47c0      	blx	r8
 800177a:	3001      	adds	r0, #1
 800177c:	d020      	beq.n	80017c0 <_printf_common+0xa8>
 800177e:	6823      	ldr	r3, [r4, #0]
 8001780:	68e5      	ldr	r5, [r4, #12]
 8001782:	f003 0306 	and.w	r3, r3, #6
 8001786:	2b04      	cmp	r3, #4
 8001788:	bf18      	it	ne
 800178a:	2500      	movne	r5, #0
 800178c:	6832      	ldr	r2, [r6, #0]
 800178e:	f04f 0600 	mov.w	r6, #0
 8001792:	68a3      	ldr	r3, [r4, #8]
 8001794:	bf08      	it	eq
 8001796:	1aad      	subeq	r5, r5, r2
 8001798:	6922      	ldr	r2, [r4, #16]
 800179a:	bf08      	it	eq
 800179c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80017a0:	4293      	cmp	r3, r2
 80017a2:	bfc4      	itt	gt
 80017a4:	1a9b      	subgt	r3, r3, r2
 80017a6:	18ed      	addgt	r5, r5, r3
 80017a8:	341a      	adds	r4, #26
 80017aa:	42b5      	cmp	r5, r6
 80017ac:	d11a      	bne.n	80017e4 <_printf_common+0xcc>
 80017ae:	2000      	movs	r0, #0
 80017b0:	e008      	b.n	80017c4 <_printf_common+0xac>
 80017b2:	2301      	movs	r3, #1
 80017b4:	4652      	mov	r2, sl
 80017b6:	4649      	mov	r1, r9
 80017b8:	4638      	mov	r0, r7
 80017ba:	47c0      	blx	r8
 80017bc:	3001      	adds	r0, #1
 80017be:	d103      	bne.n	80017c8 <_printf_common+0xb0>
 80017c0:	f04f 30ff 	mov.w	r0, #4294967295
 80017c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017c8:	3501      	adds	r5, #1
 80017ca:	e7c4      	b.n	8001756 <_printf_common+0x3e>
 80017cc:	2030      	movs	r0, #48	; 0x30
 80017ce:	18e1      	adds	r1, r4, r3
 80017d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80017d4:	1c5a      	adds	r2, r3, #1
 80017d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80017da:	4422      	add	r2, r4
 80017dc:	3302      	adds	r3, #2
 80017de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80017e2:	e7c5      	b.n	8001770 <_printf_common+0x58>
 80017e4:	2301      	movs	r3, #1
 80017e6:	4622      	mov	r2, r4
 80017e8:	4649      	mov	r1, r9
 80017ea:	4638      	mov	r0, r7
 80017ec:	47c0      	blx	r8
 80017ee:	3001      	adds	r0, #1
 80017f0:	d0e6      	beq.n	80017c0 <_printf_common+0xa8>
 80017f2:	3601      	adds	r6, #1
 80017f4:	e7d9      	b.n	80017aa <_printf_common+0x92>
	...

080017f8 <_printf_i>:
 80017f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80017fc:	7e0f      	ldrb	r7, [r1, #24]
 80017fe:	4691      	mov	r9, r2
 8001800:	2f78      	cmp	r7, #120	; 0x78
 8001802:	4680      	mov	r8, r0
 8001804:	460c      	mov	r4, r1
 8001806:	469a      	mov	sl, r3
 8001808:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800180a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800180e:	d807      	bhi.n	8001820 <_printf_i+0x28>
 8001810:	2f62      	cmp	r7, #98	; 0x62
 8001812:	d80a      	bhi.n	800182a <_printf_i+0x32>
 8001814:	2f00      	cmp	r7, #0
 8001816:	f000 80d9 	beq.w	80019cc <_printf_i+0x1d4>
 800181a:	2f58      	cmp	r7, #88	; 0x58
 800181c:	f000 80a4 	beq.w	8001968 <_printf_i+0x170>
 8001820:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001824:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001828:	e03a      	b.n	80018a0 <_printf_i+0xa8>
 800182a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800182e:	2b15      	cmp	r3, #21
 8001830:	d8f6      	bhi.n	8001820 <_printf_i+0x28>
 8001832:	a101      	add	r1, pc, #4	; (adr r1, 8001838 <_printf_i+0x40>)
 8001834:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001838:	08001891 	.word	0x08001891
 800183c:	080018a5 	.word	0x080018a5
 8001840:	08001821 	.word	0x08001821
 8001844:	08001821 	.word	0x08001821
 8001848:	08001821 	.word	0x08001821
 800184c:	08001821 	.word	0x08001821
 8001850:	080018a5 	.word	0x080018a5
 8001854:	08001821 	.word	0x08001821
 8001858:	08001821 	.word	0x08001821
 800185c:	08001821 	.word	0x08001821
 8001860:	08001821 	.word	0x08001821
 8001864:	080019b3 	.word	0x080019b3
 8001868:	080018d5 	.word	0x080018d5
 800186c:	08001995 	.word	0x08001995
 8001870:	08001821 	.word	0x08001821
 8001874:	08001821 	.word	0x08001821
 8001878:	080019d5 	.word	0x080019d5
 800187c:	08001821 	.word	0x08001821
 8001880:	080018d5 	.word	0x080018d5
 8001884:	08001821 	.word	0x08001821
 8001888:	08001821 	.word	0x08001821
 800188c:	0800199d 	.word	0x0800199d
 8001890:	682b      	ldr	r3, [r5, #0]
 8001892:	1d1a      	adds	r2, r3, #4
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	602a      	str	r2, [r5, #0]
 8001898:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800189c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80018a0:	2301      	movs	r3, #1
 80018a2:	e0a4      	b.n	80019ee <_printf_i+0x1f6>
 80018a4:	6820      	ldr	r0, [r4, #0]
 80018a6:	6829      	ldr	r1, [r5, #0]
 80018a8:	0606      	lsls	r6, r0, #24
 80018aa:	f101 0304 	add.w	r3, r1, #4
 80018ae:	d50a      	bpl.n	80018c6 <_printf_i+0xce>
 80018b0:	680e      	ldr	r6, [r1, #0]
 80018b2:	602b      	str	r3, [r5, #0]
 80018b4:	2e00      	cmp	r6, #0
 80018b6:	da03      	bge.n	80018c0 <_printf_i+0xc8>
 80018b8:	232d      	movs	r3, #45	; 0x2d
 80018ba:	4276      	negs	r6, r6
 80018bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80018c0:	230a      	movs	r3, #10
 80018c2:	485e      	ldr	r0, [pc, #376]	; (8001a3c <_printf_i+0x244>)
 80018c4:	e019      	b.n	80018fa <_printf_i+0x102>
 80018c6:	680e      	ldr	r6, [r1, #0]
 80018c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80018cc:	602b      	str	r3, [r5, #0]
 80018ce:	bf18      	it	ne
 80018d0:	b236      	sxthne	r6, r6
 80018d2:	e7ef      	b.n	80018b4 <_printf_i+0xbc>
 80018d4:	682b      	ldr	r3, [r5, #0]
 80018d6:	6820      	ldr	r0, [r4, #0]
 80018d8:	1d19      	adds	r1, r3, #4
 80018da:	6029      	str	r1, [r5, #0]
 80018dc:	0601      	lsls	r1, r0, #24
 80018de:	d501      	bpl.n	80018e4 <_printf_i+0xec>
 80018e0:	681e      	ldr	r6, [r3, #0]
 80018e2:	e002      	b.n	80018ea <_printf_i+0xf2>
 80018e4:	0646      	lsls	r6, r0, #25
 80018e6:	d5fb      	bpl.n	80018e0 <_printf_i+0xe8>
 80018e8:	881e      	ldrh	r6, [r3, #0]
 80018ea:	2f6f      	cmp	r7, #111	; 0x6f
 80018ec:	bf0c      	ite	eq
 80018ee:	2308      	moveq	r3, #8
 80018f0:	230a      	movne	r3, #10
 80018f2:	4852      	ldr	r0, [pc, #328]	; (8001a3c <_printf_i+0x244>)
 80018f4:	2100      	movs	r1, #0
 80018f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80018fa:	6865      	ldr	r5, [r4, #4]
 80018fc:	2d00      	cmp	r5, #0
 80018fe:	bfa8      	it	ge
 8001900:	6821      	ldrge	r1, [r4, #0]
 8001902:	60a5      	str	r5, [r4, #8]
 8001904:	bfa4      	itt	ge
 8001906:	f021 0104 	bicge.w	r1, r1, #4
 800190a:	6021      	strge	r1, [r4, #0]
 800190c:	b90e      	cbnz	r6, 8001912 <_printf_i+0x11a>
 800190e:	2d00      	cmp	r5, #0
 8001910:	d04d      	beq.n	80019ae <_printf_i+0x1b6>
 8001912:	4615      	mov	r5, r2
 8001914:	fbb6 f1f3 	udiv	r1, r6, r3
 8001918:	fb03 6711 	mls	r7, r3, r1, r6
 800191c:	5dc7      	ldrb	r7, [r0, r7]
 800191e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001922:	4637      	mov	r7, r6
 8001924:	42bb      	cmp	r3, r7
 8001926:	460e      	mov	r6, r1
 8001928:	d9f4      	bls.n	8001914 <_printf_i+0x11c>
 800192a:	2b08      	cmp	r3, #8
 800192c:	d10b      	bne.n	8001946 <_printf_i+0x14e>
 800192e:	6823      	ldr	r3, [r4, #0]
 8001930:	07de      	lsls	r6, r3, #31
 8001932:	d508      	bpl.n	8001946 <_printf_i+0x14e>
 8001934:	6923      	ldr	r3, [r4, #16]
 8001936:	6861      	ldr	r1, [r4, #4]
 8001938:	4299      	cmp	r1, r3
 800193a:	bfde      	ittt	le
 800193c:	2330      	movle	r3, #48	; 0x30
 800193e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001942:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001946:	1b52      	subs	r2, r2, r5
 8001948:	6122      	str	r2, [r4, #16]
 800194a:	464b      	mov	r3, r9
 800194c:	4621      	mov	r1, r4
 800194e:	4640      	mov	r0, r8
 8001950:	f8cd a000 	str.w	sl, [sp]
 8001954:	aa03      	add	r2, sp, #12
 8001956:	f7ff fedf 	bl	8001718 <_printf_common>
 800195a:	3001      	adds	r0, #1
 800195c:	d14c      	bne.n	80019f8 <_printf_i+0x200>
 800195e:	f04f 30ff 	mov.w	r0, #4294967295
 8001962:	b004      	add	sp, #16
 8001964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001968:	4834      	ldr	r0, [pc, #208]	; (8001a3c <_printf_i+0x244>)
 800196a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800196e:	6829      	ldr	r1, [r5, #0]
 8001970:	6823      	ldr	r3, [r4, #0]
 8001972:	f851 6b04 	ldr.w	r6, [r1], #4
 8001976:	6029      	str	r1, [r5, #0]
 8001978:	061d      	lsls	r5, r3, #24
 800197a:	d514      	bpl.n	80019a6 <_printf_i+0x1ae>
 800197c:	07df      	lsls	r7, r3, #31
 800197e:	bf44      	itt	mi
 8001980:	f043 0320 	orrmi.w	r3, r3, #32
 8001984:	6023      	strmi	r3, [r4, #0]
 8001986:	b91e      	cbnz	r6, 8001990 <_printf_i+0x198>
 8001988:	6823      	ldr	r3, [r4, #0]
 800198a:	f023 0320 	bic.w	r3, r3, #32
 800198e:	6023      	str	r3, [r4, #0]
 8001990:	2310      	movs	r3, #16
 8001992:	e7af      	b.n	80018f4 <_printf_i+0xfc>
 8001994:	6823      	ldr	r3, [r4, #0]
 8001996:	f043 0320 	orr.w	r3, r3, #32
 800199a:	6023      	str	r3, [r4, #0]
 800199c:	2378      	movs	r3, #120	; 0x78
 800199e:	4828      	ldr	r0, [pc, #160]	; (8001a40 <_printf_i+0x248>)
 80019a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80019a4:	e7e3      	b.n	800196e <_printf_i+0x176>
 80019a6:	0659      	lsls	r1, r3, #25
 80019a8:	bf48      	it	mi
 80019aa:	b2b6      	uxthmi	r6, r6
 80019ac:	e7e6      	b.n	800197c <_printf_i+0x184>
 80019ae:	4615      	mov	r5, r2
 80019b0:	e7bb      	b.n	800192a <_printf_i+0x132>
 80019b2:	682b      	ldr	r3, [r5, #0]
 80019b4:	6826      	ldr	r6, [r4, #0]
 80019b6:	1d18      	adds	r0, r3, #4
 80019b8:	6961      	ldr	r1, [r4, #20]
 80019ba:	6028      	str	r0, [r5, #0]
 80019bc:	0635      	lsls	r5, r6, #24
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	d501      	bpl.n	80019c6 <_printf_i+0x1ce>
 80019c2:	6019      	str	r1, [r3, #0]
 80019c4:	e002      	b.n	80019cc <_printf_i+0x1d4>
 80019c6:	0670      	lsls	r0, r6, #25
 80019c8:	d5fb      	bpl.n	80019c2 <_printf_i+0x1ca>
 80019ca:	8019      	strh	r1, [r3, #0]
 80019cc:	2300      	movs	r3, #0
 80019ce:	4615      	mov	r5, r2
 80019d0:	6123      	str	r3, [r4, #16]
 80019d2:	e7ba      	b.n	800194a <_printf_i+0x152>
 80019d4:	682b      	ldr	r3, [r5, #0]
 80019d6:	2100      	movs	r1, #0
 80019d8:	1d1a      	adds	r2, r3, #4
 80019da:	602a      	str	r2, [r5, #0]
 80019dc:	681d      	ldr	r5, [r3, #0]
 80019de:	6862      	ldr	r2, [r4, #4]
 80019e0:	4628      	mov	r0, r5
 80019e2:	f000 f82f 	bl	8001a44 <memchr>
 80019e6:	b108      	cbz	r0, 80019ec <_printf_i+0x1f4>
 80019e8:	1b40      	subs	r0, r0, r5
 80019ea:	6060      	str	r0, [r4, #4]
 80019ec:	6863      	ldr	r3, [r4, #4]
 80019ee:	6123      	str	r3, [r4, #16]
 80019f0:	2300      	movs	r3, #0
 80019f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80019f6:	e7a8      	b.n	800194a <_printf_i+0x152>
 80019f8:	462a      	mov	r2, r5
 80019fa:	4649      	mov	r1, r9
 80019fc:	4640      	mov	r0, r8
 80019fe:	6923      	ldr	r3, [r4, #16]
 8001a00:	47d0      	blx	sl
 8001a02:	3001      	adds	r0, #1
 8001a04:	d0ab      	beq.n	800195e <_printf_i+0x166>
 8001a06:	6823      	ldr	r3, [r4, #0]
 8001a08:	079b      	lsls	r3, r3, #30
 8001a0a:	d413      	bmi.n	8001a34 <_printf_i+0x23c>
 8001a0c:	68e0      	ldr	r0, [r4, #12]
 8001a0e:	9b03      	ldr	r3, [sp, #12]
 8001a10:	4298      	cmp	r0, r3
 8001a12:	bfb8      	it	lt
 8001a14:	4618      	movlt	r0, r3
 8001a16:	e7a4      	b.n	8001962 <_printf_i+0x16a>
 8001a18:	2301      	movs	r3, #1
 8001a1a:	4632      	mov	r2, r6
 8001a1c:	4649      	mov	r1, r9
 8001a1e:	4640      	mov	r0, r8
 8001a20:	47d0      	blx	sl
 8001a22:	3001      	adds	r0, #1
 8001a24:	d09b      	beq.n	800195e <_printf_i+0x166>
 8001a26:	3501      	adds	r5, #1
 8001a28:	68e3      	ldr	r3, [r4, #12]
 8001a2a:	9903      	ldr	r1, [sp, #12]
 8001a2c:	1a5b      	subs	r3, r3, r1
 8001a2e:	42ab      	cmp	r3, r5
 8001a30:	dcf2      	bgt.n	8001a18 <_printf_i+0x220>
 8001a32:	e7eb      	b.n	8001a0c <_printf_i+0x214>
 8001a34:	2500      	movs	r5, #0
 8001a36:	f104 0619 	add.w	r6, r4, #25
 8001a3a:	e7f5      	b.n	8001a28 <_printf_i+0x230>
 8001a3c:	08001d73 	.word	0x08001d73
 8001a40:	08001d84 	.word	0x08001d84

08001a44 <memchr>:
 8001a44:	4603      	mov	r3, r0
 8001a46:	b510      	push	{r4, lr}
 8001a48:	b2c9      	uxtb	r1, r1
 8001a4a:	4402      	add	r2, r0
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	4618      	mov	r0, r3
 8001a50:	d101      	bne.n	8001a56 <memchr+0x12>
 8001a52:	2000      	movs	r0, #0
 8001a54:	e003      	b.n	8001a5e <memchr+0x1a>
 8001a56:	7804      	ldrb	r4, [r0, #0]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	428c      	cmp	r4, r1
 8001a5c:	d1f6      	bne.n	8001a4c <memchr+0x8>
 8001a5e:	bd10      	pop	{r4, pc}

08001a60 <memcpy>:
 8001a60:	440a      	add	r2, r1
 8001a62:	4291      	cmp	r1, r2
 8001a64:	f100 33ff 	add.w	r3, r0, #4294967295
 8001a68:	d100      	bne.n	8001a6c <memcpy+0xc>
 8001a6a:	4770      	bx	lr
 8001a6c:	b510      	push	{r4, lr}
 8001a6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001a72:	4291      	cmp	r1, r2
 8001a74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001a78:	d1f9      	bne.n	8001a6e <memcpy+0xe>
 8001a7a:	bd10      	pop	{r4, pc}

08001a7c <memmove>:
 8001a7c:	4288      	cmp	r0, r1
 8001a7e:	b510      	push	{r4, lr}
 8001a80:	eb01 0402 	add.w	r4, r1, r2
 8001a84:	d902      	bls.n	8001a8c <memmove+0x10>
 8001a86:	4284      	cmp	r4, r0
 8001a88:	4623      	mov	r3, r4
 8001a8a:	d807      	bhi.n	8001a9c <memmove+0x20>
 8001a8c:	1e43      	subs	r3, r0, #1
 8001a8e:	42a1      	cmp	r1, r4
 8001a90:	d008      	beq.n	8001aa4 <memmove+0x28>
 8001a92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001a96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001a9a:	e7f8      	b.n	8001a8e <memmove+0x12>
 8001a9c:	4601      	mov	r1, r0
 8001a9e:	4402      	add	r2, r0
 8001aa0:	428a      	cmp	r2, r1
 8001aa2:	d100      	bne.n	8001aa6 <memmove+0x2a>
 8001aa4:	bd10      	pop	{r4, pc}
 8001aa6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001aaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001aae:	e7f7      	b.n	8001aa0 <memmove+0x24>

08001ab0 <_free_r>:
 8001ab0:	b538      	push	{r3, r4, r5, lr}
 8001ab2:	4605      	mov	r5, r0
 8001ab4:	2900      	cmp	r1, #0
 8001ab6:	d040      	beq.n	8001b3a <_free_r+0x8a>
 8001ab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001abc:	1f0c      	subs	r4, r1, #4
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	bfb8      	it	lt
 8001ac2:	18e4      	addlt	r4, r4, r3
 8001ac4:	f000 f910 	bl	8001ce8 <__malloc_lock>
 8001ac8:	4a1c      	ldr	r2, [pc, #112]	; (8001b3c <_free_r+0x8c>)
 8001aca:	6813      	ldr	r3, [r2, #0]
 8001acc:	b933      	cbnz	r3, 8001adc <_free_r+0x2c>
 8001ace:	6063      	str	r3, [r4, #4]
 8001ad0:	6014      	str	r4, [r2, #0]
 8001ad2:	4628      	mov	r0, r5
 8001ad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ad8:	f000 b90c 	b.w	8001cf4 <__malloc_unlock>
 8001adc:	42a3      	cmp	r3, r4
 8001ade:	d908      	bls.n	8001af2 <_free_r+0x42>
 8001ae0:	6820      	ldr	r0, [r4, #0]
 8001ae2:	1821      	adds	r1, r4, r0
 8001ae4:	428b      	cmp	r3, r1
 8001ae6:	bf01      	itttt	eq
 8001ae8:	6819      	ldreq	r1, [r3, #0]
 8001aea:	685b      	ldreq	r3, [r3, #4]
 8001aec:	1809      	addeq	r1, r1, r0
 8001aee:	6021      	streq	r1, [r4, #0]
 8001af0:	e7ed      	b.n	8001ace <_free_r+0x1e>
 8001af2:	461a      	mov	r2, r3
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	b10b      	cbz	r3, 8001afc <_free_r+0x4c>
 8001af8:	42a3      	cmp	r3, r4
 8001afa:	d9fa      	bls.n	8001af2 <_free_r+0x42>
 8001afc:	6811      	ldr	r1, [r2, #0]
 8001afe:	1850      	adds	r0, r2, r1
 8001b00:	42a0      	cmp	r0, r4
 8001b02:	d10b      	bne.n	8001b1c <_free_r+0x6c>
 8001b04:	6820      	ldr	r0, [r4, #0]
 8001b06:	4401      	add	r1, r0
 8001b08:	1850      	adds	r0, r2, r1
 8001b0a:	4283      	cmp	r3, r0
 8001b0c:	6011      	str	r1, [r2, #0]
 8001b0e:	d1e0      	bne.n	8001ad2 <_free_r+0x22>
 8001b10:	6818      	ldr	r0, [r3, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	4401      	add	r1, r0
 8001b16:	6011      	str	r1, [r2, #0]
 8001b18:	6053      	str	r3, [r2, #4]
 8001b1a:	e7da      	b.n	8001ad2 <_free_r+0x22>
 8001b1c:	d902      	bls.n	8001b24 <_free_r+0x74>
 8001b1e:	230c      	movs	r3, #12
 8001b20:	602b      	str	r3, [r5, #0]
 8001b22:	e7d6      	b.n	8001ad2 <_free_r+0x22>
 8001b24:	6820      	ldr	r0, [r4, #0]
 8001b26:	1821      	adds	r1, r4, r0
 8001b28:	428b      	cmp	r3, r1
 8001b2a:	bf01      	itttt	eq
 8001b2c:	6819      	ldreq	r1, [r3, #0]
 8001b2e:	685b      	ldreq	r3, [r3, #4]
 8001b30:	1809      	addeq	r1, r1, r0
 8001b32:	6021      	streq	r1, [r4, #0]
 8001b34:	6063      	str	r3, [r4, #4]
 8001b36:	6054      	str	r4, [r2, #4]
 8001b38:	e7cb      	b.n	8001ad2 <_free_r+0x22>
 8001b3a:	bd38      	pop	{r3, r4, r5, pc}
 8001b3c:	200008c8 	.word	0x200008c8

08001b40 <sbrk_aligned>:
 8001b40:	b570      	push	{r4, r5, r6, lr}
 8001b42:	4e0e      	ldr	r6, [pc, #56]	; (8001b7c <sbrk_aligned+0x3c>)
 8001b44:	460c      	mov	r4, r1
 8001b46:	6831      	ldr	r1, [r6, #0]
 8001b48:	4605      	mov	r5, r0
 8001b4a:	b911      	cbnz	r1, 8001b52 <sbrk_aligned+0x12>
 8001b4c:	f000 f8bc 	bl	8001cc8 <_sbrk_r>
 8001b50:	6030      	str	r0, [r6, #0]
 8001b52:	4621      	mov	r1, r4
 8001b54:	4628      	mov	r0, r5
 8001b56:	f000 f8b7 	bl	8001cc8 <_sbrk_r>
 8001b5a:	1c43      	adds	r3, r0, #1
 8001b5c:	d00a      	beq.n	8001b74 <sbrk_aligned+0x34>
 8001b5e:	1cc4      	adds	r4, r0, #3
 8001b60:	f024 0403 	bic.w	r4, r4, #3
 8001b64:	42a0      	cmp	r0, r4
 8001b66:	d007      	beq.n	8001b78 <sbrk_aligned+0x38>
 8001b68:	1a21      	subs	r1, r4, r0
 8001b6a:	4628      	mov	r0, r5
 8001b6c:	f000 f8ac 	bl	8001cc8 <_sbrk_r>
 8001b70:	3001      	adds	r0, #1
 8001b72:	d101      	bne.n	8001b78 <sbrk_aligned+0x38>
 8001b74:	f04f 34ff 	mov.w	r4, #4294967295
 8001b78:	4620      	mov	r0, r4
 8001b7a:	bd70      	pop	{r4, r5, r6, pc}
 8001b7c:	200008cc 	.word	0x200008cc

08001b80 <_malloc_r>:
 8001b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b84:	1ccd      	adds	r5, r1, #3
 8001b86:	f025 0503 	bic.w	r5, r5, #3
 8001b8a:	3508      	adds	r5, #8
 8001b8c:	2d0c      	cmp	r5, #12
 8001b8e:	bf38      	it	cc
 8001b90:	250c      	movcc	r5, #12
 8001b92:	2d00      	cmp	r5, #0
 8001b94:	4607      	mov	r7, r0
 8001b96:	db01      	blt.n	8001b9c <_malloc_r+0x1c>
 8001b98:	42a9      	cmp	r1, r5
 8001b9a:	d905      	bls.n	8001ba8 <_malloc_r+0x28>
 8001b9c:	230c      	movs	r3, #12
 8001b9e:	2600      	movs	r6, #0
 8001ba0:	603b      	str	r3, [r7, #0]
 8001ba2:	4630      	mov	r0, r6
 8001ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ba8:	4e2e      	ldr	r6, [pc, #184]	; (8001c64 <_malloc_r+0xe4>)
 8001baa:	f000 f89d 	bl	8001ce8 <__malloc_lock>
 8001bae:	6833      	ldr	r3, [r6, #0]
 8001bb0:	461c      	mov	r4, r3
 8001bb2:	bb34      	cbnz	r4, 8001c02 <_malloc_r+0x82>
 8001bb4:	4629      	mov	r1, r5
 8001bb6:	4638      	mov	r0, r7
 8001bb8:	f7ff ffc2 	bl	8001b40 <sbrk_aligned>
 8001bbc:	1c43      	adds	r3, r0, #1
 8001bbe:	4604      	mov	r4, r0
 8001bc0:	d14d      	bne.n	8001c5e <_malloc_r+0xde>
 8001bc2:	6834      	ldr	r4, [r6, #0]
 8001bc4:	4626      	mov	r6, r4
 8001bc6:	2e00      	cmp	r6, #0
 8001bc8:	d140      	bne.n	8001c4c <_malloc_r+0xcc>
 8001bca:	6823      	ldr	r3, [r4, #0]
 8001bcc:	4631      	mov	r1, r6
 8001bce:	4638      	mov	r0, r7
 8001bd0:	eb04 0803 	add.w	r8, r4, r3
 8001bd4:	f000 f878 	bl	8001cc8 <_sbrk_r>
 8001bd8:	4580      	cmp	r8, r0
 8001bda:	d13a      	bne.n	8001c52 <_malloc_r+0xd2>
 8001bdc:	6821      	ldr	r1, [r4, #0]
 8001bde:	3503      	adds	r5, #3
 8001be0:	1a6d      	subs	r5, r5, r1
 8001be2:	f025 0503 	bic.w	r5, r5, #3
 8001be6:	3508      	adds	r5, #8
 8001be8:	2d0c      	cmp	r5, #12
 8001bea:	bf38      	it	cc
 8001bec:	250c      	movcc	r5, #12
 8001bee:	4638      	mov	r0, r7
 8001bf0:	4629      	mov	r1, r5
 8001bf2:	f7ff ffa5 	bl	8001b40 <sbrk_aligned>
 8001bf6:	3001      	adds	r0, #1
 8001bf8:	d02b      	beq.n	8001c52 <_malloc_r+0xd2>
 8001bfa:	6823      	ldr	r3, [r4, #0]
 8001bfc:	442b      	add	r3, r5
 8001bfe:	6023      	str	r3, [r4, #0]
 8001c00:	e00e      	b.n	8001c20 <_malloc_r+0xa0>
 8001c02:	6822      	ldr	r2, [r4, #0]
 8001c04:	1b52      	subs	r2, r2, r5
 8001c06:	d41e      	bmi.n	8001c46 <_malloc_r+0xc6>
 8001c08:	2a0b      	cmp	r2, #11
 8001c0a:	d916      	bls.n	8001c3a <_malloc_r+0xba>
 8001c0c:	1961      	adds	r1, r4, r5
 8001c0e:	42a3      	cmp	r3, r4
 8001c10:	6025      	str	r5, [r4, #0]
 8001c12:	bf18      	it	ne
 8001c14:	6059      	strne	r1, [r3, #4]
 8001c16:	6863      	ldr	r3, [r4, #4]
 8001c18:	bf08      	it	eq
 8001c1a:	6031      	streq	r1, [r6, #0]
 8001c1c:	5162      	str	r2, [r4, r5]
 8001c1e:	604b      	str	r3, [r1, #4]
 8001c20:	4638      	mov	r0, r7
 8001c22:	f104 060b 	add.w	r6, r4, #11
 8001c26:	f000 f865 	bl	8001cf4 <__malloc_unlock>
 8001c2a:	f026 0607 	bic.w	r6, r6, #7
 8001c2e:	1d23      	adds	r3, r4, #4
 8001c30:	1af2      	subs	r2, r6, r3
 8001c32:	d0b6      	beq.n	8001ba2 <_malloc_r+0x22>
 8001c34:	1b9b      	subs	r3, r3, r6
 8001c36:	50a3      	str	r3, [r4, r2]
 8001c38:	e7b3      	b.n	8001ba2 <_malloc_r+0x22>
 8001c3a:	6862      	ldr	r2, [r4, #4]
 8001c3c:	42a3      	cmp	r3, r4
 8001c3e:	bf0c      	ite	eq
 8001c40:	6032      	streq	r2, [r6, #0]
 8001c42:	605a      	strne	r2, [r3, #4]
 8001c44:	e7ec      	b.n	8001c20 <_malloc_r+0xa0>
 8001c46:	4623      	mov	r3, r4
 8001c48:	6864      	ldr	r4, [r4, #4]
 8001c4a:	e7b2      	b.n	8001bb2 <_malloc_r+0x32>
 8001c4c:	4634      	mov	r4, r6
 8001c4e:	6876      	ldr	r6, [r6, #4]
 8001c50:	e7b9      	b.n	8001bc6 <_malloc_r+0x46>
 8001c52:	230c      	movs	r3, #12
 8001c54:	4638      	mov	r0, r7
 8001c56:	603b      	str	r3, [r7, #0]
 8001c58:	f000 f84c 	bl	8001cf4 <__malloc_unlock>
 8001c5c:	e7a1      	b.n	8001ba2 <_malloc_r+0x22>
 8001c5e:	6025      	str	r5, [r4, #0]
 8001c60:	e7de      	b.n	8001c20 <_malloc_r+0xa0>
 8001c62:	bf00      	nop
 8001c64:	200008c8 	.word	0x200008c8

08001c68 <_realloc_r>:
 8001c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c6c:	4680      	mov	r8, r0
 8001c6e:	4614      	mov	r4, r2
 8001c70:	460e      	mov	r6, r1
 8001c72:	b921      	cbnz	r1, 8001c7e <_realloc_r+0x16>
 8001c74:	4611      	mov	r1, r2
 8001c76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001c7a:	f7ff bf81 	b.w	8001b80 <_malloc_r>
 8001c7e:	b92a      	cbnz	r2, 8001c8c <_realloc_r+0x24>
 8001c80:	f7ff ff16 	bl	8001ab0 <_free_r>
 8001c84:	4625      	mov	r5, r4
 8001c86:	4628      	mov	r0, r5
 8001c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c8c:	f000 f838 	bl	8001d00 <_malloc_usable_size_r>
 8001c90:	4284      	cmp	r4, r0
 8001c92:	4607      	mov	r7, r0
 8001c94:	d802      	bhi.n	8001c9c <_realloc_r+0x34>
 8001c96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001c9a:	d812      	bhi.n	8001cc2 <_realloc_r+0x5a>
 8001c9c:	4621      	mov	r1, r4
 8001c9e:	4640      	mov	r0, r8
 8001ca0:	f7ff ff6e 	bl	8001b80 <_malloc_r>
 8001ca4:	4605      	mov	r5, r0
 8001ca6:	2800      	cmp	r0, #0
 8001ca8:	d0ed      	beq.n	8001c86 <_realloc_r+0x1e>
 8001caa:	42bc      	cmp	r4, r7
 8001cac:	4622      	mov	r2, r4
 8001cae:	4631      	mov	r1, r6
 8001cb0:	bf28      	it	cs
 8001cb2:	463a      	movcs	r2, r7
 8001cb4:	f7ff fed4 	bl	8001a60 <memcpy>
 8001cb8:	4631      	mov	r1, r6
 8001cba:	4640      	mov	r0, r8
 8001cbc:	f7ff fef8 	bl	8001ab0 <_free_r>
 8001cc0:	e7e1      	b.n	8001c86 <_realloc_r+0x1e>
 8001cc2:	4635      	mov	r5, r6
 8001cc4:	e7df      	b.n	8001c86 <_realloc_r+0x1e>
	...

08001cc8 <_sbrk_r>:
 8001cc8:	b538      	push	{r3, r4, r5, lr}
 8001cca:	2300      	movs	r3, #0
 8001ccc:	4d05      	ldr	r5, [pc, #20]	; (8001ce4 <_sbrk_r+0x1c>)
 8001cce:	4604      	mov	r4, r0
 8001cd0:	4608      	mov	r0, r1
 8001cd2:	602b      	str	r3, [r5, #0]
 8001cd4:	f7ff f9da 	bl	800108c <_sbrk>
 8001cd8:	1c43      	adds	r3, r0, #1
 8001cda:	d102      	bne.n	8001ce2 <_sbrk_r+0x1a>
 8001cdc:	682b      	ldr	r3, [r5, #0]
 8001cde:	b103      	cbz	r3, 8001ce2 <_sbrk_r+0x1a>
 8001ce0:	6023      	str	r3, [r4, #0]
 8001ce2:	bd38      	pop	{r3, r4, r5, pc}
 8001ce4:	200008d0 	.word	0x200008d0

08001ce8 <__malloc_lock>:
 8001ce8:	4801      	ldr	r0, [pc, #4]	; (8001cf0 <__malloc_lock+0x8>)
 8001cea:	f000 b811 	b.w	8001d10 <__retarget_lock_acquire_recursive>
 8001cee:	bf00      	nop
 8001cf0:	200008d4 	.word	0x200008d4

08001cf4 <__malloc_unlock>:
 8001cf4:	4801      	ldr	r0, [pc, #4]	; (8001cfc <__malloc_unlock+0x8>)
 8001cf6:	f000 b80c 	b.w	8001d12 <__retarget_lock_release_recursive>
 8001cfa:	bf00      	nop
 8001cfc:	200008d4 	.word	0x200008d4

08001d00 <_malloc_usable_size_r>:
 8001d00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d04:	1f18      	subs	r0, r3, #4
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	bfbc      	itt	lt
 8001d0a:	580b      	ldrlt	r3, [r1, r0]
 8001d0c:	18c0      	addlt	r0, r0, r3
 8001d0e:	4770      	bx	lr

08001d10 <__retarget_lock_acquire_recursive>:
 8001d10:	4770      	bx	lr

08001d12 <__retarget_lock_release_recursive>:
 8001d12:	4770      	bx	lr

08001d14 <_init>:
 8001d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d16:	bf00      	nop
 8001d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d1a:	bc08      	pop	{r3}
 8001d1c:	469e      	mov	lr, r3
 8001d1e:	4770      	bx	lr

08001d20 <_fini>:
 8001d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d22:	bf00      	nop
 8001d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d26:	bc08      	pop	{r3}
 8001d28:	469e      	mov	lr, r3
 8001d2a:	4770      	bx	lr
