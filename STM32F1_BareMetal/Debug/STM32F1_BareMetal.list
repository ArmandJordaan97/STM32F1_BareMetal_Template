
STM32F1_BareMetal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016ac  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080017dc  080017dc  000117dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001818  08001818  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  08001818  08001818  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001818  08001818  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001818  08001818  00011818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800181c  0800181c  0001181c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08001820  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  200000a4  080018c4  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  080018c4  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002612  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000008ac  00000000  00000000  000226df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000178  00000000  00000000  00022f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000120  00000000  00000000  00023108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011242  00000000  00000000  00023228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002252  00000000  00000000  0003446a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000593d7  00000000  00000000  000366bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008fa93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000894  00000000  00000000  0008fae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200000a4 	.word	0x200000a4
 800014c:	00000000 	.word	0x00000000
 8000150:	080017c4 	.word	0x080017c4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000a8 	.word	0x200000a8
 800016c:	080017c4 	.word	0x080017c4

08000170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800017a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017e:	2b00      	cmp	r3, #0
 8000180:	db0b      	blt.n	800019a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	f003 021f 	and.w	r2, r3, #31
 8000188:	4906      	ldr	r1, [pc, #24]	; (80001a4 <__NVIC_EnableIRQ+0x34>)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	095b      	lsrs	r3, r3, #5
 8000190:	2001      	movs	r0, #1
 8000192:	fa00 f202 	lsl.w	r2, r0, r2
 8000196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	e000e100 	.word	0xe000e100

080001a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	4603      	mov	r3, r0
 80001b0:	6039      	str	r1, [r7, #0]
 80001b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	db0a      	blt.n	80001d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001bc:	683b      	ldr	r3, [r7, #0]
 80001be:	b2da      	uxtb	r2, r3
 80001c0:	490c      	ldr	r1, [pc, #48]	; (80001f4 <__NVIC_SetPriority+0x4c>)
 80001c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001c6:	0112      	lsls	r2, r2, #4
 80001c8:	b2d2      	uxtb	r2, r2
 80001ca:	440b      	add	r3, r1
 80001cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001d0:	e00a      	b.n	80001e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001d2:	683b      	ldr	r3, [r7, #0]
 80001d4:	b2da      	uxtb	r2, r3
 80001d6:	4908      	ldr	r1, [pc, #32]	; (80001f8 <__NVIC_SetPriority+0x50>)
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	f003 030f 	and.w	r3, r3, #15
 80001de:	3b04      	subs	r3, #4
 80001e0:	0112      	lsls	r2, r2, #4
 80001e2:	b2d2      	uxtb	r2, r2
 80001e4:	440b      	add	r3, r1
 80001e6:	761a      	strb	r2, [r3, #24]
}
 80001e8:	bf00      	nop
 80001ea:	370c      	adds	r7, #12
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bc80      	pop	{r7}
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	e000e100 	.word	0xe000e100
 80001f8:	e000ed00 	.word	0xe000ed00

080001fc <F1_GPIO_Pin_Setup_OUT>:

/*
 * Configure the pin with the selected mode
 */
F1_gpio_status_t F1_GPIO_Pin_Setup_OUT(F1_gpio_port_t port, F1_gpio_pin_t pin, F1_gpio_output_mode_t mode, F1_gpio_output_config_t conf)
{
 80001fc:	b590      	push	{r4, r7, lr}
 80001fe:	b085      	sub	sp, #20
 8000200:	af00      	add	r7, sp, #0
 8000202:	4604      	mov	r4, r0
 8000204:	4608      	mov	r0, r1
 8000206:	4611      	mov	r1, r2
 8000208:	461a      	mov	r2, r3
 800020a:	4623      	mov	r3, r4
 800020c:	71fb      	strb	r3, [r7, #7]
 800020e:	4603      	mov	r3, r0
 8000210:	71bb      	strb	r3, [r7, #6]
 8000212:	460b      	mov	r3, r1
 8000214:	717b      	strb	r3, [r7, #5]
 8000216:	4613      	mov	r3, r2
 8000218:	713b      	strb	r3, [r7, #4]
    /* Enable the GPIO port clock */
    if(F1_GPIO_Clock_Enable(port) != GPIO_OK)
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	4618      	mov	r0, r3
 800021e:	f000 f9fd 	bl	800061c <F1_GPIO_Clock_Enable>
 8000222:	4603      	mov	r3, r0
 8000224:	2b00      	cmp	r3, #0
 8000226:	d001      	beq.n	800022c <F1_GPIO_Pin_Setup_OUT+0x30>
    {
	return GPIO_FAIL;
 8000228:	2301      	movs	r3, #1
 800022a:	e09c      	b.n	8000366 <F1_GPIO_Pin_Setup_OUT+0x16a>
    }
    if(pin < 8)
 800022c:	79bb      	ldrb	r3, [r7, #6]
 800022e:	2b07      	cmp	r3, #7
 8000230:	d84a      	bhi.n	80002c8 <F1_GPIO_Pin_Setup_OUT+0xcc>
    {
	uint8_t location_mode = (pin*4);
 8000232:	79bb      	ldrb	r3, [r7, #6]
 8000234:	009b      	lsls	r3, r3, #2
 8000236:	737b      	strb	r3, [r7, #13]
	uint8_t location_cnf = (pin*4)+2;
 8000238:	79bb      	ldrb	r3, [r7, #6]
 800023a:	009b      	lsls	r3, r3, #2
 800023c:	b2db      	uxtb	r3, r3
 800023e:	3302      	adds	r3, #2
 8000240:	733b      	strb	r3, [r7, #12]
	_F1_GPIO_Port_Lists[port]->CRL &= ~(0x03 << location_mode);
 8000242:	79fb      	ldrb	r3, [r7, #7]
 8000244:	4a4a      	ldr	r2, [pc, #296]	; (8000370 <F1_GPIO_Pin_Setup_OUT+0x174>)
 8000246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800024a:	681a      	ldr	r2, [r3, #0]
 800024c:	7b7b      	ldrb	r3, [r7, #13]
 800024e:	2103      	movs	r1, #3
 8000250:	fa01 f303 	lsl.w	r3, r1, r3
 8000254:	43db      	mvns	r3, r3
 8000256:	4618      	mov	r0, r3
 8000258:	79fb      	ldrb	r3, [r7, #7]
 800025a:	4945      	ldr	r1, [pc, #276]	; (8000370 <F1_GPIO_Pin_Setup_OUT+0x174>)
 800025c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000260:	4002      	ands	r2, r0
 8000262:	601a      	str	r2, [r3, #0]
	_F1_GPIO_Port_Lists[port]->CRL |= (mode << location_mode);
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	4a42      	ldr	r2, [pc, #264]	; (8000370 <F1_GPIO_Pin_Setup_OUT+0x174>)
 8000268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026c:	681a      	ldr	r2, [r3, #0]
 800026e:	7979      	ldrb	r1, [r7, #5]
 8000270:	7b7b      	ldrb	r3, [r7, #13]
 8000272:	fa01 f303 	lsl.w	r3, r1, r3
 8000276:	4618      	mov	r0, r3
 8000278:	79fb      	ldrb	r3, [r7, #7]
 800027a:	493d      	ldr	r1, [pc, #244]	; (8000370 <F1_GPIO_Pin_Setup_OUT+0x174>)
 800027c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000280:	4302      	orrs	r2, r0
 8000282:	601a      	str	r2, [r3, #0]

	_F1_GPIO_Port_Lists[port]->CRL &= ~(0x03 << location_cnf);
 8000284:	79fb      	ldrb	r3, [r7, #7]
 8000286:	4a3a      	ldr	r2, [pc, #232]	; (8000370 <F1_GPIO_Pin_Setup_OUT+0x174>)
 8000288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	7b3b      	ldrb	r3, [r7, #12]
 8000290:	2103      	movs	r1, #3
 8000292:	fa01 f303 	lsl.w	r3, r1, r3
 8000296:	43db      	mvns	r3, r3
 8000298:	4618      	mov	r0, r3
 800029a:	79fb      	ldrb	r3, [r7, #7]
 800029c:	4934      	ldr	r1, [pc, #208]	; (8000370 <F1_GPIO_Pin_Setup_OUT+0x174>)
 800029e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002a2:	4002      	ands	r2, r0
 80002a4:	601a      	str	r2, [r3, #0]
	_F1_GPIO_Port_Lists[port]->CRL |= (conf << location_cnf);
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	4a31      	ldr	r2, [pc, #196]	; (8000370 <F1_GPIO_Pin_Setup_OUT+0x174>)
 80002aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ae:	681a      	ldr	r2, [r3, #0]
 80002b0:	7939      	ldrb	r1, [r7, #4]
 80002b2:	7b3b      	ldrb	r3, [r7, #12]
 80002b4:	fa01 f303 	lsl.w	r3, r1, r3
 80002b8:	4618      	mov	r0, r3
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	492c      	ldr	r1, [pc, #176]	; (8000370 <F1_GPIO_Pin_Setup_OUT+0x174>)
 80002be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002c2:	4302      	orrs	r2, r0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	e04d      	b.n	8000364 <F1_GPIO_Pin_Setup_OUT+0x168>
    }
    else
    {
	uint8_t location_mode = ((pin-8)*4);
 80002c8:	79bb      	ldrb	r3, [r7, #6]
 80002ca:	3b08      	subs	r3, #8
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	009b      	lsls	r3, r3, #2
 80002d0:	73fb      	strb	r3, [r7, #15]
	uint8_t location_cnf = ((pin-8)*4)+2;
 80002d2:	79bb      	ldrb	r3, [r7, #6]
 80002d4:	3b08      	subs	r3, #8
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	009b      	lsls	r3, r3, #2
 80002da:	b2db      	uxtb	r3, r3
 80002dc:	3302      	adds	r3, #2
 80002de:	73bb      	strb	r3, [r7, #14]
	_F1_GPIO_Port_Lists[port]->CRH &= ~(0x3 << location_mode);
 80002e0:	79fb      	ldrb	r3, [r7, #7]
 80002e2:	4a23      	ldr	r2, [pc, #140]	; (8000370 <F1_GPIO_Pin_Setup_OUT+0x174>)
 80002e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002e8:	685a      	ldr	r2, [r3, #4]
 80002ea:	7bfb      	ldrb	r3, [r7, #15]
 80002ec:	2103      	movs	r1, #3
 80002ee:	fa01 f303 	lsl.w	r3, r1, r3
 80002f2:	43db      	mvns	r3, r3
 80002f4:	4618      	mov	r0, r3
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	491d      	ldr	r1, [pc, #116]	; (8000370 <F1_GPIO_Pin_Setup_OUT+0x174>)
 80002fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80002fe:	4002      	ands	r2, r0
 8000300:	605a      	str	r2, [r3, #4]
	_F1_GPIO_Port_Lists[port]->CRH |= (mode << location_mode);
 8000302:	79fb      	ldrb	r3, [r7, #7]
 8000304:	4a1a      	ldr	r2, [pc, #104]	; (8000370 <F1_GPIO_Pin_Setup_OUT+0x174>)
 8000306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800030a:	685a      	ldr	r2, [r3, #4]
 800030c:	7979      	ldrb	r1, [r7, #5]
 800030e:	7bfb      	ldrb	r3, [r7, #15]
 8000310:	fa01 f303 	lsl.w	r3, r1, r3
 8000314:	4618      	mov	r0, r3
 8000316:	79fb      	ldrb	r3, [r7, #7]
 8000318:	4915      	ldr	r1, [pc, #84]	; (8000370 <F1_GPIO_Pin_Setup_OUT+0x174>)
 800031a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800031e:	4302      	orrs	r2, r0
 8000320:	605a      	str	r2, [r3, #4]

	_F1_GPIO_Port_Lists[port]->CRH &= ~(0x3 << location_cnf);
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	4a12      	ldr	r2, [pc, #72]	; (8000370 <F1_GPIO_Pin_Setup_OUT+0x174>)
 8000326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800032a:	685a      	ldr	r2, [r3, #4]
 800032c:	7bbb      	ldrb	r3, [r7, #14]
 800032e:	2103      	movs	r1, #3
 8000330:	fa01 f303 	lsl.w	r3, r1, r3
 8000334:	43db      	mvns	r3, r3
 8000336:	4618      	mov	r0, r3
 8000338:	79fb      	ldrb	r3, [r7, #7]
 800033a:	490d      	ldr	r1, [pc, #52]	; (8000370 <F1_GPIO_Pin_Setup_OUT+0x174>)
 800033c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000340:	4002      	ands	r2, r0
 8000342:	605a      	str	r2, [r3, #4]
	_F1_GPIO_Port_Lists[port]->CRH |= (conf << location_cnf);
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	4a0a      	ldr	r2, [pc, #40]	; (8000370 <F1_GPIO_Pin_Setup_OUT+0x174>)
 8000348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800034c:	685a      	ldr	r2, [r3, #4]
 800034e:	7939      	ldrb	r1, [r7, #4]
 8000350:	7bbb      	ldrb	r3, [r7, #14]
 8000352:	fa01 f303 	lsl.w	r3, r1, r3
 8000356:	4618      	mov	r0, r3
 8000358:	79fb      	ldrb	r3, [r7, #7]
 800035a:	4905      	ldr	r1, [pc, #20]	; (8000370 <F1_GPIO_Pin_Setup_OUT+0x174>)
 800035c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000360:	4302      	orrs	r2, r0
 8000362:	605a      	str	r2, [r3, #4]
    }
    return GPIO_OK;
 8000364:	2300      	movs	r3, #0
}
 8000366:	4618      	mov	r0, r3
 8000368:	3714      	adds	r7, #20
 800036a:	46bd      	mov	sp, r7
 800036c:	bd90      	pop	{r4, r7, pc}
 800036e:	bf00      	nop
 8000370:	20000000 	.word	0x20000000

08000374 <F1_GPIO_Pin_Setup_INPUT>:

/*
 * Configure the pin as input with the selected configuration
 */
F1_gpio_status_t F1_GPIO_Pin_Setup_INPUT(F1_gpio_port_t port, F1_gpio_pin_t pin, F1_gpio_input_config_t conf)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b084      	sub	sp, #16
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	71fb      	strb	r3, [r7, #7]
 800037e:	460b      	mov	r3, r1
 8000380:	71bb      	strb	r3, [r7, #6]
 8000382:	4613      	mov	r3, r2
 8000384:	717b      	strb	r3, [r7, #5]
    /* Enable the GPIO port clock */
    if(F1_GPIO_Clock_Enable(port) != GPIO_OK)
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	4618      	mov	r0, r3
 800038a:	f000 f947 	bl	800061c <F1_GPIO_Clock_Enable>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <F1_GPIO_Pin_Setup_INPUT+0x24>
    {
	return GPIO_FAIL;
 8000394:	2301      	movs	r3, #1
 8000396:	e0cc      	b.n	8000532 <F1_GPIO_Pin_Setup_INPUT+0x1be>
    }
    if(pin < 8)
 8000398:	79bb      	ldrb	r3, [r7, #6]
 800039a:	2b07      	cmp	r3, #7
 800039c:	d862      	bhi.n	8000464 <F1_GPIO_Pin_Setup_INPUT+0xf0>
    {
	uint8_t location_mode = (pin*4);
 800039e:	79bb      	ldrb	r3, [r7, #6]
 80003a0:	009b      	lsls	r3, r3, #2
 80003a2:	737b      	strb	r3, [r7, #13]
	uint8_t location_cnf = (pin*4)+2;
 80003a4:	79bb      	ldrb	r3, [r7, #6]
 80003a6:	009b      	lsls	r3, r3, #2
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	3302      	adds	r3, #2
 80003ac:	733b      	strb	r3, [r7, #12]
	_F1_GPIO_Port_Lists[port]->CRL &= ~(0x3 << location_mode);	// Clear the mode for Input
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	4a62      	ldr	r2, [pc, #392]	; (800053c <F1_GPIO_Pin_Setup_INPUT+0x1c8>)
 80003b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003b6:	681a      	ldr	r2, [r3, #0]
 80003b8:	7b7b      	ldrb	r3, [r7, #13]
 80003ba:	2103      	movs	r1, #3
 80003bc:	fa01 f303 	lsl.w	r3, r1, r3
 80003c0:	43db      	mvns	r3, r3
 80003c2:	4618      	mov	r0, r3
 80003c4:	79fb      	ldrb	r3, [r7, #7]
 80003c6:	495d      	ldr	r1, [pc, #372]	; (800053c <F1_GPIO_Pin_Setup_INPUT+0x1c8>)
 80003c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003cc:	4002      	ands	r2, r0
 80003ce:	601a      	str	r2, [r3, #0]

	_F1_GPIO_Port_Lists[port]->CRL &= ~(0x3 << location_cnf);	// Clear the CNF register for a clean start
 80003d0:	79fb      	ldrb	r3, [r7, #7]
 80003d2:	4a5a      	ldr	r2, [pc, #360]	; (800053c <F1_GPIO_Pin_Setup_INPUT+0x1c8>)
 80003d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	7b3b      	ldrb	r3, [r7, #12]
 80003dc:	2103      	movs	r1, #3
 80003de:	fa01 f303 	lsl.w	r3, r1, r3
 80003e2:	43db      	mvns	r3, r3
 80003e4:	4618      	mov	r0, r3
 80003e6:	79fb      	ldrb	r3, [r7, #7]
 80003e8:	4954      	ldr	r1, [pc, #336]	; (800053c <F1_GPIO_Pin_Setup_INPUT+0x1c8>)
 80003ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003ee:	4002      	ands	r2, r0
 80003f0:	601a      	str	r2, [r3, #0]
	_F1_GPIO_Port_Lists[port]->CRL |= (conf << location_cnf);	// Set the pin as the desired mode
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	4a51      	ldr	r2, [pc, #324]	; (800053c <F1_GPIO_Pin_Setup_INPUT+0x1c8>)
 80003f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	7979      	ldrb	r1, [r7, #5]
 80003fe:	7b3b      	ldrb	r3, [r7, #12]
 8000400:	fa01 f303 	lsl.w	r3, r1, r3
 8000404:	4618      	mov	r0, r3
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	494c      	ldr	r1, [pc, #304]	; (800053c <F1_GPIO_Pin_Setup_INPUT+0x1c8>)
 800040a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800040e:	4302      	orrs	r2, r0
 8000410:	601a      	str	r2, [r3, #0]
	if(conf == GPIO_INPUT_PU)
 8000412:	797b      	ldrb	r3, [r7, #5]
 8000414:	2b02      	cmp	r3, #2
 8000416:	d110      	bne.n	800043a <F1_GPIO_Pin_Setup_INPUT+0xc6>
	{
	    _F1_GPIO_Port_Lists[port]->ODR |= (1 << pin);		// Set the pin in ODR to enable pull-up
 8000418:	79fb      	ldrb	r3, [r7, #7]
 800041a:	4a48      	ldr	r2, [pc, #288]	; (800053c <F1_GPIO_Pin_Setup_INPUT+0x1c8>)
 800041c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000420:	68da      	ldr	r2, [r3, #12]
 8000422:	79bb      	ldrb	r3, [r7, #6]
 8000424:	2101      	movs	r1, #1
 8000426:	fa01 f303 	lsl.w	r3, r1, r3
 800042a:	4618      	mov	r0, r3
 800042c:	79fb      	ldrb	r3, [r7, #7]
 800042e:	4943      	ldr	r1, [pc, #268]	; (800053c <F1_GPIO_Pin_Setup_INPUT+0x1c8>)
 8000430:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000434:	4302      	orrs	r2, r0
 8000436:	60da      	str	r2, [r3, #12]
 8000438:	e07a      	b.n	8000530 <F1_GPIO_Pin_Setup_INPUT+0x1bc>
	}
	else if(conf == GPIO_INPUT_PD)
 800043a:	797b      	ldrb	r3, [r7, #5]
 800043c:	2b03      	cmp	r3, #3
 800043e:	d177      	bne.n	8000530 <F1_GPIO_Pin_Setup_INPUT+0x1bc>
	{
	    _F1_GPIO_Port_Lists[port]->ODR &= ~(1 << pin);		// Set the pin in ODR to enable pull-up
 8000440:	79fb      	ldrb	r3, [r7, #7]
 8000442:	4a3e      	ldr	r2, [pc, #248]	; (800053c <F1_GPIO_Pin_Setup_INPUT+0x1c8>)
 8000444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000448:	68da      	ldr	r2, [r3, #12]
 800044a:	79bb      	ldrb	r3, [r7, #6]
 800044c:	2101      	movs	r1, #1
 800044e:	fa01 f303 	lsl.w	r3, r1, r3
 8000452:	43db      	mvns	r3, r3
 8000454:	4618      	mov	r0, r3
 8000456:	79fb      	ldrb	r3, [r7, #7]
 8000458:	4938      	ldr	r1, [pc, #224]	; (800053c <F1_GPIO_Pin_Setup_INPUT+0x1c8>)
 800045a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800045e:	4002      	ands	r2, r0
 8000460:	60da      	str	r2, [r3, #12]
 8000462:	e065      	b.n	8000530 <F1_GPIO_Pin_Setup_INPUT+0x1bc>
	}
    }
    else
    {
	uint8_t location_mode = ((pin-8)*4);
 8000464:	79bb      	ldrb	r3, [r7, #6]
 8000466:	3b08      	subs	r3, #8
 8000468:	b2db      	uxtb	r3, r3
 800046a:	009b      	lsls	r3, r3, #2
 800046c:	73fb      	strb	r3, [r7, #15]
	uint8_t location_cnf = ((pin-8)*4)+2;
 800046e:	79bb      	ldrb	r3, [r7, #6]
 8000470:	3b08      	subs	r3, #8
 8000472:	b2db      	uxtb	r3, r3
 8000474:	009b      	lsls	r3, r3, #2
 8000476:	b2db      	uxtb	r3, r3
 8000478:	3302      	adds	r3, #2
 800047a:	73bb      	strb	r3, [r7, #14]
	_F1_GPIO_Port_Lists[port]->CRH &= ~(0x3 << location_mode);	// Clear the mode for Input
 800047c:	79fb      	ldrb	r3, [r7, #7]
 800047e:	4a2f      	ldr	r2, [pc, #188]	; (800053c <F1_GPIO_Pin_Setup_INPUT+0x1c8>)
 8000480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000484:	685a      	ldr	r2, [r3, #4]
 8000486:	7bfb      	ldrb	r3, [r7, #15]
 8000488:	2103      	movs	r1, #3
 800048a:	fa01 f303 	lsl.w	r3, r1, r3
 800048e:	43db      	mvns	r3, r3
 8000490:	4618      	mov	r0, r3
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	4929      	ldr	r1, [pc, #164]	; (800053c <F1_GPIO_Pin_Setup_INPUT+0x1c8>)
 8000496:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800049a:	4002      	ands	r2, r0
 800049c:	605a      	str	r2, [r3, #4]

	_F1_GPIO_Port_Lists[port]->CRH &= ~(0x3 << location_cnf);
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	4a26      	ldr	r2, [pc, #152]	; (800053c <F1_GPIO_Pin_Setup_INPUT+0x1c8>)
 80004a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004a6:	685a      	ldr	r2, [r3, #4]
 80004a8:	7bbb      	ldrb	r3, [r7, #14]
 80004aa:	2103      	movs	r1, #3
 80004ac:	fa01 f303 	lsl.w	r3, r1, r3
 80004b0:	43db      	mvns	r3, r3
 80004b2:	4618      	mov	r0, r3
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	4921      	ldr	r1, [pc, #132]	; (800053c <F1_GPIO_Pin_Setup_INPUT+0x1c8>)
 80004b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80004bc:	4002      	ands	r2, r0
 80004be:	605a      	str	r2, [r3, #4]
	_F1_GPIO_Port_Lists[port]->CRH |= (conf << location_cnf);
 80004c0:	79fb      	ldrb	r3, [r7, #7]
 80004c2:	4a1e      	ldr	r2, [pc, #120]	; (800053c <F1_GPIO_Pin_Setup_INPUT+0x1c8>)
 80004c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004c8:	685a      	ldr	r2, [r3, #4]
 80004ca:	7979      	ldrb	r1, [r7, #5]
 80004cc:	7bbb      	ldrb	r3, [r7, #14]
 80004ce:	fa01 f303 	lsl.w	r3, r1, r3
 80004d2:	4618      	mov	r0, r3
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	4919      	ldr	r1, [pc, #100]	; (800053c <F1_GPIO_Pin_Setup_INPUT+0x1c8>)
 80004d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80004dc:	4302      	orrs	r2, r0
 80004de:	605a      	str	r2, [r3, #4]
	if(conf == GPIO_INPUT_PU)
 80004e0:	797b      	ldrb	r3, [r7, #5]
 80004e2:	2b02      	cmp	r3, #2
 80004e4:	d110      	bne.n	8000508 <F1_GPIO_Pin_Setup_INPUT+0x194>
	{
	    _F1_GPIO_Port_Lists[port]->ODR |= (1 << pin);		// Set the pin in ODR to enable pull-up
 80004e6:	79fb      	ldrb	r3, [r7, #7]
 80004e8:	4a14      	ldr	r2, [pc, #80]	; (800053c <F1_GPIO_Pin_Setup_INPUT+0x1c8>)
 80004ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004ee:	68da      	ldr	r2, [r3, #12]
 80004f0:	79bb      	ldrb	r3, [r7, #6]
 80004f2:	2101      	movs	r1, #1
 80004f4:	fa01 f303 	lsl.w	r3, r1, r3
 80004f8:	4618      	mov	r0, r3
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	490f      	ldr	r1, [pc, #60]	; (800053c <F1_GPIO_Pin_Setup_INPUT+0x1c8>)
 80004fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000502:	4302      	orrs	r2, r0
 8000504:	60da      	str	r2, [r3, #12]
 8000506:	e013      	b.n	8000530 <F1_GPIO_Pin_Setup_INPUT+0x1bc>
	}
	else if(conf == GPIO_INPUT_PD)
 8000508:	797b      	ldrb	r3, [r7, #5]
 800050a:	2b03      	cmp	r3, #3
 800050c:	d110      	bne.n	8000530 <F1_GPIO_Pin_Setup_INPUT+0x1bc>
	{
	    _F1_GPIO_Port_Lists[port]->ODR &= ~(1 << pin);		// Set the pin in ODR to enable pull-up
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	4a0a      	ldr	r2, [pc, #40]	; (800053c <F1_GPIO_Pin_Setup_INPUT+0x1c8>)
 8000512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000516:	68da      	ldr	r2, [r3, #12]
 8000518:	79bb      	ldrb	r3, [r7, #6]
 800051a:	2101      	movs	r1, #1
 800051c:	fa01 f303 	lsl.w	r3, r1, r3
 8000520:	43db      	mvns	r3, r3
 8000522:	4618      	mov	r0, r3
 8000524:	79fb      	ldrb	r3, [r7, #7]
 8000526:	4905      	ldr	r1, [pc, #20]	; (800053c <F1_GPIO_Pin_Setup_INPUT+0x1c8>)
 8000528:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800052c:	4002      	ands	r2, r0
 800052e:	60da      	str	r2, [r3, #12]
	}
    }
    return GPIO_OK;
 8000530:	2300      	movs	r3, #0
}
 8000532:	4618      	mov	r0, r3
 8000534:	3710      	adds	r7, #16
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	20000000 	.word	0x20000000

08000540 <F1_GPIO_Pin_Conf_EXTI>:

/*
 * Enable of disable the EXTI
 */
F1_gpio_status_t F1_GPIO_Pin_Conf_EXTI(F1_gpio_port_t port, F1_gpio_pin_t pin, F1_gpio_input_exti_t exti, F1_gpio_input_exti_trig_t edge)
{
 8000540:	b590      	push	{r4, r7, lr}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	4604      	mov	r4, r0
 8000548:	4608      	mov	r0, r1
 800054a:	4611      	mov	r1, r2
 800054c:	461a      	mov	r2, r3
 800054e:	4623      	mov	r3, r4
 8000550:	71fb      	strb	r3, [r7, #7]
 8000552:	4603      	mov	r3, r0
 8000554:	71bb      	strb	r3, [r7, #6]
 8000556:	460b      	mov	r3, r1
 8000558:	717b      	strb	r3, [r7, #5]
 800055a:	4613      	mov	r3, r2
 800055c:	713b      	strb	r3, [r7, #4]
    RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;		// Enable the AF clock
 800055e:	4b2b      	ldr	r3, [pc, #172]	; (800060c <F1_GPIO_Pin_Conf_EXTI+0xcc>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	4a2a      	ldr	r2, [pc, #168]	; (800060c <F1_GPIO_Pin_Conf_EXTI+0xcc>)
 8000564:	f043 0301 	orr.w	r3, r3, #1
 8000568:	6193      	str	r3, [r2, #24]
    AFIO->EXTICR[pin >> 2] |= (port << (pin*4));	// Enable the pin on EXTI0
 800056a:	4a29      	ldr	r2, [pc, #164]	; (8000610 <F1_GPIO_Pin_Conf_EXTI+0xd0>)
 800056c:	79bb      	ldrb	r3, [r7, #6]
 800056e:	089b      	lsrs	r3, r3, #2
 8000570:	b2db      	uxtb	r3, r3
 8000572:	3302      	adds	r3, #2
 8000574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000578:	79f9      	ldrb	r1, [r7, #7]
 800057a:	79ba      	ldrb	r2, [r7, #6]
 800057c:	0092      	lsls	r2, r2, #2
 800057e:	fa01 f202 	lsl.w	r2, r1, r2
 8000582:	4614      	mov	r4, r2
 8000584:	4922      	ldr	r1, [pc, #136]	; (8000610 <F1_GPIO_Pin_Conf_EXTI+0xd0>)
 8000586:	79ba      	ldrb	r2, [r7, #6]
 8000588:	0892      	lsrs	r2, r2, #2
 800058a:	b2d2      	uxtb	r2, r2
 800058c:	4610      	mov	r0, r2
 800058e:	ea43 0204 	orr.w	r2, r3, r4
 8000592:	1c83      	adds	r3, r0, #2
 8000594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    if(exti == GPIO_INPUT_EXTI_EN)
 8000598:	797b      	ldrb	r3, [r7, #5]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d124      	bne.n	80005e8 <F1_GPIO_Pin_Conf_EXTI+0xa8>
    {
	EXTI->IMR |= (1 << pin);	// Enable the interrupt on this pin
 800059e:	4b1d      	ldr	r3, [pc, #116]	; (8000614 <F1_GPIO_Pin_Conf_EXTI+0xd4>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	79ba      	ldrb	r2, [r7, #6]
 80005a4:	2101      	movs	r1, #1
 80005a6:	fa01 f202 	lsl.w	r2, r1, r2
 80005aa:	4611      	mov	r1, r2
 80005ac:	4a19      	ldr	r2, [pc, #100]	; (8000614 <F1_GPIO_Pin_Conf_EXTI+0xd4>)
 80005ae:	430b      	orrs	r3, r1
 80005b0:	6013      	str	r3, [r2, #0]
	if(edge == GPIO_INPUT_EXTI_TRIG_RISNG)
 80005b2:	793b      	ldrb	r3, [r7, #4]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d10a      	bne.n	80005ce <F1_GPIO_Pin_Conf_EXTI+0x8e>
	{
	    EXTI->RTSR |= (1 << pin);
 80005b8:	4b16      	ldr	r3, [pc, #88]	; (8000614 <F1_GPIO_Pin_Conf_EXTI+0xd4>)
 80005ba:	689b      	ldr	r3, [r3, #8]
 80005bc:	79ba      	ldrb	r2, [r7, #6]
 80005be:	2101      	movs	r1, #1
 80005c0:	fa01 f202 	lsl.w	r2, r1, r2
 80005c4:	4611      	mov	r1, r2
 80005c6:	4a13      	ldr	r2, [pc, #76]	; (8000614 <F1_GPIO_Pin_Conf_EXTI+0xd4>)
 80005c8:	430b      	orrs	r3, r1
 80005ca:	6093      	str	r3, [r2, #8]
 80005cc:	e00c      	b.n	80005e8 <F1_GPIO_Pin_Conf_EXTI+0xa8>
	}
	else if(edge == GPIO_INPUT_EXTI_TRIG_FALL)
 80005ce:	793b      	ldrb	r3, [r7, #4]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d109      	bne.n	80005e8 <F1_GPIO_Pin_Conf_EXTI+0xa8>
	{
	    EXTI->FTSR |= (1 << pin);
 80005d4:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <F1_GPIO_Pin_Conf_EXTI+0xd4>)
 80005d6:	68db      	ldr	r3, [r3, #12]
 80005d8:	79ba      	ldrb	r2, [r7, #6]
 80005da:	2101      	movs	r1, #1
 80005dc:	fa01 f202 	lsl.w	r2, r1, r2
 80005e0:	4611      	mov	r1, r2
 80005e2:	4a0c      	ldr	r2, [pc, #48]	; (8000614 <F1_GPIO_Pin_Conf_EXTI+0xd4>)
 80005e4:	430b      	orrs	r3, r1
 80005e6:	60d3      	str	r3, [r2, #12]
	}
    }

    NVIC_EnableIRQ(_F1_Exti_lines[pin]);
 80005e8:	79bb      	ldrb	r3, [r7, #6]
 80005ea:	4a0b      	ldr	r2, [pc, #44]	; (8000618 <F1_GPIO_Pin_Conf_EXTI+0xd8>)
 80005ec:	56d3      	ldrsb	r3, [r2, r3]
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff fdbe 	bl	8000170 <__NVIC_EnableIRQ>
    NVIC_SetPriority(_F1_Exti_lines[pin], 2);
 80005f4:	79bb      	ldrb	r3, [r7, #6]
 80005f6:	4a08      	ldr	r2, [pc, #32]	; (8000618 <F1_GPIO_Pin_Conf_EXTI+0xd8>)
 80005f8:	56d3      	ldrsb	r3, [r2, r3]
 80005fa:	2102      	movs	r1, #2
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff fdd3 	bl	80001a8 <__NVIC_SetPriority>
    return GPIO_OK;
 8000602:	2300      	movs	r3, #0
}
 8000604:	4618      	mov	r0, r3
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	bd90      	pop	{r4, r7, pc}
 800060c:	40021000 	.word	0x40021000
 8000610:	40010000 	.word	0x40010000
 8000614:	40010400 	.word	0x40010400
 8000618:	20000014 	.word	0x20000014

0800061c <F1_GPIO_Clock_Enable>:

/*
 * Enable the clock of the GPIO peripheral
 */
F1_gpio_status_t F1_GPIO_Clock_Enable(F1_gpio_port_t port)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
    switch(port)
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	2b04      	cmp	r3, #4
 800062a:	d830      	bhi.n	800068e <F1_GPIO_Clock_Enable+0x72>
 800062c:	a201      	add	r2, pc, #4	; (adr r2, 8000634 <F1_GPIO_Clock_Enable+0x18>)
 800062e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000632:	bf00      	nop
 8000634:	08000649 	.word	0x08000649
 8000638:	08000657 	.word	0x08000657
 800063c:	08000665 	.word	0x08000665
 8000640:	08000673 	.word	0x08000673
 8000644:	08000681 	.word	0x08000681
    {
	case GPIO_PORT_A:
	    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;		// Enable the peripheral clock
 8000648:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <F1_GPIO_Clock_Enable+0x84>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	4a14      	ldr	r2, [pc, #80]	; (80006a0 <F1_GPIO_Clock_Enable+0x84>)
 800064e:	f043 0304 	orr.w	r3, r3, #4
 8000652:	6193      	str	r3, [r2, #24]
	    break;
 8000654:	e01d      	b.n	8000692 <F1_GPIO_Clock_Enable+0x76>
	case GPIO_PORT_B:
	    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;		// Enable the peripheral clock
 8000656:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <F1_GPIO_Clock_Enable+0x84>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	4a11      	ldr	r2, [pc, #68]	; (80006a0 <F1_GPIO_Clock_Enable+0x84>)
 800065c:	f043 0308 	orr.w	r3, r3, #8
 8000660:	6193      	str	r3, [r2, #24]
	    break;
 8000662:	e016      	b.n	8000692 <F1_GPIO_Clock_Enable+0x76>
	case GPIO_PORT_C:
	    RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;		// Enable the peripheral clock
 8000664:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <F1_GPIO_Clock_Enable+0x84>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	4a0d      	ldr	r2, [pc, #52]	; (80006a0 <F1_GPIO_Clock_Enable+0x84>)
 800066a:	f043 0310 	orr.w	r3, r3, #16
 800066e:	6193      	str	r3, [r2, #24]
	    break;
 8000670:	e00f      	b.n	8000692 <F1_GPIO_Clock_Enable+0x76>
	case GPIO_PORT_D:
	    RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;		// Enable the peripheral clock
 8000672:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <F1_GPIO_Clock_Enable+0x84>)
 8000674:	699b      	ldr	r3, [r3, #24]
 8000676:	4a0a      	ldr	r2, [pc, #40]	; (80006a0 <F1_GPIO_Clock_Enable+0x84>)
 8000678:	f043 0320 	orr.w	r3, r3, #32
 800067c:	6193      	str	r3, [r2, #24]
	    break;
 800067e:	e008      	b.n	8000692 <F1_GPIO_Clock_Enable+0x76>
	case GPIO_PORT_E:
	    RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;		// Enable the peripheral clock
 8000680:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <F1_GPIO_Clock_Enable+0x84>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a06      	ldr	r2, [pc, #24]	; (80006a0 <F1_GPIO_Clock_Enable+0x84>)
 8000686:	f043 0320 	orr.w	r3, r3, #32
 800068a:	6193      	str	r3, [r2, #24]
	    break;
 800068c:	e001      	b.n	8000692 <F1_GPIO_Clock_Enable+0x76>
	default:
	    return GPIO_FAIL;
 800068e:	2301      	movs	r3, #1
 8000690:	e000      	b.n	8000694 <F1_GPIO_Clock_Enable+0x78>
	    break;
    }
    return GPIO_OK;
 8000692:	2300      	movs	r3, #0
}
 8000694:	4618      	mov	r0, r3
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	40021000 	.word	0x40021000

080006a4 <F1_GPIO_Pin_Toggle>:

/*
 * Toggle the GPIO pin
 */
void F1_GPIO_Pin_Toggle(F1_gpio_port_t port, F1_gpio_pin_t pin)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	460a      	mov	r2, r1
 80006ae:	71fb      	strb	r3, [r7, #7]
 80006b0:	4613      	mov	r3, r2
 80006b2:	71bb      	strb	r3, [r7, #6]
    /* Check the status of the pin (high or low) */
    if(_F1_GPIO_Port_Lists[port]->ODR & (1 << pin))
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	4a0e      	ldr	r2, [pc, #56]	; (80006f0 <F1_GPIO_Pin_Toggle+0x4c>)
 80006b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006bc:	68db      	ldr	r3, [r3, #12]
 80006be:	79ba      	ldrb	r2, [r7, #6]
 80006c0:	2101      	movs	r1, #1
 80006c2:	fa01 f202 	lsl.w	r2, r1, r2
 80006c6:	4013      	ands	r3, r2
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d006      	beq.n	80006da <F1_GPIO_Pin_Toggle+0x36>
    {
	/* Pin is high, reset it */
	F1_GPIO_Pin_Reset(port, pin);
 80006cc:	79ba      	ldrb	r2, [r7, #6]
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	4611      	mov	r1, r2
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 f82e 	bl	8000734 <F1_GPIO_Pin_Reset>
    else
    {
	/* Pin is low, set it */
	F1_GPIO_Pin_Set(port, pin);
    }
}
 80006d8:	e005      	b.n	80006e6 <F1_GPIO_Pin_Toggle+0x42>
	F1_GPIO_Pin_Set(port, pin);
 80006da:	79ba      	ldrb	r2, [r7, #6]
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	4611      	mov	r1, r2
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 f807 	bl	80006f4 <F1_GPIO_Pin_Set>
}
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000000 	.word	0x20000000

080006f4 <F1_GPIO_Pin_Set>:

/*
 * Sets the pin
 */
void F1_GPIO_Pin_Set(F1_gpio_port_t port, F1_gpio_pin_t pin)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	460a      	mov	r2, r1
 80006fe:	71fb      	strb	r3, [r7, #7]
 8000700:	4613      	mov	r3, r2
 8000702:	71bb      	strb	r3, [r7, #6]
    /* Set the pin to high */
    _F1_GPIO_Port_Lists[port]->BSRR |= (1 << pin);
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	4a0a      	ldr	r2, [pc, #40]	; (8000730 <F1_GPIO_Pin_Set+0x3c>)
 8000708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800070c:	691a      	ldr	r2, [r3, #16]
 800070e:	79bb      	ldrb	r3, [r7, #6]
 8000710:	2101      	movs	r1, #1
 8000712:	fa01 f303 	lsl.w	r3, r1, r3
 8000716:	4618      	mov	r0, r3
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	4905      	ldr	r1, [pc, #20]	; (8000730 <F1_GPIO_Pin_Set+0x3c>)
 800071c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000720:	4302      	orrs	r2, r0
 8000722:	611a      	str	r2, [r3, #16]
}
 8000724:	bf00      	nop
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	bc80      	pop	{r7}
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	20000000 	.word	0x20000000

08000734 <F1_GPIO_Pin_Reset>:

/*
 * Resets the pin
 */
void F1_GPIO_Pin_Reset(F1_gpio_port_t port, F1_gpio_pin_t pin)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	460a      	mov	r2, r1
 800073e:	71fb      	strb	r3, [r7, #7]
 8000740:	4613      	mov	r3, r2
 8000742:	71bb      	strb	r3, [r7, #6]
    /* Reset the pin to low */
    _F1_GPIO_Port_Lists[port]->BSRR |= (1 << (16+pin));
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	4a0a      	ldr	r2, [pc, #40]	; (8000770 <F1_GPIO_Pin_Reset+0x3c>)
 8000748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800074c:	691a      	ldr	r2, [r3, #16]
 800074e:	79bb      	ldrb	r3, [r7, #6]
 8000750:	3310      	adds	r3, #16
 8000752:	2101      	movs	r1, #1
 8000754:	fa01 f303 	lsl.w	r3, r1, r3
 8000758:	4618      	mov	r0, r3
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	4904      	ldr	r1, [pc, #16]	; (8000770 <F1_GPIO_Pin_Reset+0x3c>)
 800075e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000762:	4302      	orrs	r2, r0
 8000764:	611a      	str	r2, [r3, #16]
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr
 8000770:	20000000 	.word	0x20000000

08000774 <EXTI0_IRQHandler>:

#define myButtonPort	GPIO_PORT_B
#define myButtonPin	GPIO_PIN_0

void EXTI0_IRQHandler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
    EXTI->PR |= (1 << myButtonPin);
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <EXTI0_IRQHandler+0x1c>)
 800077a:	695b      	ldr	r3, [r3, #20]
 800077c:	4a04      	ldr	r2, [pc, #16]	; (8000790 <EXTI0_IRQHandler+0x1c>)
 800077e:	f043 0301 	orr.w	r3, r3, #1
 8000782:	6153      	str	r3, [r2, #20]
    F1_GPIO_Pin_Toggle(GPIO_PORT_C, GPIO_PIN_13);
 8000784:	210d      	movs	r1, #13
 8000786:	2002      	movs	r0, #2
 8000788:	f7ff ff8c 	bl	80006a4 <F1_GPIO_Pin_Toggle>
}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40010400 	.word	0x40010400

08000794 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
    if(USART1->SR &= USART_SR_RXNE)
 800079a:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <USART1_IRQHandler+0x30>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a09      	ldr	r2, [pc, #36]	; (80007c4 <USART1_IRQHandler+0x30>)
 80007a0:	f003 0320 	and.w	r3, r3, #32
 80007a4:	6013      	str	r3, [r2, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d007      	beq.n	80007ba <USART1_IRQHandler+0x26>
    {
	char rec_data = USART1->DR;
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <USART1_IRQHandler+0x30>)
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	71fb      	strb	r3, [r7, #7]
	F1_UART_send_char(UART_1, rec_data);
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	4619      	mov	r1, r3
 80007b4:	2000      	movs	r0, #0
 80007b6:	f000 fafd 	bl	8000db4 <F1_UART_send_char>
    }
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40013800 	.word	0x40013800

080007c8 <main>:



int main(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	; 0x28
 80007cc:	af00      	add	r7, sp, #0
    F1_System_Init(HSE_72MHZ, SYSTICK_1KHZ);
 80007ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007d2:	2001      	movs	r0, #1
 80007d4:	f000 f8a0 	bl	8000918 <F1_System_Init>
    F1_GPIO_Pin_Setup_OUT(myLEDport, myLEDpin, GPIO_OUTPUT_10MHZ, GPIO_OUTPUT_PP);
 80007d8:	2300      	movs	r3, #0
 80007da:	2201      	movs	r2, #1
 80007dc:	210d      	movs	r1, #13
 80007de:	2002      	movs	r0, #2
 80007e0:	f7ff fd0c 	bl	80001fc <F1_GPIO_Pin_Setup_OUT>
    F1_GPIO_Pin_Setup_INPUT(myButtonPort, myButtonPin, GPIO_INPUT_PU);
 80007e4:	2202      	movs	r2, #2
 80007e6:	2100      	movs	r1, #0
 80007e8:	2001      	movs	r0, #1
 80007ea:	f7ff fdc3 	bl	8000374 <F1_GPIO_Pin_Setup_INPUT>
    F1_GPIO_Pin_Conf_EXTI(myButtonPort, myButtonPin, GPIO_INPUT_EXTI_EN, GPIO_INPUT_EXTI_TRIG_FALL);
 80007ee:	2300      	movs	r3, #0
 80007f0:	2201      	movs	r2, #1
 80007f2:	2100      	movs	r1, #0
 80007f4:	2001      	movs	r0, #1
 80007f6:	f7ff fea3 	bl	8000540 <F1_GPIO_Pin_Conf_EXTI>
    F1_UART_Init(UART_3, UART_BAUD_115200, UART3_TX_PB10_RX_PB11);
 80007fa:	2203      	movs	r2, #3
 80007fc:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000800:	2002      	movs	r0, #2
 8000802:	f000 f9ed 	bl	8000be0 <F1_UART_Init>

    char buff[30] = {'\0'};
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	f107 0308 	add.w	r3, r7, #8
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]
 800081a:	615a      	str	r2, [r3, #20]
 800081c:	831a      	strh	r2, [r3, #24]
    int t = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
    while(1)
    {
	sprintf(buff, "%d Val\n\r", t);
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000826:	490a      	ldr	r1, [pc, #40]	; (8000850 <main+0x88>)
 8000828:	4618      	mov	r0, r3
 800082a:	f000 fb51 	bl	8000ed0 <siprintf>
	t+=1;
 800082e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000830:	3301      	adds	r3, #1
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
	F1_UART_send_string(UART_3, buff);
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	4619      	mov	r1, r3
 8000838:	2002      	movs	r0, #2
 800083a:	f000 fadb 	bl	8000df4 <F1_UART_send_string>
	F1_GPIO_Pin_Toggle(GPIO_PORT_C, GPIO_PIN_13);
 800083e:	210d      	movs	r1, #13
 8000840:	2002      	movs	r0, #2
 8000842:	f7ff ff2f 	bl	80006a4 <F1_GPIO_Pin_Toggle>
	F1_delay_ms(1000);
 8000846:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800084a:	f000 f93f 	bl	8000acc <F1_delay_ms>
	sprintf(buff, "%d Val\n\r", t);
 800084e:	e7e8      	b.n	8000822 <main+0x5a>
 8000850:	080017dc 	.word	0x080017dc

08000854 <__NVIC_SetPriority>:
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	6039      	str	r1, [r7, #0]
 800085e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000864:	2b00      	cmp	r3, #0
 8000866:	db0a      	blt.n	800087e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	b2da      	uxtb	r2, r3
 800086c:	490c      	ldr	r1, [pc, #48]	; (80008a0 <__NVIC_SetPriority+0x4c>)
 800086e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000872:	0112      	lsls	r2, r2, #4
 8000874:	b2d2      	uxtb	r2, r2
 8000876:	440b      	add	r3, r1
 8000878:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800087c:	e00a      	b.n	8000894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	b2da      	uxtb	r2, r3
 8000882:	4908      	ldr	r1, [pc, #32]	; (80008a4 <__NVIC_SetPriority+0x50>)
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	f003 030f 	and.w	r3, r3, #15
 800088a:	3b04      	subs	r3, #4
 800088c:	0112      	lsls	r2, r2, #4
 800088e:	b2d2      	uxtb	r2, r2
 8000890:	440b      	add	r3, r1
 8000892:	761a      	strb	r2, [r3, #24]
}
 8000894:	bf00      	nop
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	e000e100 	.word	0xe000e100
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	3b01      	subs	r3, #1
 80008b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008b8:	d301      	bcc.n	80008be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ba:	2301      	movs	r3, #1
 80008bc:	e00f      	b.n	80008de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <SysTick_Config+0x40>)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008c6:	210f      	movs	r1, #15
 80008c8:	f04f 30ff 	mov.w	r0, #4294967295
 80008cc:	f7ff ffc2 	bl	8000854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008d0:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <SysTick_Config+0x40>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008d6:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <SysTick_Config+0x40>)
 80008d8:	2207      	movs	r2, #7
 80008da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008dc:	2300      	movs	r3, #0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	e000e010 	.word	0xe000e010

080008ec <SysTick_Handler>:

/*
 * ISR for the Systick timer
 */
void SysTick_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
    if(Systic_delay_counter > 0xFFFFFFF0)
 80008f0:	4b08      	ldr	r3, [pc, #32]	; (8000914 <SysTick_Handler+0x28>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f113 0f10 	cmn.w	r3, #16
 80008f8:	d903      	bls.n	8000902 <SysTick_Handler+0x16>
    {
	Systic_delay_counter = 0;
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <SysTick_Handler+0x28>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
    }
    else
    {
	Systic_delay_counter += 1;
    }
}
 8000900:	e004      	b.n	800090c <SysTick_Handler+0x20>
	Systic_delay_counter += 1;
 8000902:	4b04      	ldr	r3, [pc, #16]	; (8000914 <SysTick_Handler+0x28>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	3301      	adds	r3, #1
 8000908:	4a02      	ldr	r2, [pc, #8]	; (8000914 <SysTick_Handler+0x28>)
 800090a:	6013      	str	r3, [r2, #0]
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr
 8000914:	200000c0 	.word	0x200000c0

08000918 <F1_System_Init>:

/*
 * Initialize the MCU and the RCC
 */
F1_rcc_stat_t F1_System_Init(F1_clock_sel_t clock_freq, F1_systick_sel_t systick_freq)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	6039      	str	r1, [r7, #0]
 8000922:	71fb      	strb	r3, [r7, #7]
    /* 8MHz internal HSI selected */
    if(clock_freq == HSI_64MHZ)
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d158      	bne.n	80009dc <F1_System_Init+0xc4>
    {
	rccConfig.clock_freq = 64000000;
 800092a:	4b61      	ldr	r3, [pc, #388]	; (8000ab0 <F1_System_Init+0x198>)
 800092c:	4a61      	ldr	r2, [pc, #388]	; (8000ab4 <F1_System_Init+0x19c>)
 800092e:	601a      	str	r2, [r3, #0]
	/* Internal 8MHz clock selected */
	RCC->CR |= RCC_CR_HSION;			//Enable the HSI 8MHz clock
 8000930:	4b61      	ldr	r3, [pc, #388]	; (8000ab8 <F1_System_Init+0x1a0>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a60      	ldr	r2, [pc, #384]	; (8000ab8 <F1_System_Init+0x1a0>)
 8000936:	f043 0301 	orr.w	r3, r3, #1
 800093a:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSIRDY) == 0);		//Wait for the clock to become ready
 800093c:	bf00      	nop
 800093e:	4b5e      	ldr	r3, [pc, #376]	; (8000ab8 <F1_System_Init+0x1a0>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	2b00      	cmp	r3, #0
 8000948:	d0f9      	beq.n	800093e <F1_System_Init+0x26>

	/* Enable the power IF clock */
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800094a:	4b5b      	ldr	r3, [pc, #364]	; (8000ab8 <F1_System_Init+0x1a0>)
 800094c:	69db      	ldr	r3, [r3, #28]
 800094e:	4a5a      	ldr	r2, [pc, #360]	; (8000ab8 <F1_System_Init+0x1a0>)
 8000950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000954:	61d3      	str	r3, [r2, #28]

	/* Configure the Flash Access Control */
	FLASH->ACR |= FLASH_ACR_PRFTBE;			// Enable the pre-fecth buffer
 8000956:	4b59      	ldr	r3, [pc, #356]	; (8000abc <F1_System_Init+0x1a4>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a58      	ldr	r2, [pc, #352]	; (8000abc <F1_System_Init+0x1a4>)
 800095c:	f043 0310 	orr.w	r3, r3, #16
 8000960:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_1;		// Set the latency to two wait states (required at this frequency)
 8000962:	4b56      	ldr	r3, [pc, #344]	; (8000abc <F1_System_Init+0x1a4>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a55      	ldr	r2, [pc, #340]	; (8000abc <F1_System_Init+0x1a4>)
 8000968:	f043 0302 	orr.w	r3, r3, #2
 800096c:	6013      	str	r3, [r2, #0]

	/* Configure the PLL */
	RCC->CFGR &= ~(RCC_CFGR_PLLSRC);		// Set the PLL source as the HSI/2
 800096e:	4b52      	ldr	r3, [pc, #328]	; (8000ab8 <F1_System_Init+0x1a0>)
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	4a51      	ldr	r2, [pc, #324]	; (8000ab8 <F1_System_Init+0x1a0>)
 8000974:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000978:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PPRE1_2;			// Set the APB2 to /2 for a 64MHz/2 (32MHz) clock (36MHz is max)
 800097a:	4b4f      	ldr	r3, [pc, #316]	; (8000ab8 <F1_System_Init+0x1a0>)
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	4a4e      	ldr	r2, [pc, #312]	; (8000ab8 <F1_System_Init+0x1a0>)
 8000980:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000984:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLMULL16;
 8000986:	4b4c      	ldr	r3, [pc, #304]	; (8000ab8 <F1_System_Init+0x1a0>)
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	4a4b      	ldr	r2, [pc, #300]	; (8000ab8 <F1_System_Init+0x1a0>)
 800098c:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8000990:	6053      	str	r3, [r2, #4]
	RCC->CR |= RCC_CR_PLLON;			// Enable the PLL
 8000992:	4b49      	ldr	r3, [pc, #292]	; (8000ab8 <F1_System_Init+0x1a0>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a48      	ldr	r2, [pc, #288]	; (8000ab8 <F1_System_Init+0x1a0>)
 8000998:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800099c:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);		// Wait for the PLL to become ready
 800099e:	bf00      	nop
 80009a0:	4b45      	ldr	r3, [pc, #276]	; (8000ab8 <F1_System_Init+0x1a0>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d0f9      	beq.n	80009a0 <F1_System_Init+0x88>

	/* Set the PLL as the system clock */
	RCC->CFGR |= RCC_CFGR_SW_PLL;			// Set the PLL as the system clock
 80009ac:	4b42      	ldr	r3, [pc, #264]	; (8000ab8 <F1_System_Init+0x1a0>)
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	4a41      	ldr	r2, [pc, #260]	; (8000ab8 <F1_System_Init+0x1a0>)
 80009b2:	f043 0302 	orr.w	r3, r3, #2
 80009b6:	6053      	str	r3, [r2, #4]

	/* Enable the Systick Timer */
	uint32_t systick_clock = 64000000 / systick_freq;
 80009b8:	4a3e      	ldr	r2, [pc, #248]	; (8000ab4 <F1_System_Init+0x19c>)
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c0:	60bb      	str	r3, [r7, #8]
	SysTick_Config(systick_clock);
 80009c2:	68b8      	ldr	r0, [r7, #8]
 80009c4:	f7ff ff70 	bl	80008a8 <SysTick_Config>

	rccConfig.systick_freq = systick_freq;
 80009c8:	4a39      	ldr	r2, [pc, #228]	; (8000ab0 <F1_System_Init+0x198>)
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	6053      	str	r3, [r2, #4]
	rccConfig.APB1_freq = 32000000;
 80009ce:	4b38      	ldr	r3, [pc, #224]	; (8000ab0 <F1_System_Init+0x198>)
 80009d0:	4a3b      	ldr	r2, [pc, #236]	; (8000ac0 <F1_System_Init+0x1a8>)
 80009d2:	609a      	str	r2, [r3, #8]
	rccConfig.APB2_freq = 64000000;
 80009d4:	4b36      	ldr	r3, [pc, #216]	; (8000ab0 <F1_System_Init+0x198>)
 80009d6:	4a37      	ldr	r2, [pc, #220]	; (8000ab4 <F1_System_Init+0x19c>)
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	e063      	b.n	8000aa4 <F1_System_Init+0x18c>
    }

    /* HSE selected */
    else if(clock_freq == HSE_72MHZ)
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d15e      	bne.n	8000aa0 <F1_System_Init+0x188>
    {
	/* External 8MHz clock selected */
	rccConfig.clock_freq = 72000000;
 80009e2:	4b33      	ldr	r3, [pc, #204]	; (8000ab0 <F1_System_Init+0x198>)
 80009e4:	4a37      	ldr	r2, [pc, #220]	; (8000ac4 <F1_System_Init+0x1ac>)
 80009e6:	601a      	str	r2, [r3, #0]
	/* Internal 8MHz clock selected */
	RCC->CR &= ~(RCC_CR_HSEBYP);			// Crystal mode (bypass is if only the CLKIN pin is used). See page 94 of FRM
 80009e8:	4b33      	ldr	r3, [pc, #204]	; (8000ab8 <F1_System_Init+0x1a0>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a32      	ldr	r2, [pc, #200]	; (8000ab8 <F1_System_Init+0x1a0>)
 80009ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009f2:	6013      	str	r3, [r2, #0]
	RCC->CR |= RCC_CR_HSEON;			// Enable the HSE
 80009f4:	4b30      	ldr	r3, [pc, #192]	; (8000ab8 <F1_System_Init+0x1a0>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a2f      	ldr	r2, [pc, #188]	; (8000ab8 <F1_System_Init+0x1a0>)
 80009fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009fe:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSERDY) == 0);		//Wait for the clock to become ready
 8000a00:	bf00      	nop
 8000a02:	4b2d      	ldr	r3, [pc, #180]	; (8000ab8 <F1_System_Init+0x1a0>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d0f9      	beq.n	8000a02 <F1_System_Init+0xea>

	/* Enable the power IF clock */
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000a0e:	4b2a      	ldr	r3, [pc, #168]	; (8000ab8 <F1_System_Init+0x1a0>)
 8000a10:	69db      	ldr	r3, [r3, #28]
 8000a12:	4a29      	ldr	r2, [pc, #164]	; (8000ab8 <F1_System_Init+0x1a0>)
 8000a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a18:	61d3      	str	r3, [r2, #28]

	/* Configure the Flash Access Control */
	FLASH->ACR |= FLASH_ACR_PRFTBE;			// Enable the pre-fecth buffer
 8000a1a:	4b28      	ldr	r3, [pc, #160]	; (8000abc <F1_System_Init+0x1a4>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a27      	ldr	r2, [pc, #156]	; (8000abc <F1_System_Init+0x1a4>)
 8000a20:	f043 0310 	orr.w	r3, r3, #16
 8000a24:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_1;		// Set the latency to two wait states (required at this frequency)
 8000a26:	4b25      	ldr	r3, [pc, #148]	; (8000abc <F1_System_Init+0x1a4>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a24      	ldr	r2, [pc, #144]	; (8000abc <F1_System_Init+0x1a4>)
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	6013      	str	r3, [r2, #0]

	/* Configure the PLL */
	RCC->CFGR |= RCC_CFGR_PLLSRC;			// Set the PLL source as the HSE
 8000a32:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <F1_System_Init+0x1a0>)
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	4a20      	ldr	r2, [pc, #128]	; (8000ab8 <F1_System_Init+0x1a0>)
 8000a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a3c:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PPRE1_2;			// Set the APB2 to /2 for a 72MHz/2 (36MHz) clock (36MHz is max)
 8000a3e:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <F1_System_Init+0x1a0>)
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	4a1d      	ldr	r2, [pc, #116]	; (8000ab8 <F1_System_Init+0x1a0>)
 8000a44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a48:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLMULL9;
 8000a4a:	4b1b      	ldr	r3, [pc, #108]	; (8000ab8 <F1_System_Init+0x1a0>)
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	4a1a      	ldr	r2, [pc, #104]	; (8000ab8 <F1_System_Init+0x1a0>)
 8000a50:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8000a54:	6053      	str	r3, [r2, #4]
	RCC->CR |= RCC_CR_PLLON;			// Enable the PLL
 8000a56:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <F1_System_Init+0x1a0>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a17      	ldr	r2, [pc, #92]	; (8000ab8 <F1_System_Init+0x1a0>)
 8000a5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a60:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);		// Wait for the PLL to become ready
 8000a62:	bf00      	nop
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <F1_System_Init+0x1a0>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0f9      	beq.n	8000a64 <F1_System_Init+0x14c>

	/* Set the PLL as the system clock */
	RCC->CFGR |= RCC_CFGR_SW_PLL;			// Set the PLL as the system clock
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <F1_System_Init+0x1a0>)
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	4a10      	ldr	r2, [pc, #64]	; (8000ab8 <F1_System_Init+0x1a0>)
 8000a76:	f043 0302 	orr.w	r3, r3, #2
 8000a7a:	6053      	str	r3, [r2, #4]

	/* Enable the Systick Timer */
	uint32_t systick_clock = 72000000 / systick_freq;
 8000a7c:	4a11      	ldr	r2, [pc, #68]	; (8000ac4 <F1_System_Init+0x1ac>)
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a84:	60fb      	str	r3, [r7, #12]
	SysTick_Config(systick_clock);
 8000a86:	68f8      	ldr	r0, [r7, #12]
 8000a88:	f7ff ff0e 	bl	80008a8 <SysTick_Config>

	rccConfig.systick_freq = systick_freq;
 8000a8c:	4a08      	ldr	r2, [pc, #32]	; (8000ab0 <F1_System_Init+0x198>)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	6053      	str	r3, [r2, #4]
	rccConfig.APB1_freq = 36000000;
 8000a92:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <F1_System_Init+0x198>)
 8000a94:	4a0c      	ldr	r2, [pc, #48]	; (8000ac8 <F1_System_Init+0x1b0>)
 8000a96:	609a      	str	r2, [r3, #8]
	rccConfig.APB2_freq = 72000000;
 8000a98:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <F1_System_Init+0x198>)
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <F1_System_Init+0x1ac>)
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	e001      	b.n	8000aa4 <F1_System_Init+0x18c>
    }
    else
    {
	/* Not a valid clock frequency */
	return RCC_FAIL;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	e000      	b.n	8000aa6 <F1_System_Init+0x18e>
    }
    return RCC_OK;
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000024 	.word	0x20000024
 8000ab4:	03d09000 	.word	0x03d09000
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	40022000 	.word	0x40022000
 8000ac0:	01e84800 	.word	0x01e84800
 8000ac4:	044aa200 	.word	0x044aa200
 8000ac8:	02255100 	.word	0x02255100

08000acc <F1_delay_ms>:

/*
 * Delay in milliseconds
 */
void F1_delay_ms(uint16_t ms)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	80fb      	strh	r3, [r7, #6]
    uint32_t counts_needed = (ms * rccConfig.systick_freq)/1000;
 8000ad6:	88fb      	ldrh	r3, [r7, #6]
 8000ad8:	4a0b      	ldr	r2, [pc, #44]	; (8000b08 <F1_delay_ms+0x3c>)
 8000ada:	6852      	ldr	r2, [r2, #4]
 8000adc:	fb02 f303 	mul.w	r3, r2, r3
 8000ae0:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <F1_delay_ms+0x40>)
 8000ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae6:	099b      	lsrs	r3, r3, #6
 8000ae8:	60fb      	str	r3, [r7, #12]
    Systic_delay_counter = 0;
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <F1_delay_ms+0x44>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
    while(Systic_delay_counter < counts_needed);
 8000af0:	bf00      	nop
 8000af2:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <F1_delay_ms+0x44>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	68fa      	ldr	r2, [r7, #12]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d8fa      	bhi.n	8000af2 <F1_delay_ms+0x26>
}
 8000afc:	bf00      	nop
 8000afe:	bf00      	nop
 8000b00:	3714      	adds	r7, #20
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr
 8000b08:	20000024 	.word	0x20000024
 8000b0c:	10624dd3 	.word	0x10624dd3
 8000b10:	200000c0 	.word	0x200000c0

08000b14 <F1_RCC_get_APB2_clock>:

/*
 * Return the clock of APB2
 */
uint32_t F1_RCC_get_APB2_clock(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
    return rccConfig.APB2_freq;
 8000b18:	4b02      	ldr	r3, [pc, #8]	; (8000b24 <F1_RCC_get_APB2_clock+0x10>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr
 8000b24:	20000024 	.word	0x20000024

08000b28 <F1_RCC_get_APB1_clock>:

/*
 * Return the clock of APB1
 */
uint32_t F1_RCC_get_APB1_clock(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
    return rccConfig.APB1_freq;
 8000b2c:	4b02      	ldr	r3, [pc, #8]	; (8000b38 <F1_RCC_get_APB1_clock+0x10>)
 8000b2e:	689b      	ldr	r3, [r3, #8]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr
 8000b38:	20000024 	.word	0x20000024

08000b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b44:	4a14      	ldr	r2, [pc, #80]	; (8000b98 <_sbrk+0x5c>)
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <_sbrk+0x60>)
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b50:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d102      	bne.n	8000b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <_sbrk+0x64>)
 8000b5a:	4a12      	ldr	r2, [pc, #72]	; (8000ba4 <_sbrk+0x68>)
 8000b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <_sbrk+0x64>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d207      	bcs.n	8000b7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b6c:	f000 f986 	bl	8000e7c <__errno>
 8000b70:	4603      	mov	r3, r0
 8000b72:	220c      	movs	r2, #12
 8000b74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295
 8000b7a:	e009      	b.n	8000b90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <_sbrk+0x64>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b82:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <_sbrk+0x64>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4413      	add	r3, r2
 8000b8a:	4a05      	ldr	r2, [pc, #20]	; (8000ba0 <_sbrk+0x64>)
 8000b8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3718      	adds	r7, #24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20005000 	.word	0x20005000
 8000b9c:	00000400 	.word	0x00000400
 8000ba0:	200000c4 	.word	0x200000c4
 8000ba4:	200000d8 	.word	0x200000d8

08000ba8 <__NVIC_EnableIRQ>:
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	db0b      	blt.n	8000bd2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	f003 021f 	and.w	r2, r3, #31
 8000bc0:	4906      	ldr	r1, [pc, #24]	; (8000bdc <__NVIC_EnableIRQ+0x34>)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	095b      	lsrs	r3, r3, #5
 8000bc8:	2001      	movs	r0, #1
 8000bca:	fa00 f202 	lsl.w	r2, r0, r2
 8000bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr
 8000bdc:	e000e100 	.word	0xe000e100

08000be0 <F1_UART_Init>:

/*
 * Initializes the UART for the selected option
 */
F1_uart_stat_t F1_UART_Init(F1_uart_number_t uart, F1_uart_baud_t bd, F1_uart_pin_map_t pinmap)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	6039      	str	r1, [r7, #0]
 8000bea:	71fb      	strb	r3, [r7, #7]
 8000bec:	4613      	mov	r3, r2
 8000bee:	71bb      	strb	r3, [r7, #6]
    /* Map the pins */
    switch(pinmap)
 8000bf0:	79bb      	ldrb	r3, [r7, #6]
 8000bf2:	2b03      	cmp	r3, #3
 8000bf4:	d840      	bhi.n	8000c78 <F1_UART_Init+0x98>
 8000bf6:	a201      	add	r2, pc, #4	; (adr r2, 8000bfc <F1_UART_Init+0x1c>)
 8000bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bfc:	08000c0d 	.word	0x08000c0d
 8000c00:	08000c25 	.word	0x08000c25
 8000c04:	08000c49 	.word	0x08000c49
 8000c08:	08000c61 	.word	0x08000c61
    {
	case UART1_TX_PA9_RX_PA10:
	    F1_GPIO_Pin_Setup_OUT(GPIO_PORT_A, GPIO_PIN_9, GPIO_OUTPUT_2MHZ, GPIO_OUTPUT_AF_PP);	// Set the Tx pin as Push-Pull output
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	2202      	movs	r2, #2
 8000c10:	2109      	movs	r1, #9
 8000c12:	2000      	movs	r0, #0
 8000c14:	f7ff faf2 	bl	80001fc <F1_GPIO_Pin_Setup_OUT>
	    F1_GPIO_Pin_Setup_INPUT(GPIO_PORT_A, GPIO_PIN_10, GPIO_INPUT_FLOAT);	    		// Set the Rx pin sa Input floating
 8000c18:	2201      	movs	r2, #1
 8000c1a:	210a      	movs	r1, #10
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f7ff fba9 	bl	8000374 <F1_GPIO_Pin_Setup_INPUT>
	    break;
 8000c22:	e02b      	b.n	8000c7c <F1_UART_Init+0x9c>

	case UART1_TX_PB6_RX_PB7:
	    F1_GPIO_Pin_Setup_OUT(GPIO_PORT_B, GPIO_PIN_6, GPIO_OUTPUT_2MHZ, GPIO_OUTPUT_AF_PP);	// Set the Tx pin as Push-Pull output
 8000c24:	2302      	movs	r3, #2
 8000c26:	2202      	movs	r2, #2
 8000c28:	2106      	movs	r1, #6
 8000c2a:	2001      	movs	r0, #1
 8000c2c:	f7ff fae6 	bl	80001fc <F1_GPIO_Pin_Setup_OUT>
	    F1_GPIO_Pin_Setup_INPUT(GPIO_PORT_B, GPIO_PIN_7, GPIO_INPUT_FLOAT);	    			// Set the Rx pin sa Input floating
 8000c30:	2201      	movs	r2, #1
 8000c32:	2107      	movs	r1, #7
 8000c34:	2001      	movs	r0, #1
 8000c36:	f7ff fb9d 	bl	8000374 <F1_GPIO_Pin_Setup_INPUT>
	    AFIO->MAPR |= AFIO_MAPR_USART1_REMAP;							// Re-map the UART pins
 8000c3a:	4b5b      	ldr	r3, [pc, #364]	; (8000da8 <F1_UART_Init+0x1c8>)
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	4a5a      	ldr	r2, [pc, #360]	; (8000da8 <F1_UART_Init+0x1c8>)
 8000c40:	f043 0304 	orr.w	r3, r3, #4
 8000c44:	6053      	str	r3, [r2, #4]
	    break;
 8000c46:	e019      	b.n	8000c7c <F1_UART_Init+0x9c>

	case UART2_TX_PA2_RX_PA3:
	    F1_GPIO_Pin_Setup_OUT(GPIO_PORT_A, GPIO_PIN_2, GPIO_OUTPUT_2MHZ, GPIO_OUTPUT_AF_PP);	// Set the Tx pin as Push-Pull output
 8000c48:	2302      	movs	r3, #2
 8000c4a:	2202      	movs	r2, #2
 8000c4c:	2102      	movs	r1, #2
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f7ff fad4 	bl	80001fc <F1_GPIO_Pin_Setup_OUT>
	    F1_GPIO_Pin_Setup_INPUT(GPIO_PORT_A, GPIO_PIN_3, GPIO_INPUT_FLOAT);	    			// Set the Rx pin sa Input floating
 8000c54:	2201      	movs	r2, #1
 8000c56:	2103      	movs	r1, #3
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f7ff fb8b 	bl	8000374 <F1_GPIO_Pin_Setup_INPUT>
	    break;
 8000c5e:	e00d      	b.n	8000c7c <F1_UART_Init+0x9c>

	case UART3_TX_PB10_RX_PB11:
	    F1_GPIO_Pin_Setup_OUT(GPIO_PORT_B, GPIO_PIN_10, GPIO_OUTPUT_2MHZ, GPIO_OUTPUT_AF_PP);	// Set the Tx pin as Push-Pull output
 8000c60:	2302      	movs	r3, #2
 8000c62:	2202      	movs	r2, #2
 8000c64:	210a      	movs	r1, #10
 8000c66:	2001      	movs	r0, #1
 8000c68:	f7ff fac8 	bl	80001fc <F1_GPIO_Pin_Setup_OUT>
	    F1_GPIO_Pin_Setup_INPUT(GPIO_PORT_B, GPIO_PIN_11, GPIO_INPUT_FLOAT);	    			// Set the Rx pin sa Input floating
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	210b      	movs	r1, #11
 8000c70:	2001      	movs	r0, #1
 8000c72:	f7ff fb7f 	bl	8000374 <F1_GPIO_Pin_Setup_INPUT>
	    break;
 8000c76:	e001      	b.n	8000c7c <F1_UART_Init+0x9c>

	default:
	    return UART_FAIL;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	e090      	b.n	8000d9e <F1_UART_Init+0x1be>
	    break;
    }

    if(uart == UART_1)
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d106      	bne.n	8000c90 <F1_UART_Init+0xb0>
    {
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;		// Enable the UART1 clock
 8000c82:	4b4a      	ldr	r3, [pc, #296]	; (8000dac <F1_UART_Init+0x1cc>)
 8000c84:	699b      	ldr	r3, [r3, #24]
 8000c86:	4a49      	ldr	r2, [pc, #292]	; (8000dac <F1_UART_Init+0x1cc>)
 8000c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c8c:	6193      	str	r3, [r2, #24]
 8000c8e:	e015      	b.n	8000cbc <F1_UART_Init+0xdc>
    }
    else if(uart == UART_2)
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d106      	bne.n	8000ca4 <F1_UART_Init+0xc4>
    {
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;		// Enable the UART2 clock
 8000c96:	4b45      	ldr	r3, [pc, #276]	; (8000dac <F1_UART_Init+0x1cc>)
 8000c98:	69db      	ldr	r3, [r3, #28]
 8000c9a:	4a44      	ldr	r2, [pc, #272]	; (8000dac <F1_UART_Init+0x1cc>)
 8000c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca0:	61d3      	str	r3, [r2, #28]
 8000ca2:	e00b      	b.n	8000cbc <F1_UART_Init+0xdc>
    }
    else if(uart == UART_3)
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d106      	bne.n	8000cb8 <F1_UART_Init+0xd8>
    {
	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;		// Enable the UART3 clock
 8000caa:	4b40      	ldr	r3, [pc, #256]	; (8000dac <F1_UART_Init+0x1cc>)
 8000cac:	69db      	ldr	r3, [r3, #28]
 8000cae:	4a3f      	ldr	r2, [pc, #252]	; (8000dac <F1_UART_Init+0x1cc>)
 8000cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cb4:	61d3      	str	r3, [r2, #28]
 8000cb6:	e001      	b.n	8000cbc <F1_UART_Init+0xdc>
    }
    else
    {
	return UART_FAIL;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e070      	b.n	8000d9e <F1_UART_Init+0x1be>
    }

    /* 1 Start bit, 8 Data bits, n Stop bit */
    _F1_uart_list[uart]->CR1 &= ~(USART_CR1_M);
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	4a3c      	ldr	r2, [pc, #240]	; (8000db0 <F1_UART_Init+0x1d0>)
 8000cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc4:	68da      	ldr	r2, [r3, #12]
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	4939      	ldr	r1, [pc, #228]	; (8000db0 <F1_UART_Init+0x1d0>)
 8000cca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000cce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000cd2:	60da      	str	r2, [r3, #12]

    if(uart == UART_1)
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d10e      	bne.n	8000cf8 <F1_UART_Init+0x118>
    {
	/*
	 * Calculate the Baud Rate:
	 * UART1 gets it clock from APB2
	 */
	uint32_t sysClock = F1_RCC_get_APB2_clock();
 8000cda:	f7ff ff1b 	bl	8000b14 <F1_RCC_get_APB2_clock>
 8000cde:	60f8      	str	r0, [r7, #12]
	uint16_t baudVal = (uint16_t)(sysClock/bd);
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce8:	817b      	strh	r3, [r7, #10]
	_F1_uart_list[uart]->BRR = baudVal;
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	4a30      	ldr	r2, [pc, #192]	; (8000db0 <F1_UART_Init+0x1d0>)
 8000cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf2:	897a      	ldrh	r2, [r7, #10]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	e00d      	b.n	8000d14 <F1_UART_Init+0x134>
    {
	/*
	 * Calculate the baud rate:
	 * UART2 and 3 get their clock from APB1
	 */
	uint32_t sysClock = F1_RCC_get_APB1_clock();
 8000cf8:	f7ff ff16 	bl	8000b28 <F1_RCC_get_APB1_clock>
 8000cfc:	6178      	str	r0, [r7, #20]
	uint16_t baudVal = (uint16_t)(sysClock/bd);
 8000cfe:	697a      	ldr	r2, [r7, #20]
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d06:	827b      	strh	r3, [r7, #18]
	_F1_uart_list[uart]->BRR = baudVal;
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	4a29      	ldr	r2, [pc, #164]	; (8000db0 <F1_UART_Init+0x1d0>)
 8000d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d10:	8a7a      	ldrh	r2, [r7, #18]
 8000d12:	609a      	str	r2, [r3, #8]
    }

    /* Set the TE (Transmission Enable) bit */
    _F1_uart_list[uart]->CR1 |= USART_CR1_TE;
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	4a26      	ldr	r2, [pc, #152]	; (8000db0 <F1_UART_Init+0x1d0>)
 8000d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d1c:	68da      	ldr	r2, [r3, #12]
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	4923      	ldr	r1, [pc, #140]	; (8000db0 <F1_UART_Init+0x1d0>)
 8000d22:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d26:	f042 0208 	orr.w	r2, r2, #8
 8000d2a:	60da      	str	r2, [r3, #12]

    /* Enable the receiver RE */
    _F1_uart_list[uart]->CR1 |= USART_CR1_RE;
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	4a20      	ldr	r2, [pc, #128]	; (8000db0 <F1_UART_Init+0x1d0>)
 8000d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d34:	68da      	ldr	r2, [r3, #12]
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	491d      	ldr	r1, [pc, #116]	; (8000db0 <F1_UART_Init+0x1d0>)
 8000d3a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d3e:	f042 0204 	orr.w	r2, r2, #4
 8000d42:	60da      	str	r2, [r3, #12]

    /* Enable the UART */
    _F1_uart_list[uart]->CR1 |= USART_CR1_UE;
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	4a1a      	ldr	r2, [pc, #104]	; (8000db0 <F1_UART_Init+0x1d0>)
 8000d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d4c:	68da      	ldr	r2, [r3, #12]
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	4917      	ldr	r1, [pc, #92]	; (8000db0 <F1_UART_Init+0x1d0>)
 8000d52:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d56:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000d5a:	60da      	str	r2, [r3, #12]

    /* Enable the receive interrupt */
    _F1_uart_list[uart]->CR1 |= USART_CR1_RXNEIE;
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	4a14      	ldr	r2, [pc, #80]	; (8000db0 <F1_UART_Init+0x1d0>)
 8000d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d64:	68da      	ldr	r2, [r3, #12]
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	4911      	ldr	r1, [pc, #68]	; (8000db0 <F1_UART_Init+0x1d0>)
 8000d6a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d6e:	f042 0220 	orr.w	r2, r2, #32
 8000d72:	60da      	str	r2, [r3, #12]
    if(uart == UART_1){NVIC_EnableIRQ(USART1_IRQn);}
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d103      	bne.n	8000d82 <F1_UART_Init+0x1a2>
 8000d7a:	2025      	movs	r0, #37	; 0x25
 8000d7c:	f7ff ff14 	bl	8000ba8 <__NVIC_EnableIRQ>
 8000d80:	e00c      	b.n	8000d9c <F1_UART_Init+0x1bc>
    else if(uart == UART_2){NVIC_EnableIRQ(USART2_IRQn);}
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d103      	bne.n	8000d90 <F1_UART_Init+0x1b0>
 8000d88:	2026      	movs	r0, #38	; 0x26
 8000d8a:	f7ff ff0d 	bl	8000ba8 <__NVIC_EnableIRQ>
 8000d8e:	e005      	b.n	8000d9c <F1_UART_Init+0x1bc>
    else if(uart == UART_3){NVIC_EnableIRQ(USART3_IRQn);}
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d102      	bne.n	8000d9c <F1_UART_Init+0x1bc>
 8000d96:	2027      	movs	r0, #39	; 0x27
 8000d98:	f7ff ff06 	bl	8000ba8 <__NVIC_EnableIRQ>

    return UART_OK;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40010000 	.word	0x40010000
 8000dac:	40021000 	.word	0x40021000
 8000db0:	20000034 	.word	0x20000034

08000db4 <F1_UART_send_char>:

/*
 * Send a single character
 */
void F1_UART_send_char(F1_uart_number_t uart, char c)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	460a      	mov	r2, r1
 8000dbe:	71fb      	strb	r3, [r7, #7]
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	71bb      	strb	r3, [r7, #6]
    /* Load the data */
    _F1_uart_list[uart]->DR = c;
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <F1_UART_send_char+0x3c>)
 8000dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dcc:	79ba      	ldrb	r2, [r7, #6]
 8000dce:	605a      	str	r2, [r3, #4]

    /* Wait for the transmission to complete */
    while((_F1_uart_list[uart]->SR & USART_SR_TC) == 0);
 8000dd0:	bf00      	nop
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	4a06      	ldr	r2, [pc, #24]	; (8000df0 <F1_UART_send_char+0x3c>)
 8000dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d0f6      	beq.n	8000dd2 <F1_UART_send_char+0x1e>
}
 8000de4:	bf00      	nop
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr
 8000df0:	20000034 	.word	0x20000034

08000df4 <F1_UART_send_string>:

/*
 * Send a string via UART
 */
void F1_UART_send_string(F1_uart_number_t uart, char* str)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	6039      	str	r1, [r7, #0]
 8000dfe:	71fb      	strb	r3, [r7, #7]
    while(*str != '\0')
 8000e00:	e009      	b.n	8000e16 <F1_UART_send_string+0x22>
    {
	F1_UART_send_char(uart, *str);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	781a      	ldrb	r2, [r3, #0]
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	4611      	mov	r1, r2
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff ffd2 	bl	8000db4 <F1_UART_send_char>
	str++;
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	3301      	adds	r3, #1
 8000e14:	603b      	str	r3, [r7, #0]
    while(*str != '\0')
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d1f1      	bne.n	8000e02 <F1_UART_send_string+0xe>
    }
}
 8000e1e:	bf00      	nop
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e28:	480d      	ldr	r0, [pc, #52]	; (8000e60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e2a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e2c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e30:	480c      	ldr	r0, [pc, #48]	; (8000e64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e32:	490d      	ldr	r1, [pc, #52]	; (8000e68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e34:	4a0d      	ldr	r2, [pc, #52]	; (8000e6c <LoopForever+0xe>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e38:	e002      	b.n	8000e40 <LoopCopyDataInit>

08000e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3e:	3304      	adds	r3, #4

08000e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e44:	d3f9      	bcc.n	8000e3a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e46:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e48:	4c0a      	ldr	r4, [pc, #40]	; (8000e74 <LoopForever+0x16>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e4c:	e001      	b.n	8000e52 <LoopFillZerobss>

08000e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e50:	3204      	adds	r2, #4

08000e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e54:	d3fb      	bcc.n	8000e4e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e56:	f000 f817 	bl	8000e88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e5a:	f7ff fcb5 	bl	80007c8 <main>

08000e5e <LoopForever>:

LoopForever:
  b LoopForever
 8000e5e:	e7fe      	b.n	8000e5e <LoopForever>
  ldr   r0, =_estack
 8000e60:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000e64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e68:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8000e6c:	08001820 	.word	0x08001820
  ldr r2, =_sbss
 8000e70:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8000e74:	200000d8 	.word	0x200000d8

08000e78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e78:	e7fe      	b.n	8000e78 <ADC1_2_IRQHandler>
	...

08000e7c <__errno>:
 8000e7c:	4b01      	ldr	r3, [pc, #4]	; (8000e84 <__errno+0x8>)
 8000e7e:	6818      	ldr	r0, [r3, #0]
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20000040 	.word	0x20000040

08000e88 <__libc_init_array>:
 8000e88:	b570      	push	{r4, r5, r6, lr}
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4d0c      	ldr	r5, [pc, #48]	; (8000ec0 <__libc_init_array+0x38>)
 8000e8e:	4c0d      	ldr	r4, [pc, #52]	; (8000ec4 <__libc_init_array+0x3c>)
 8000e90:	1b64      	subs	r4, r4, r5
 8000e92:	10a4      	asrs	r4, r4, #2
 8000e94:	42a6      	cmp	r6, r4
 8000e96:	d109      	bne.n	8000eac <__libc_init_array+0x24>
 8000e98:	f000 fc94 	bl	80017c4 <_init>
 8000e9c:	2600      	movs	r6, #0
 8000e9e:	4d0a      	ldr	r5, [pc, #40]	; (8000ec8 <__libc_init_array+0x40>)
 8000ea0:	4c0a      	ldr	r4, [pc, #40]	; (8000ecc <__libc_init_array+0x44>)
 8000ea2:	1b64      	subs	r4, r4, r5
 8000ea4:	10a4      	asrs	r4, r4, #2
 8000ea6:	42a6      	cmp	r6, r4
 8000ea8:	d105      	bne.n	8000eb6 <__libc_init_array+0x2e>
 8000eaa:	bd70      	pop	{r4, r5, r6, pc}
 8000eac:	f855 3b04 	ldr.w	r3, [r5], #4
 8000eb0:	4798      	blx	r3
 8000eb2:	3601      	adds	r6, #1
 8000eb4:	e7ee      	b.n	8000e94 <__libc_init_array+0xc>
 8000eb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000eba:	4798      	blx	r3
 8000ebc:	3601      	adds	r6, #1
 8000ebe:	e7f2      	b.n	8000ea6 <__libc_init_array+0x1e>
 8000ec0:	08001818 	.word	0x08001818
 8000ec4:	08001818 	.word	0x08001818
 8000ec8:	08001818 	.word	0x08001818
 8000ecc:	0800181c 	.word	0x0800181c

08000ed0 <siprintf>:
 8000ed0:	b40e      	push	{r1, r2, r3}
 8000ed2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000ed6:	b500      	push	{lr}
 8000ed8:	b09c      	sub	sp, #112	; 0x70
 8000eda:	ab1d      	add	r3, sp, #116	; 0x74
 8000edc:	9002      	str	r0, [sp, #8]
 8000ede:	9006      	str	r0, [sp, #24]
 8000ee0:	9107      	str	r1, [sp, #28]
 8000ee2:	9104      	str	r1, [sp, #16]
 8000ee4:	4808      	ldr	r0, [pc, #32]	; (8000f08 <siprintf+0x38>)
 8000ee6:	4909      	ldr	r1, [pc, #36]	; (8000f0c <siprintf+0x3c>)
 8000ee8:	f853 2b04 	ldr.w	r2, [r3], #4
 8000eec:	9105      	str	r1, [sp, #20]
 8000eee:	6800      	ldr	r0, [r0, #0]
 8000ef0:	a902      	add	r1, sp, #8
 8000ef2:	9301      	str	r3, [sp, #4]
 8000ef4:	f000 f868 	bl	8000fc8 <_svfiprintf_r>
 8000ef8:	2200      	movs	r2, #0
 8000efa:	9b02      	ldr	r3, [sp, #8]
 8000efc:	701a      	strb	r2, [r3, #0]
 8000efe:	b01c      	add	sp, #112	; 0x70
 8000f00:	f85d eb04 	ldr.w	lr, [sp], #4
 8000f04:	b003      	add	sp, #12
 8000f06:	4770      	bx	lr
 8000f08:	20000040 	.word	0x20000040
 8000f0c:	ffff0208 	.word	0xffff0208

08000f10 <__ssputs_r>:
 8000f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f14:	688e      	ldr	r6, [r1, #8]
 8000f16:	4682      	mov	sl, r0
 8000f18:	429e      	cmp	r6, r3
 8000f1a:	460c      	mov	r4, r1
 8000f1c:	4690      	mov	r8, r2
 8000f1e:	461f      	mov	r7, r3
 8000f20:	d838      	bhi.n	8000f94 <__ssputs_r+0x84>
 8000f22:	898a      	ldrh	r2, [r1, #12]
 8000f24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000f28:	d032      	beq.n	8000f90 <__ssputs_r+0x80>
 8000f2a:	6825      	ldr	r5, [r4, #0]
 8000f2c:	6909      	ldr	r1, [r1, #16]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	eba5 0901 	sub.w	r9, r5, r1
 8000f34:	6965      	ldr	r5, [r4, #20]
 8000f36:	444b      	add	r3, r9
 8000f38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000f3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000f40:	106d      	asrs	r5, r5, #1
 8000f42:	429d      	cmp	r5, r3
 8000f44:	bf38      	it	cc
 8000f46:	461d      	movcc	r5, r3
 8000f48:	0553      	lsls	r3, r2, #21
 8000f4a:	d531      	bpl.n	8000fb0 <__ssputs_r+0xa0>
 8000f4c:	4629      	mov	r1, r5
 8000f4e:	f000 fb6f 	bl	8001630 <_malloc_r>
 8000f52:	4606      	mov	r6, r0
 8000f54:	b950      	cbnz	r0, 8000f6c <__ssputs_r+0x5c>
 8000f56:	230c      	movs	r3, #12
 8000f58:	f04f 30ff 	mov.w	r0, #4294967295
 8000f5c:	f8ca 3000 	str.w	r3, [sl]
 8000f60:	89a3      	ldrh	r3, [r4, #12]
 8000f62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f66:	81a3      	strh	r3, [r4, #12]
 8000f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6c:	464a      	mov	r2, r9
 8000f6e:	6921      	ldr	r1, [r4, #16]
 8000f70:	f000 face 	bl	8001510 <memcpy>
 8000f74:	89a3      	ldrh	r3, [r4, #12]
 8000f76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f7e:	81a3      	strh	r3, [r4, #12]
 8000f80:	6126      	str	r6, [r4, #16]
 8000f82:	444e      	add	r6, r9
 8000f84:	6026      	str	r6, [r4, #0]
 8000f86:	463e      	mov	r6, r7
 8000f88:	6165      	str	r5, [r4, #20]
 8000f8a:	eba5 0509 	sub.w	r5, r5, r9
 8000f8e:	60a5      	str	r5, [r4, #8]
 8000f90:	42be      	cmp	r6, r7
 8000f92:	d900      	bls.n	8000f96 <__ssputs_r+0x86>
 8000f94:	463e      	mov	r6, r7
 8000f96:	4632      	mov	r2, r6
 8000f98:	4641      	mov	r1, r8
 8000f9a:	6820      	ldr	r0, [r4, #0]
 8000f9c:	f000 fac6 	bl	800152c <memmove>
 8000fa0:	68a3      	ldr	r3, [r4, #8]
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	60a3      	str	r3, [r4, #8]
 8000fa8:	6823      	ldr	r3, [r4, #0]
 8000faa:	4433      	add	r3, r6
 8000fac:	6023      	str	r3, [r4, #0]
 8000fae:	e7db      	b.n	8000f68 <__ssputs_r+0x58>
 8000fb0:	462a      	mov	r2, r5
 8000fb2:	f000 fbb1 	bl	8001718 <_realloc_r>
 8000fb6:	4606      	mov	r6, r0
 8000fb8:	2800      	cmp	r0, #0
 8000fba:	d1e1      	bne.n	8000f80 <__ssputs_r+0x70>
 8000fbc:	4650      	mov	r0, sl
 8000fbe:	6921      	ldr	r1, [r4, #16]
 8000fc0:	f000 face 	bl	8001560 <_free_r>
 8000fc4:	e7c7      	b.n	8000f56 <__ssputs_r+0x46>
	...

08000fc8 <_svfiprintf_r>:
 8000fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fcc:	4698      	mov	r8, r3
 8000fce:	898b      	ldrh	r3, [r1, #12]
 8000fd0:	4607      	mov	r7, r0
 8000fd2:	061b      	lsls	r3, r3, #24
 8000fd4:	460d      	mov	r5, r1
 8000fd6:	4614      	mov	r4, r2
 8000fd8:	b09d      	sub	sp, #116	; 0x74
 8000fda:	d50e      	bpl.n	8000ffa <_svfiprintf_r+0x32>
 8000fdc:	690b      	ldr	r3, [r1, #16]
 8000fde:	b963      	cbnz	r3, 8000ffa <_svfiprintf_r+0x32>
 8000fe0:	2140      	movs	r1, #64	; 0x40
 8000fe2:	f000 fb25 	bl	8001630 <_malloc_r>
 8000fe6:	6028      	str	r0, [r5, #0]
 8000fe8:	6128      	str	r0, [r5, #16]
 8000fea:	b920      	cbnz	r0, 8000ff6 <_svfiprintf_r+0x2e>
 8000fec:	230c      	movs	r3, #12
 8000fee:	603b      	str	r3, [r7, #0]
 8000ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff4:	e0d1      	b.n	800119a <_svfiprintf_r+0x1d2>
 8000ff6:	2340      	movs	r3, #64	; 0x40
 8000ff8:	616b      	str	r3, [r5, #20]
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	9309      	str	r3, [sp, #36]	; 0x24
 8000ffe:	2320      	movs	r3, #32
 8001000:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001004:	2330      	movs	r3, #48	; 0x30
 8001006:	f04f 0901 	mov.w	r9, #1
 800100a:	f8cd 800c 	str.w	r8, [sp, #12]
 800100e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80011b4 <_svfiprintf_r+0x1ec>
 8001012:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001016:	4623      	mov	r3, r4
 8001018:	469a      	mov	sl, r3
 800101a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800101e:	b10a      	cbz	r2, 8001024 <_svfiprintf_r+0x5c>
 8001020:	2a25      	cmp	r2, #37	; 0x25
 8001022:	d1f9      	bne.n	8001018 <_svfiprintf_r+0x50>
 8001024:	ebba 0b04 	subs.w	fp, sl, r4
 8001028:	d00b      	beq.n	8001042 <_svfiprintf_r+0x7a>
 800102a:	465b      	mov	r3, fp
 800102c:	4622      	mov	r2, r4
 800102e:	4629      	mov	r1, r5
 8001030:	4638      	mov	r0, r7
 8001032:	f7ff ff6d 	bl	8000f10 <__ssputs_r>
 8001036:	3001      	adds	r0, #1
 8001038:	f000 80aa 	beq.w	8001190 <_svfiprintf_r+0x1c8>
 800103c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800103e:	445a      	add	r2, fp
 8001040:	9209      	str	r2, [sp, #36]	; 0x24
 8001042:	f89a 3000 	ldrb.w	r3, [sl]
 8001046:	2b00      	cmp	r3, #0
 8001048:	f000 80a2 	beq.w	8001190 <_svfiprintf_r+0x1c8>
 800104c:	2300      	movs	r3, #0
 800104e:	f04f 32ff 	mov.w	r2, #4294967295
 8001052:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001056:	f10a 0a01 	add.w	sl, sl, #1
 800105a:	9304      	str	r3, [sp, #16]
 800105c:	9307      	str	r3, [sp, #28]
 800105e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001062:	931a      	str	r3, [sp, #104]	; 0x68
 8001064:	4654      	mov	r4, sl
 8001066:	2205      	movs	r2, #5
 8001068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800106c:	4851      	ldr	r0, [pc, #324]	; (80011b4 <_svfiprintf_r+0x1ec>)
 800106e:	f000 fa41 	bl	80014f4 <memchr>
 8001072:	9a04      	ldr	r2, [sp, #16]
 8001074:	b9d8      	cbnz	r0, 80010ae <_svfiprintf_r+0xe6>
 8001076:	06d0      	lsls	r0, r2, #27
 8001078:	bf44      	itt	mi
 800107a:	2320      	movmi	r3, #32
 800107c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001080:	0711      	lsls	r1, r2, #28
 8001082:	bf44      	itt	mi
 8001084:	232b      	movmi	r3, #43	; 0x2b
 8001086:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800108a:	f89a 3000 	ldrb.w	r3, [sl]
 800108e:	2b2a      	cmp	r3, #42	; 0x2a
 8001090:	d015      	beq.n	80010be <_svfiprintf_r+0xf6>
 8001092:	4654      	mov	r4, sl
 8001094:	2000      	movs	r0, #0
 8001096:	f04f 0c0a 	mov.w	ip, #10
 800109a:	9a07      	ldr	r2, [sp, #28]
 800109c:	4621      	mov	r1, r4
 800109e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80010a2:	3b30      	subs	r3, #48	; 0x30
 80010a4:	2b09      	cmp	r3, #9
 80010a6:	d94e      	bls.n	8001146 <_svfiprintf_r+0x17e>
 80010a8:	b1b0      	cbz	r0, 80010d8 <_svfiprintf_r+0x110>
 80010aa:	9207      	str	r2, [sp, #28]
 80010ac:	e014      	b.n	80010d8 <_svfiprintf_r+0x110>
 80010ae:	eba0 0308 	sub.w	r3, r0, r8
 80010b2:	fa09 f303 	lsl.w	r3, r9, r3
 80010b6:	4313      	orrs	r3, r2
 80010b8:	46a2      	mov	sl, r4
 80010ba:	9304      	str	r3, [sp, #16]
 80010bc:	e7d2      	b.n	8001064 <_svfiprintf_r+0x9c>
 80010be:	9b03      	ldr	r3, [sp, #12]
 80010c0:	1d19      	adds	r1, r3, #4
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	9103      	str	r1, [sp, #12]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	bfbb      	ittet	lt
 80010ca:	425b      	neglt	r3, r3
 80010cc:	f042 0202 	orrlt.w	r2, r2, #2
 80010d0:	9307      	strge	r3, [sp, #28]
 80010d2:	9307      	strlt	r3, [sp, #28]
 80010d4:	bfb8      	it	lt
 80010d6:	9204      	strlt	r2, [sp, #16]
 80010d8:	7823      	ldrb	r3, [r4, #0]
 80010da:	2b2e      	cmp	r3, #46	; 0x2e
 80010dc:	d10c      	bne.n	80010f8 <_svfiprintf_r+0x130>
 80010de:	7863      	ldrb	r3, [r4, #1]
 80010e0:	2b2a      	cmp	r3, #42	; 0x2a
 80010e2:	d135      	bne.n	8001150 <_svfiprintf_r+0x188>
 80010e4:	9b03      	ldr	r3, [sp, #12]
 80010e6:	3402      	adds	r4, #2
 80010e8:	1d1a      	adds	r2, r3, #4
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	9203      	str	r2, [sp, #12]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	bfb8      	it	lt
 80010f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80010f6:	9305      	str	r3, [sp, #20]
 80010f8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80011b8 <_svfiprintf_r+0x1f0>
 80010fc:	2203      	movs	r2, #3
 80010fe:	4650      	mov	r0, sl
 8001100:	7821      	ldrb	r1, [r4, #0]
 8001102:	f000 f9f7 	bl	80014f4 <memchr>
 8001106:	b140      	cbz	r0, 800111a <_svfiprintf_r+0x152>
 8001108:	2340      	movs	r3, #64	; 0x40
 800110a:	eba0 000a 	sub.w	r0, r0, sl
 800110e:	fa03 f000 	lsl.w	r0, r3, r0
 8001112:	9b04      	ldr	r3, [sp, #16]
 8001114:	3401      	adds	r4, #1
 8001116:	4303      	orrs	r3, r0
 8001118:	9304      	str	r3, [sp, #16]
 800111a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800111e:	2206      	movs	r2, #6
 8001120:	4826      	ldr	r0, [pc, #152]	; (80011bc <_svfiprintf_r+0x1f4>)
 8001122:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001126:	f000 f9e5 	bl	80014f4 <memchr>
 800112a:	2800      	cmp	r0, #0
 800112c:	d038      	beq.n	80011a0 <_svfiprintf_r+0x1d8>
 800112e:	4b24      	ldr	r3, [pc, #144]	; (80011c0 <_svfiprintf_r+0x1f8>)
 8001130:	bb1b      	cbnz	r3, 800117a <_svfiprintf_r+0x1b2>
 8001132:	9b03      	ldr	r3, [sp, #12]
 8001134:	3307      	adds	r3, #7
 8001136:	f023 0307 	bic.w	r3, r3, #7
 800113a:	3308      	adds	r3, #8
 800113c:	9303      	str	r3, [sp, #12]
 800113e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001140:	4433      	add	r3, r6
 8001142:	9309      	str	r3, [sp, #36]	; 0x24
 8001144:	e767      	b.n	8001016 <_svfiprintf_r+0x4e>
 8001146:	460c      	mov	r4, r1
 8001148:	2001      	movs	r0, #1
 800114a:	fb0c 3202 	mla	r2, ip, r2, r3
 800114e:	e7a5      	b.n	800109c <_svfiprintf_r+0xd4>
 8001150:	2300      	movs	r3, #0
 8001152:	f04f 0c0a 	mov.w	ip, #10
 8001156:	4619      	mov	r1, r3
 8001158:	3401      	adds	r4, #1
 800115a:	9305      	str	r3, [sp, #20]
 800115c:	4620      	mov	r0, r4
 800115e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001162:	3a30      	subs	r2, #48	; 0x30
 8001164:	2a09      	cmp	r2, #9
 8001166:	d903      	bls.n	8001170 <_svfiprintf_r+0x1a8>
 8001168:	2b00      	cmp	r3, #0
 800116a:	d0c5      	beq.n	80010f8 <_svfiprintf_r+0x130>
 800116c:	9105      	str	r1, [sp, #20]
 800116e:	e7c3      	b.n	80010f8 <_svfiprintf_r+0x130>
 8001170:	4604      	mov	r4, r0
 8001172:	2301      	movs	r3, #1
 8001174:	fb0c 2101 	mla	r1, ip, r1, r2
 8001178:	e7f0      	b.n	800115c <_svfiprintf_r+0x194>
 800117a:	ab03      	add	r3, sp, #12
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	462a      	mov	r2, r5
 8001180:	4638      	mov	r0, r7
 8001182:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <_svfiprintf_r+0x1fc>)
 8001184:	a904      	add	r1, sp, #16
 8001186:	f3af 8000 	nop.w
 800118a:	1c42      	adds	r2, r0, #1
 800118c:	4606      	mov	r6, r0
 800118e:	d1d6      	bne.n	800113e <_svfiprintf_r+0x176>
 8001190:	89ab      	ldrh	r3, [r5, #12]
 8001192:	065b      	lsls	r3, r3, #25
 8001194:	f53f af2c 	bmi.w	8000ff0 <_svfiprintf_r+0x28>
 8001198:	9809      	ldr	r0, [sp, #36]	; 0x24
 800119a:	b01d      	add	sp, #116	; 0x74
 800119c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011a0:	ab03      	add	r3, sp, #12
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	462a      	mov	r2, r5
 80011a6:	4638      	mov	r0, r7
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <_svfiprintf_r+0x1fc>)
 80011aa:	a904      	add	r1, sp, #16
 80011ac:	f000 f87c 	bl	80012a8 <_printf_i>
 80011b0:	e7eb      	b.n	800118a <_svfiprintf_r+0x1c2>
 80011b2:	bf00      	nop
 80011b4:	080017e5 	.word	0x080017e5
 80011b8:	080017eb 	.word	0x080017eb
 80011bc:	080017ef 	.word	0x080017ef
 80011c0:	00000000 	.word	0x00000000
 80011c4:	08000f11 	.word	0x08000f11

080011c8 <_printf_common>:
 80011c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011cc:	4616      	mov	r6, r2
 80011ce:	4699      	mov	r9, r3
 80011d0:	688a      	ldr	r2, [r1, #8]
 80011d2:	690b      	ldr	r3, [r1, #16]
 80011d4:	4607      	mov	r7, r0
 80011d6:	4293      	cmp	r3, r2
 80011d8:	bfb8      	it	lt
 80011da:	4613      	movlt	r3, r2
 80011dc:	6033      	str	r3, [r6, #0]
 80011de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80011e2:	460c      	mov	r4, r1
 80011e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80011e8:	b10a      	cbz	r2, 80011ee <_printf_common+0x26>
 80011ea:	3301      	adds	r3, #1
 80011ec:	6033      	str	r3, [r6, #0]
 80011ee:	6823      	ldr	r3, [r4, #0]
 80011f0:	0699      	lsls	r1, r3, #26
 80011f2:	bf42      	ittt	mi
 80011f4:	6833      	ldrmi	r3, [r6, #0]
 80011f6:	3302      	addmi	r3, #2
 80011f8:	6033      	strmi	r3, [r6, #0]
 80011fa:	6825      	ldr	r5, [r4, #0]
 80011fc:	f015 0506 	ands.w	r5, r5, #6
 8001200:	d106      	bne.n	8001210 <_printf_common+0x48>
 8001202:	f104 0a19 	add.w	sl, r4, #25
 8001206:	68e3      	ldr	r3, [r4, #12]
 8001208:	6832      	ldr	r2, [r6, #0]
 800120a:	1a9b      	subs	r3, r3, r2
 800120c:	42ab      	cmp	r3, r5
 800120e:	dc28      	bgt.n	8001262 <_printf_common+0x9a>
 8001210:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001214:	1e13      	subs	r3, r2, #0
 8001216:	6822      	ldr	r2, [r4, #0]
 8001218:	bf18      	it	ne
 800121a:	2301      	movne	r3, #1
 800121c:	0692      	lsls	r2, r2, #26
 800121e:	d42d      	bmi.n	800127c <_printf_common+0xb4>
 8001220:	4649      	mov	r1, r9
 8001222:	4638      	mov	r0, r7
 8001224:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001228:	47c0      	blx	r8
 800122a:	3001      	adds	r0, #1
 800122c:	d020      	beq.n	8001270 <_printf_common+0xa8>
 800122e:	6823      	ldr	r3, [r4, #0]
 8001230:	68e5      	ldr	r5, [r4, #12]
 8001232:	f003 0306 	and.w	r3, r3, #6
 8001236:	2b04      	cmp	r3, #4
 8001238:	bf18      	it	ne
 800123a:	2500      	movne	r5, #0
 800123c:	6832      	ldr	r2, [r6, #0]
 800123e:	f04f 0600 	mov.w	r6, #0
 8001242:	68a3      	ldr	r3, [r4, #8]
 8001244:	bf08      	it	eq
 8001246:	1aad      	subeq	r5, r5, r2
 8001248:	6922      	ldr	r2, [r4, #16]
 800124a:	bf08      	it	eq
 800124c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001250:	4293      	cmp	r3, r2
 8001252:	bfc4      	itt	gt
 8001254:	1a9b      	subgt	r3, r3, r2
 8001256:	18ed      	addgt	r5, r5, r3
 8001258:	341a      	adds	r4, #26
 800125a:	42b5      	cmp	r5, r6
 800125c:	d11a      	bne.n	8001294 <_printf_common+0xcc>
 800125e:	2000      	movs	r0, #0
 8001260:	e008      	b.n	8001274 <_printf_common+0xac>
 8001262:	2301      	movs	r3, #1
 8001264:	4652      	mov	r2, sl
 8001266:	4649      	mov	r1, r9
 8001268:	4638      	mov	r0, r7
 800126a:	47c0      	blx	r8
 800126c:	3001      	adds	r0, #1
 800126e:	d103      	bne.n	8001278 <_printf_common+0xb0>
 8001270:	f04f 30ff 	mov.w	r0, #4294967295
 8001274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001278:	3501      	adds	r5, #1
 800127a:	e7c4      	b.n	8001206 <_printf_common+0x3e>
 800127c:	2030      	movs	r0, #48	; 0x30
 800127e:	18e1      	adds	r1, r4, r3
 8001280:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001284:	1c5a      	adds	r2, r3, #1
 8001286:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800128a:	4422      	add	r2, r4
 800128c:	3302      	adds	r3, #2
 800128e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001292:	e7c5      	b.n	8001220 <_printf_common+0x58>
 8001294:	2301      	movs	r3, #1
 8001296:	4622      	mov	r2, r4
 8001298:	4649      	mov	r1, r9
 800129a:	4638      	mov	r0, r7
 800129c:	47c0      	blx	r8
 800129e:	3001      	adds	r0, #1
 80012a0:	d0e6      	beq.n	8001270 <_printf_common+0xa8>
 80012a2:	3601      	adds	r6, #1
 80012a4:	e7d9      	b.n	800125a <_printf_common+0x92>
	...

080012a8 <_printf_i>:
 80012a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80012ac:	7e0f      	ldrb	r7, [r1, #24]
 80012ae:	4691      	mov	r9, r2
 80012b0:	2f78      	cmp	r7, #120	; 0x78
 80012b2:	4680      	mov	r8, r0
 80012b4:	460c      	mov	r4, r1
 80012b6:	469a      	mov	sl, r3
 80012b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80012ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80012be:	d807      	bhi.n	80012d0 <_printf_i+0x28>
 80012c0:	2f62      	cmp	r7, #98	; 0x62
 80012c2:	d80a      	bhi.n	80012da <_printf_i+0x32>
 80012c4:	2f00      	cmp	r7, #0
 80012c6:	f000 80d9 	beq.w	800147c <_printf_i+0x1d4>
 80012ca:	2f58      	cmp	r7, #88	; 0x58
 80012cc:	f000 80a4 	beq.w	8001418 <_printf_i+0x170>
 80012d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80012d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80012d8:	e03a      	b.n	8001350 <_printf_i+0xa8>
 80012da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80012de:	2b15      	cmp	r3, #21
 80012e0:	d8f6      	bhi.n	80012d0 <_printf_i+0x28>
 80012e2:	a101      	add	r1, pc, #4	; (adr r1, 80012e8 <_printf_i+0x40>)
 80012e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80012e8:	08001341 	.word	0x08001341
 80012ec:	08001355 	.word	0x08001355
 80012f0:	080012d1 	.word	0x080012d1
 80012f4:	080012d1 	.word	0x080012d1
 80012f8:	080012d1 	.word	0x080012d1
 80012fc:	080012d1 	.word	0x080012d1
 8001300:	08001355 	.word	0x08001355
 8001304:	080012d1 	.word	0x080012d1
 8001308:	080012d1 	.word	0x080012d1
 800130c:	080012d1 	.word	0x080012d1
 8001310:	080012d1 	.word	0x080012d1
 8001314:	08001463 	.word	0x08001463
 8001318:	08001385 	.word	0x08001385
 800131c:	08001445 	.word	0x08001445
 8001320:	080012d1 	.word	0x080012d1
 8001324:	080012d1 	.word	0x080012d1
 8001328:	08001485 	.word	0x08001485
 800132c:	080012d1 	.word	0x080012d1
 8001330:	08001385 	.word	0x08001385
 8001334:	080012d1 	.word	0x080012d1
 8001338:	080012d1 	.word	0x080012d1
 800133c:	0800144d 	.word	0x0800144d
 8001340:	682b      	ldr	r3, [r5, #0]
 8001342:	1d1a      	adds	r2, r3, #4
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	602a      	str	r2, [r5, #0]
 8001348:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800134c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001350:	2301      	movs	r3, #1
 8001352:	e0a4      	b.n	800149e <_printf_i+0x1f6>
 8001354:	6820      	ldr	r0, [r4, #0]
 8001356:	6829      	ldr	r1, [r5, #0]
 8001358:	0606      	lsls	r6, r0, #24
 800135a:	f101 0304 	add.w	r3, r1, #4
 800135e:	d50a      	bpl.n	8001376 <_printf_i+0xce>
 8001360:	680e      	ldr	r6, [r1, #0]
 8001362:	602b      	str	r3, [r5, #0]
 8001364:	2e00      	cmp	r6, #0
 8001366:	da03      	bge.n	8001370 <_printf_i+0xc8>
 8001368:	232d      	movs	r3, #45	; 0x2d
 800136a:	4276      	negs	r6, r6
 800136c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001370:	230a      	movs	r3, #10
 8001372:	485e      	ldr	r0, [pc, #376]	; (80014ec <_printf_i+0x244>)
 8001374:	e019      	b.n	80013aa <_printf_i+0x102>
 8001376:	680e      	ldr	r6, [r1, #0]
 8001378:	f010 0f40 	tst.w	r0, #64	; 0x40
 800137c:	602b      	str	r3, [r5, #0]
 800137e:	bf18      	it	ne
 8001380:	b236      	sxthne	r6, r6
 8001382:	e7ef      	b.n	8001364 <_printf_i+0xbc>
 8001384:	682b      	ldr	r3, [r5, #0]
 8001386:	6820      	ldr	r0, [r4, #0]
 8001388:	1d19      	adds	r1, r3, #4
 800138a:	6029      	str	r1, [r5, #0]
 800138c:	0601      	lsls	r1, r0, #24
 800138e:	d501      	bpl.n	8001394 <_printf_i+0xec>
 8001390:	681e      	ldr	r6, [r3, #0]
 8001392:	e002      	b.n	800139a <_printf_i+0xf2>
 8001394:	0646      	lsls	r6, r0, #25
 8001396:	d5fb      	bpl.n	8001390 <_printf_i+0xe8>
 8001398:	881e      	ldrh	r6, [r3, #0]
 800139a:	2f6f      	cmp	r7, #111	; 0x6f
 800139c:	bf0c      	ite	eq
 800139e:	2308      	moveq	r3, #8
 80013a0:	230a      	movne	r3, #10
 80013a2:	4852      	ldr	r0, [pc, #328]	; (80014ec <_printf_i+0x244>)
 80013a4:	2100      	movs	r1, #0
 80013a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80013aa:	6865      	ldr	r5, [r4, #4]
 80013ac:	2d00      	cmp	r5, #0
 80013ae:	bfa8      	it	ge
 80013b0:	6821      	ldrge	r1, [r4, #0]
 80013b2:	60a5      	str	r5, [r4, #8]
 80013b4:	bfa4      	itt	ge
 80013b6:	f021 0104 	bicge.w	r1, r1, #4
 80013ba:	6021      	strge	r1, [r4, #0]
 80013bc:	b90e      	cbnz	r6, 80013c2 <_printf_i+0x11a>
 80013be:	2d00      	cmp	r5, #0
 80013c0:	d04d      	beq.n	800145e <_printf_i+0x1b6>
 80013c2:	4615      	mov	r5, r2
 80013c4:	fbb6 f1f3 	udiv	r1, r6, r3
 80013c8:	fb03 6711 	mls	r7, r3, r1, r6
 80013cc:	5dc7      	ldrb	r7, [r0, r7]
 80013ce:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80013d2:	4637      	mov	r7, r6
 80013d4:	42bb      	cmp	r3, r7
 80013d6:	460e      	mov	r6, r1
 80013d8:	d9f4      	bls.n	80013c4 <_printf_i+0x11c>
 80013da:	2b08      	cmp	r3, #8
 80013dc:	d10b      	bne.n	80013f6 <_printf_i+0x14e>
 80013de:	6823      	ldr	r3, [r4, #0]
 80013e0:	07de      	lsls	r6, r3, #31
 80013e2:	d508      	bpl.n	80013f6 <_printf_i+0x14e>
 80013e4:	6923      	ldr	r3, [r4, #16]
 80013e6:	6861      	ldr	r1, [r4, #4]
 80013e8:	4299      	cmp	r1, r3
 80013ea:	bfde      	ittt	le
 80013ec:	2330      	movle	r3, #48	; 0x30
 80013ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80013f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80013f6:	1b52      	subs	r2, r2, r5
 80013f8:	6122      	str	r2, [r4, #16]
 80013fa:	464b      	mov	r3, r9
 80013fc:	4621      	mov	r1, r4
 80013fe:	4640      	mov	r0, r8
 8001400:	f8cd a000 	str.w	sl, [sp]
 8001404:	aa03      	add	r2, sp, #12
 8001406:	f7ff fedf 	bl	80011c8 <_printf_common>
 800140a:	3001      	adds	r0, #1
 800140c:	d14c      	bne.n	80014a8 <_printf_i+0x200>
 800140e:	f04f 30ff 	mov.w	r0, #4294967295
 8001412:	b004      	add	sp, #16
 8001414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001418:	4834      	ldr	r0, [pc, #208]	; (80014ec <_printf_i+0x244>)
 800141a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800141e:	6829      	ldr	r1, [r5, #0]
 8001420:	6823      	ldr	r3, [r4, #0]
 8001422:	f851 6b04 	ldr.w	r6, [r1], #4
 8001426:	6029      	str	r1, [r5, #0]
 8001428:	061d      	lsls	r5, r3, #24
 800142a:	d514      	bpl.n	8001456 <_printf_i+0x1ae>
 800142c:	07df      	lsls	r7, r3, #31
 800142e:	bf44      	itt	mi
 8001430:	f043 0320 	orrmi.w	r3, r3, #32
 8001434:	6023      	strmi	r3, [r4, #0]
 8001436:	b91e      	cbnz	r6, 8001440 <_printf_i+0x198>
 8001438:	6823      	ldr	r3, [r4, #0]
 800143a:	f023 0320 	bic.w	r3, r3, #32
 800143e:	6023      	str	r3, [r4, #0]
 8001440:	2310      	movs	r3, #16
 8001442:	e7af      	b.n	80013a4 <_printf_i+0xfc>
 8001444:	6823      	ldr	r3, [r4, #0]
 8001446:	f043 0320 	orr.w	r3, r3, #32
 800144a:	6023      	str	r3, [r4, #0]
 800144c:	2378      	movs	r3, #120	; 0x78
 800144e:	4828      	ldr	r0, [pc, #160]	; (80014f0 <_printf_i+0x248>)
 8001450:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001454:	e7e3      	b.n	800141e <_printf_i+0x176>
 8001456:	0659      	lsls	r1, r3, #25
 8001458:	bf48      	it	mi
 800145a:	b2b6      	uxthmi	r6, r6
 800145c:	e7e6      	b.n	800142c <_printf_i+0x184>
 800145e:	4615      	mov	r5, r2
 8001460:	e7bb      	b.n	80013da <_printf_i+0x132>
 8001462:	682b      	ldr	r3, [r5, #0]
 8001464:	6826      	ldr	r6, [r4, #0]
 8001466:	1d18      	adds	r0, r3, #4
 8001468:	6961      	ldr	r1, [r4, #20]
 800146a:	6028      	str	r0, [r5, #0]
 800146c:	0635      	lsls	r5, r6, #24
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	d501      	bpl.n	8001476 <_printf_i+0x1ce>
 8001472:	6019      	str	r1, [r3, #0]
 8001474:	e002      	b.n	800147c <_printf_i+0x1d4>
 8001476:	0670      	lsls	r0, r6, #25
 8001478:	d5fb      	bpl.n	8001472 <_printf_i+0x1ca>
 800147a:	8019      	strh	r1, [r3, #0]
 800147c:	2300      	movs	r3, #0
 800147e:	4615      	mov	r5, r2
 8001480:	6123      	str	r3, [r4, #16]
 8001482:	e7ba      	b.n	80013fa <_printf_i+0x152>
 8001484:	682b      	ldr	r3, [r5, #0]
 8001486:	2100      	movs	r1, #0
 8001488:	1d1a      	adds	r2, r3, #4
 800148a:	602a      	str	r2, [r5, #0]
 800148c:	681d      	ldr	r5, [r3, #0]
 800148e:	6862      	ldr	r2, [r4, #4]
 8001490:	4628      	mov	r0, r5
 8001492:	f000 f82f 	bl	80014f4 <memchr>
 8001496:	b108      	cbz	r0, 800149c <_printf_i+0x1f4>
 8001498:	1b40      	subs	r0, r0, r5
 800149a:	6060      	str	r0, [r4, #4]
 800149c:	6863      	ldr	r3, [r4, #4]
 800149e:	6123      	str	r3, [r4, #16]
 80014a0:	2300      	movs	r3, #0
 80014a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80014a6:	e7a8      	b.n	80013fa <_printf_i+0x152>
 80014a8:	462a      	mov	r2, r5
 80014aa:	4649      	mov	r1, r9
 80014ac:	4640      	mov	r0, r8
 80014ae:	6923      	ldr	r3, [r4, #16]
 80014b0:	47d0      	blx	sl
 80014b2:	3001      	adds	r0, #1
 80014b4:	d0ab      	beq.n	800140e <_printf_i+0x166>
 80014b6:	6823      	ldr	r3, [r4, #0]
 80014b8:	079b      	lsls	r3, r3, #30
 80014ba:	d413      	bmi.n	80014e4 <_printf_i+0x23c>
 80014bc:	68e0      	ldr	r0, [r4, #12]
 80014be:	9b03      	ldr	r3, [sp, #12]
 80014c0:	4298      	cmp	r0, r3
 80014c2:	bfb8      	it	lt
 80014c4:	4618      	movlt	r0, r3
 80014c6:	e7a4      	b.n	8001412 <_printf_i+0x16a>
 80014c8:	2301      	movs	r3, #1
 80014ca:	4632      	mov	r2, r6
 80014cc:	4649      	mov	r1, r9
 80014ce:	4640      	mov	r0, r8
 80014d0:	47d0      	blx	sl
 80014d2:	3001      	adds	r0, #1
 80014d4:	d09b      	beq.n	800140e <_printf_i+0x166>
 80014d6:	3501      	adds	r5, #1
 80014d8:	68e3      	ldr	r3, [r4, #12]
 80014da:	9903      	ldr	r1, [sp, #12]
 80014dc:	1a5b      	subs	r3, r3, r1
 80014de:	42ab      	cmp	r3, r5
 80014e0:	dcf2      	bgt.n	80014c8 <_printf_i+0x220>
 80014e2:	e7eb      	b.n	80014bc <_printf_i+0x214>
 80014e4:	2500      	movs	r5, #0
 80014e6:	f104 0619 	add.w	r6, r4, #25
 80014ea:	e7f5      	b.n	80014d8 <_printf_i+0x230>
 80014ec:	080017f6 	.word	0x080017f6
 80014f0:	08001807 	.word	0x08001807

080014f4 <memchr>:
 80014f4:	4603      	mov	r3, r0
 80014f6:	b510      	push	{r4, lr}
 80014f8:	b2c9      	uxtb	r1, r1
 80014fa:	4402      	add	r2, r0
 80014fc:	4293      	cmp	r3, r2
 80014fe:	4618      	mov	r0, r3
 8001500:	d101      	bne.n	8001506 <memchr+0x12>
 8001502:	2000      	movs	r0, #0
 8001504:	e003      	b.n	800150e <memchr+0x1a>
 8001506:	7804      	ldrb	r4, [r0, #0]
 8001508:	3301      	adds	r3, #1
 800150a:	428c      	cmp	r4, r1
 800150c:	d1f6      	bne.n	80014fc <memchr+0x8>
 800150e:	bd10      	pop	{r4, pc}

08001510 <memcpy>:
 8001510:	440a      	add	r2, r1
 8001512:	4291      	cmp	r1, r2
 8001514:	f100 33ff 	add.w	r3, r0, #4294967295
 8001518:	d100      	bne.n	800151c <memcpy+0xc>
 800151a:	4770      	bx	lr
 800151c:	b510      	push	{r4, lr}
 800151e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001522:	4291      	cmp	r1, r2
 8001524:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001528:	d1f9      	bne.n	800151e <memcpy+0xe>
 800152a:	bd10      	pop	{r4, pc}

0800152c <memmove>:
 800152c:	4288      	cmp	r0, r1
 800152e:	b510      	push	{r4, lr}
 8001530:	eb01 0402 	add.w	r4, r1, r2
 8001534:	d902      	bls.n	800153c <memmove+0x10>
 8001536:	4284      	cmp	r4, r0
 8001538:	4623      	mov	r3, r4
 800153a:	d807      	bhi.n	800154c <memmove+0x20>
 800153c:	1e43      	subs	r3, r0, #1
 800153e:	42a1      	cmp	r1, r4
 8001540:	d008      	beq.n	8001554 <memmove+0x28>
 8001542:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001546:	f803 2f01 	strb.w	r2, [r3, #1]!
 800154a:	e7f8      	b.n	800153e <memmove+0x12>
 800154c:	4601      	mov	r1, r0
 800154e:	4402      	add	r2, r0
 8001550:	428a      	cmp	r2, r1
 8001552:	d100      	bne.n	8001556 <memmove+0x2a>
 8001554:	bd10      	pop	{r4, pc}
 8001556:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800155a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800155e:	e7f7      	b.n	8001550 <memmove+0x24>

08001560 <_free_r>:
 8001560:	b538      	push	{r3, r4, r5, lr}
 8001562:	4605      	mov	r5, r0
 8001564:	2900      	cmp	r1, #0
 8001566:	d040      	beq.n	80015ea <_free_r+0x8a>
 8001568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800156c:	1f0c      	subs	r4, r1, #4
 800156e:	2b00      	cmp	r3, #0
 8001570:	bfb8      	it	lt
 8001572:	18e4      	addlt	r4, r4, r3
 8001574:	f000 f910 	bl	8001798 <__malloc_lock>
 8001578:	4a1c      	ldr	r2, [pc, #112]	; (80015ec <_free_r+0x8c>)
 800157a:	6813      	ldr	r3, [r2, #0]
 800157c:	b933      	cbnz	r3, 800158c <_free_r+0x2c>
 800157e:	6063      	str	r3, [r4, #4]
 8001580:	6014      	str	r4, [r2, #0]
 8001582:	4628      	mov	r0, r5
 8001584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001588:	f000 b90c 	b.w	80017a4 <__malloc_unlock>
 800158c:	42a3      	cmp	r3, r4
 800158e:	d908      	bls.n	80015a2 <_free_r+0x42>
 8001590:	6820      	ldr	r0, [r4, #0]
 8001592:	1821      	adds	r1, r4, r0
 8001594:	428b      	cmp	r3, r1
 8001596:	bf01      	itttt	eq
 8001598:	6819      	ldreq	r1, [r3, #0]
 800159a:	685b      	ldreq	r3, [r3, #4]
 800159c:	1809      	addeq	r1, r1, r0
 800159e:	6021      	streq	r1, [r4, #0]
 80015a0:	e7ed      	b.n	800157e <_free_r+0x1e>
 80015a2:	461a      	mov	r2, r3
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	b10b      	cbz	r3, 80015ac <_free_r+0x4c>
 80015a8:	42a3      	cmp	r3, r4
 80015aa:	d9fa      	bls.n	80015a2 <_free_r+0x42>
 80015ac:	6811      	ldr	r1, [r2, #0]
 80015ae:	1850      	adds	r0, r2, r1
 80015b0:	42a0      	cmp	r0, r4
 80015b2:	d10b      	bne.n	80015cc <_free_r+0x6c>
 80015b4:	6820      	ldr	r0, [r4, #0]
 80015b6:	4401      	add	r1, r0
 80015b8:	1850      	adds	r0, r2, r1
 80015ba:	4283      	cmp	r3, r0
 80015bc:	6011      	str	r1, [r2, #0]
 80015be:	d1e0      	bne.n	8001582 <_free_r+0x22>
 80015c0:	6818      	ldr	r0, [r3, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	4401      	add	r1, r0
 80015c6:	6011      	str	r1, [r2, #0]
 80015c8:	6053      	str	r3, [r2, #4]
 80015ca:	e7da      	b.n	8001582 <_free_r+0x22>
 80015cc:	d902      	bls.n	80015d4 <_free_r+0x74>
 80015ce:	230c      	movs	r3, #12
 80015d0:	602b      	str	r3, [r5, #0]
 80015d2:	e7d6      	b.n	8001582 <_free_r+0x22>
 80015d4:	6820      	ldr	r0, [r4, #0]
 80015d6:	1821      	adds	r1, r4, r0
 80015d8:	428b      	cmp	r3, r1
 80015da:	bf01      	itttt	eq
 80015dc:	6819      	ldreq	r1, [r3, #0]
 80015de:	685b      	ldreq	r3, [r3, #4]
 80015e0:	1809      	addeq	r1, r1, r0
 80015e2:	6021      	streq	r1, [r4, #0]
 80015e4:	6063      	str	r3, [r4, #4]
 80015e6:	6054      	str	r4, [r2, #4]
 80015e8:	e7cb      	b.n	8001582 <_free_r+0x22>
 80015ea:	bd38      	pop	{r3, r4, r5, pc}
 80015ec:	200000c8 	.word	0x200000c8

080015f0 <sbrk_aligned>:
 80015f0:	b570      	push	{r4, r5, r6, lr}
 80015f2:	4e0e      	ldr	r6, [pc, #56]	; (800162c <sbrk_aligned+0x3c>)
 80015f4:	460c      	mov	r4, r1
 80015f6:	6831      	ldr	r1, [r6, #0]
 80015f8:	4605      	mov	r5, r0
 80015fa:	b911      	cbnz	r1, 8001602 <sbrk_aligned+0x12>
 80015fc:	f000 f8bc 	bl	8001778 <_sbrk_r>
 8001600:	6030      	str	r0, [r6, #0]
 8001602:	4621      	mov	r1, r4
 8001604:	4628      	mov	r0, r5
 8001606:	f000 f8b7 	bl	8001778 <_sbrk_r>
 800160a:	1c43      	adds	r3, r0, #1
 800160c:	d00a      	beq.n	8001624 <sbrk_aligned+0x34>
 800160e:	1cc4      	adds	r4, r0, #3
 8001610:	f024 0403 	bic.w	r4, r4, #3
 8001614:	42a0      	cmp	r0, r4
 8001616:	d007      	beq.n	8001628 <sbrk_aligned+0x38>
 8001618:	1a21      	subs	r1, r4, r0
 800161a:	4628      	mov	r0, r5
 800161c:	f000 f8ac 	bl	8001778 <_sbrk_r>
 8001620:	3001      	adds	r0, #1
 8001622:	d101      	bne.n	8001628 <sbrk_aligned+0x38>
 8001624:	f04f 34ff 	mov.w	r4, #4294967295
 8001628:	4620      	mov	r0, r4
 800162a:	bd70      	pop	{r4, r5, r6, pc}
 800162c:	200000cc 	.word	0x200000cc

08001630 <_malloc_r>:
 8001630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001634:	1ccd      	adds	r5, r1, #3
 8001636:	f025 0503 	bic.w	r5, r5, #3
 800163a:	3508      	adds	r5, #8
 800163c:	2d0c      	cmp	r5, #12
 800163e:	bf38      	it	cc
 8001640:	250c      	movcc	r5, #12
 8001642:	2d00      	cmp	r5, #0
 8001644:	4607      	mov	r7, r0
 8001646:	db01      	blt.n	800164c <_malloc_r+0x1c>
 8001648:	42a9      	cmp	r1, r5
 800164a:	d905      	bls.n	8001658 <_malloc_r+0x28>
 800164c:	230c      	movs	r3, #12
 800164e:	2600      	movs	r6, #0
 8001650:	603b      	str	r3, [r7, #0]
 8001652:	4630      	mov	r0, r6
 8001654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001658:	4e2e      	ldr	r6, [pc, #184]	; (8001714 <_malloc_r+0xe4>)
 800165a:	f000 f89d 	bl	8001798 <__malloc_lock>
 800165e:	6833      	ldr	r3, [r6, #0]
 8001660:	461c      	mov	r4, r3
 8001662:	bb34      	cbnz	r4, 80016b2 <_malloc_r+0x82>
 8001664:	4629      	mov	r1, r5
 8001666:	4638      	mov	r0, r7
 8001668:	f7ff ffc2 	bl	80015f0 <sbrk_aligned>
 800166c:	1c43      	adds	r3, r0, #1
 800166e:	4604      	mov	r4, r0
 8001670:	d14d      	bne.n	800170e <_malloc_r+0xde>
 8001672:	6834      	ldr	r4, [r6, #0]
 8001674:	4626      	mov	r6, r4
 8001676:	2e00      	cmp	r6, #0
 8001678:	d140      	bne.n	80016fc <_malloc_r+0xcc>
 800167a:	6823      	ldr	r3, [r4, #0]
 800167c:	4631      	mov	r1, r6
 800167e:	4638      	mov	r0, r7
 8001680:	eb04 0803 	add.w	r8, r4, r3
 8001684:	f000 f878 	bl	8001778 <_sbrk_r>
 8001688:	4580      	cmp	r8, r0
 800168a:	d13a      	bne.n	8001702 <_malloc_r+0xd2>
 800168c:	6821      	ldr	r1, [r4, #0]
 800168e:	3503      	adds	r5, #3
 8001690:	1a6d      	subs	r5, r5, r1
 8001692:	f025 0503 	bic.w	r5, r5, #3
 8001696:	3508      	adds	r5, #8
 8001698:	2d0c      	cmp	r5, #12
 800169a:	bf38      	it	cc
 800169c:	250c      	movcc	r5, #12
 800169e:	4638      	mov	r0, r7
 80016a0:	4629      	mov	r1, r5
 80016a2:	f7ff ffa5 	bl	80015f0 <sbrk_aligned>
 80016a6:	3001      	adds	r0, #1
 80016a8:	d02b      	beq.n	8001702 <_malloc_r+0xd2>
 80016aa:	6823      	ldr	r3, [r4, #0]
 80016ac:	442b      	add	r3, r5
 80016ae:	6023      	str	r3, [r4, #0]
 80016b0:	e00e      	b.n	80016d0 <_malloc_r+0xa0>
 80016b2:	6822      	ldr	r2, [r4, #0]
 80016b4:	1b52      	subs	r2, r2, r5
 80016b6:	d41e      	bmi.n	80016f6 <_malloc_r+0xc6>
 80016b8:	2a0b      	cmp	r2, #11
 80016ba:	d916      	bls.n	80016ea <_malloc_r+0xba>
 80016bc:	1961      	adds	r1, r4, r5
 80016be:	42a3      	cmp	r3, r4
 80016c0:	6025      	str	r5, [r4, #0]
 80016c2:	bf18      	it	ne
 80016c4:	6059      	strne	r1, [r3, #4]
 80016c6:	6863      	ldr	r3, [r4, #4]
 80016c8:	bf08      	it	eq
 80016ca:	6031      	streq	r1, [r6, #0]
 80016cc:	5162      	str	r2, [r4, r5]
 80016ce:	604b      	str	r3, [r1, #4]
 80016d0:	4638      	mov	r0, r7
 80016d2:	f104 060b 	add.w	r6, r4, #11
 80016d6:	f000 f865 	bl	80017a4 <__malloc_unlock>
 80016da:	f026 0607 	bic.w	r6, r6, #7
 80016de:	1d23      	adds	r3, r4, #4
 80016e0:	1af2      	subs	r2, r6, r3
 80016e2:	d0b6      	beq.n	8001652 <_malloc_r+0x22>
 80016e4:	1b9b      	subs	r3, r3, r6
 80016e6:	50a3      	str	r3, [r4, r2]
 80016e8:	e7b3      	b.n	8001652 <_malloc_r+0x22>
 80016ea:	6862      	ldr	r2, [r4, #4]
 80016ec:	42a3      	cmp	r3, r4
 80016ee:	bf0c      	ite	eq
 80016f0:	6032      	streq	r2, [r6, #0]
 80016f2:	605a      	strne	r2, [r3, #4]
 80016f4:	e7ec      	b.n	80016d0 <_malloc_r+0xa0>
 80016f6:	4623      	mov	r3, r4
 80016f8:	6864      	ldr	r4, [r4, #4]
 80016fa:	e7b2      	b.n	8001662 <_malloc_r+0x32>
 80016fc:	4634      	mov	r4, r6
 80016fe:	6876      	ldr	r6, [r6, #4]
 8001700:	e7b9      	b.n	8001676 <_malloc_r+0x46>
 8001702:	230c      	movs	r3, #12
 8001704:	4638      	mov	r0, r7
 8001706:	603b      	str	r3, [r7, #0]
 8001708:	f000 f84c 	bl	80017a4 <__malloc_unlock>
 800170c:	e7a1      	b.n	8001652 <_malloc_r+0x22>
 800170e:	6025      	str	r5, [r4, #0]
 8001710:	e7de      	b.n	80016d0 <_malloc_r+0xa0>
 8001712:	bf00      	nop
 8001714:	200000c8 	.word	0x200000c8

08001718 <_realloc_r>:
 8001718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800171c:	4680      	mov	r8, r0
 800171e:	4614      	mov	r4, r2
 8001720:	460e      	mov	r6, r1
 8001722:	b921      	cbnz	r1, 800172e <_realloc_r+0x16>
 8001724:	4611      	mov	r1, r2
 8001726:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800172a:	f7ff bf81 	b.w	8001630 <_malloc_r>
 800172e:	b92a      	cbnz	r2, 800173c <_realloc_r+0x24>
 8001730:	f7ff ff16 	bl	8001560 <_free_r>
 8001734:	4625      	mov	r5, r4
 8001736:	4628      	mov	r0, r5
 8001738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800173c:	f000 f838 	bl	80017b0 <_malloc_usable_size_r>
 8001740:	4284      	cmp	r4, r0
 8001742:	4607      	mov	r7, r0
 8001744:	d802      	bhi.n	800174c <_realloc_r+0x34>
 8001746:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800174a:	d812      	bhi.n	8001772 <_realloc_r+0x5a>
 800174c:	4621      	mov	r1, r4
 800174e:	4640      	mov	r0, r8
 8001750:	f7ff ff6e 	bl	8001630 <_malloc_r>
 8001754:	4605      	mov	r5, r0
 8001756:	2800      	cmp	r0, #0
 8001758:	d0ed      	beq.n	8001736 <_realloc_r+0x1e>
 800175a:	42bc      	cmp	r4, r7
 800175c:	4622      	mov	r2, r4
 800175e:	4631      	mov	r1, r6
 8001760:	bf28      	it	cs
 8001762:	463a      	movcs	r2, r7
 8001764:	f7ff fed4 	bl	8001510 <memcpy>
 8001768:	4631      	mov	r1, r6
 800176a:	4640      	mov	r0, r8
 800176c:	f7ff fef8 	bl	8001560 <_free_r>
 8001770:	e7e1      	b.n	8001736 <_realloc_r+0x1e>
 8001772:	4635      	mov	r5, r6
 8001774:	e7df      	b.n	8001736 <_realloc_r+0x1e>
	...

08001778 <_sbrk_r>:
 8001778:	b538      	push	{r3, r4, r5, lr}
 800177a:	2300      	movs	r3, #0
 800177c:	4d05      	ldr	r5, [pc, #20]	; (8001794 <_sbrk_r+0x1c>)
 800177e:	4604      	mov	r4, r0
 8001780:	4608      	mov	r0, r1
 8001782:	602b      	str	r3, [r5, #0]
 8001784:	f7ff f9da 	bl	8000b3c <_sbrk>
 8001788:	1c43      	adds	r3, r0, #1
 800178a:	d102      	bne.n	8001792 <_sbrk_r+0x1a>
 800178c:	682b      	ldr	r3, [r5, #0]
 800178e:	b103      	cbz	r3, 8001792 <_sbrk_r+0x1a>
 8001790:	6023      	str	r3, [r4, #0]
 8001792:	bd38      	pop	{r3, r4, r5, pc}
 8001794:	200000d0 	.word	0x200000d0

08001798 <__malloc_lock>:
 8001798:	4801      	ldr	r0, [pc, #4]	; (80017a0 <__malloc_lock+0x8>)
 800179a:	f000 b811 	b.w	80017c0 <__retarget_lock_acquire_recursive>
 800179e:	bf00      	nop
 80017a0:	200000d4 	.word	0x200000d4

080017a4 <__malloc_unlock>:
 80017a4:	4801      	ldr	r0, [pc, #4]	; (80017ac <__malloc_unlock+0x8>)
 80017a6:	f000 b80c 	b.w	80017c2 <__retarget_lock_release_recursive>
 80017aa:	bf00      	nop
 80017ac:	200000d4 	.word	0x200000d4

080017b0 <_malloc_usable_size_r>:
 80017b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80017b4:	1f18      	subs	r0, r3, #4
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	bfbc      	itt	lt
 80017ba:	580b      	ldrlt	r3, [r1, r0]
 80017bc:	18c0      	addlt	r0, r0, r3
 80017be:	4770      	bx	lr

080017c0 <__retarget_lock_acquire_recursive>:
 80017c0:	4770      	bx	lr

080017c2 <__retarget_lock_release_recursive>:
 80017c2:	4770      	bx	lr

080017c4 <_init>:
 80017c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017c6:	bf00      	nop
 80017c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017ca:	bc08      	pop	{r3}
 80017cc:	469e      	mov	lr, r3
 80017ce:	4770      	bx	lr

080017d0 <_fini>:
 80017d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017d2:	bf00      	nop
 80017d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017d6:	bc08      	pop	{r3}
 80017d8:	469e      	mov	lr, r3
 80017da:	4770      	bx	lr
